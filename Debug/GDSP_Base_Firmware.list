
GDSP_Base_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000572c  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080058d8  080058d8  000158d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005918  08005918  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08005918  08005918  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005918  08005918  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005918  08005918  00015918  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800591c  0800591c  0001591c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005920  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c4  2000000c  0800592c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002d0  0800592c  000202d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001294c  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000262d  00000000  00000000  00032988  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001200  00000000  00000000  00034fb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010e8  00000000  00000000  000361b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a77b  00000000  00000000  000372a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012b71  00000000  00000000  00061a1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010eda5  00000000  00000000  0007458c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00183331  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ca4  00000000  00000000  00183384  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000000c 	.word	0x2000000c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080058c0 	.word	0x080058c0

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000010 	.word	0x20000010
 80001e8:	080058c0 	.word	0x080058c0

080001ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001ec:	b580      	push	{r7, lr}
 80001ee:	b082      	sub	sp, #8
 80001f0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001f2:	f000 fca8 	bl	8000b46 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001f6:	f000 f82b 	bl	8000250 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001fa:	f000 f9eb 	bl	80005d4 <MX_GPIO_Init>
  MX_DMA_Init();
 80001fe:	f000 f9c3 	bl	8000588 <MX_DMA_Init>
  MX_ADC1_Init();
 8000202:	f000 f86d 	bl	80002e0 <MX_ADC1_Init>
  MX_DAC1_Init();
 8000206:	f000 f8e3 	bl	80003d0 <MX_DAC1_Init>
  MX_TIM3_Init();
 800020a:	f000 f913 	bl	8000434 <MX_TIM3_Init>
  MX_TIM6_Init();
 800020e:	f000 f985 	bl	800051c <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
HAL_ADC_Start_DMA(&hadc1, adc_data, 1);
 8000212:	2201      	movs	r2, #1
 8000214:	4909      	ldr	r1, [pc, #36]	; (800023c <main+0x50>)
 8000216:	480a      	ldr	r0, [pc, #40]	; (8000240 <main+0x54>)
 8000218:	f001 f870 	bl	80012fc <HAL_ADC_Start_DMA>
HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, adc_data, 1,
 800021c:	2300      	movs	r3, #0
 800021e:	9300      	str	r3, [sp, #0]
 8000220:	2301      	movs	r3, #1
 8000222:	4a06      	ldr	r2, [pc, #24]	; (800023c <main+0x50>)
 8000224:	2100      	movs	r1, #0
 8000226:	4807      	ldr	r0, [pc, #28]	; (8000244 <main+0x58>)
 8000228:	f002 f84e 	bl	80022c8 <HAL_DAC_Start_DMA>
		DAC_ALIGN_12B_R);
HAL_TIM_Base_Start(&htim3);
 800022c:	4806      	ldr	r0, [pc, #24]	; (8000248 <main+0x5c>)
 800022e:	f004 fa73 	bl	8004718 <HAL_TIM_Base_Start>
HAL_TIM_Base_Start(&htim6);
 8000232:	4806      	ldr	r0, [pc, #24]	; (800024c <main+0x60>)
 8000234:	f004 fa70 	bl	8004718 <HAL_TIM_Base_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000238:	e7fe      	b.n	8000238 <main+0x4c>
 800023a:	bf00      	nop
 800023c:	200001cc 	.word	0x200001cc
 8000240:	20000028 	.word	0x20000028
 8000244:	200000d8 	.word	0x200000d8
 8000248:	20000134 	.word	0x20000134
 800024c:	20000180 	.word	0x20000180

08000250 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000250:	b580      	push	{r7, lr}
 8000252:	b096      	sub	sp, #88	; 0x58
 8000254:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000256:	f107 0314 	add.w	r3, r7, #20
 800025a:	2244      	movs	r2, #68	; 0x44
 800025c:	2100      	movs	r1, #0
 800025e:	4618      	mov	r0, r3
 8000260:	f005 fb26 	bl	80058b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000264:	463b      	mov	r3, r7
 8000266:	2200      	movs	r2, #0
 8000268:	601a      	str	r2, [r3, #0]
 800026a:	605a      	str	r2, [r3, #4]
 800026c:	609a      	str	r2, [r3, #8]
 800026e:	60da      	str	r2, [r3, #12]
 8000270:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000272:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000276:	f002 fed3 	bl	8003020 <HAL_PWREx_ControlVoltageScaling>
 800027a:	4603      	mov	r3, r0
 800027c:	2b00      	cmp	r3, #0
 800027e:	d001      	beq.n	8000284 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000280:	f000 fa66 	bl	8000750 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000284:	2310      	movs	r3, #16
 8000286:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000288:	2301      	movs	r3, #1
 800028a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800028c:	2300      	movs	r3, #0
 800028e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000290:	2360      	movs	r3, #96	; 0x60
 8000292:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000294:	2300      	movs	r3, #0
 8000296:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000298:	f107 0314 	add.w	r3, r7, #20
 800029c:	4618      	mov	r0, r3
 800029e:	f002 ff25 	bl	80030ec <HAL_RCC_OscConfig>
 80002a2:	4603      	mov	r3, r0
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	d001      	beq.n	80002ac <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80002a8:	f000 fa52 	bl	8000750 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002ac:	230f      	movs	r3, #15
 80002ae:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80002b0:	2300      	movs	r3, #0
 80002b2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002b4:	2300      	movs	r3, #0
 80002b6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002bc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002be:	2300      	movs	r3, #0
 80002c0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002c2:	463b      	mov	r3, r7
 80002c4:	2100      	movs	r1, #0
 80002c6:	4618      	mov	r0, r3
 80002c8:	f003 fb36 	bl	8003938 <HAL_RCC_ClockConfig>
 80002cc:	4603      	mov	r3, r0
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	d001      	beq.n	80002d6 <SystemClock_Config+0x86>
  {
    Error_Handler();
 80002d2:	f000 fa3d 	bl	8000750 <Error_Handler>
  }
}
 80002d6:	bf00      	nop
 80002d8:	3758      	adds	r7, #88	; 0x58
 80002da:	46bd      	mov	sp, r7
 80002dc:	bd80      	pop	{r7, pc}
	...

080002e0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b08a      	sub	sp, #40	; 0x28
 80002e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80002e6:	f107 031c 	add.w	r3, r7, #28
 80002ea:	2200      	movs	r2, #0
 80002ec:	601a      	str	r2, [r3, #0]
 80002ee:	605a      	str	r2, [r3, #4]
 80002f0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80002f2:	1d3b      	adds	r3, r7, #4
 80002f4:	2200      	movs	r2, #0
 80002f6:	601a      	str	r2, [r3, #0]
 80002f8:	605a      	str	r2, [r3, #4]
 80002fa:	609a      	str	r2, [r3, #8]
 80002fc:	60da      	str	r2, [r3, #12]
 80002fe:	611a      	str	r2, [r3, #16]
 8000300:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000302:	4b30      	ldr	r3, [pc, #192]	; (80003c4 <MX_ADC1_Init+0xe4>)
 8000304:	4a30      	ldr	r2, [pc, #192]	; (80003c8 <MX_ADC1_Init+0xe8>)
 8000306:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000308:	4b2e      	ldr	r3, [pc, #184]	; (80003c4 <MX_ADC1_Init+0xe4>)
 800030a:	2200      	movs	r2, #0
 800030c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800030e:	4b2d      	ldr	r3, [pc, #180]	; (80003c4 <MX_ADC1_Init+0xe4>)
 8000310:	2200      	movs	r2, #0
 8000312:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000314:	4b2b      	ldr	r3, [pc, #172]	; (80003c4 <MX_ADC1_Init+0xe4>)
 8000316:	2200      	movs	r2, #0
 8000318:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800031a:	4b2a      	ldr	r3, [pc, #168]	; (80003c4 <MX_ADC1_Init+0xe4>)
 800031c:	2200      	movs	r2, #0
 800031e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000320:	4b28      	ldr	r3, [pc, #160]	; (80003c4 <MX_ADC1_Init+0xe4>)
 8000322:	2204      	movs	r2, #4
 8000324:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000326:	4b27      	ldr	r3, [pc, #156]	; (80003c4 <MX_ADC1_Init+0xe4>)
 8000328:	2200      	movs	r2, #0
 800032a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800032c:	4b25      	ldr	r3, [pc, #148]	; (80003c4 <MX_ADC1_Init+0xe4>)
 800032e:	2200      	movs	r2, #0
 8000330:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000332:	4b24      	ldr	r3, [pc, #144]	; (80003c4 <MX_ADC1_Init+0xe4>)
 8000334:	2201      	movs	r2, #1
 8000336:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000338:	4b22      	ldr	r3, [pc, #136]	; (80003c4 <MX_ADC1_Init+0xe4>)
 800033a:	2200      	movs	r2, #0
 800033c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T3_TRGO;
 8000340:	4b20      	ldr	r3, [pc, #128]	; (80003c4 <MX_ADC1_Init+0xe4>)
 8000342:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8000346:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000348:	4b1e      	ldr	r3, [pc, #120]	; (80003c4 <MX_ADC1_Init+0xe4>)
 800034a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800034e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000350:	4b1c      	ldr	r3, [pc, #112]	; (80003c4 <MX_ADC1_Init+0xe4>)
 8000352:	2201      	movs	r2, #1
 8000354:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000358:	4b1a      	ldr	r3, [pc, #104]	; (80003c4 <MX_ADC1_Init+0xe4>)
 800035a:	2200      	movs	r2, #0
 800035c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800035e:	4b19      	ldr	r3, [pc, #100]	; (80003c4 <MX_ADC1_Init+0xe4>)
 8000360:	2200      	movs	r2, #0
 8000362:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000366:	4817      	ldr	r0, [pc, #92]	; (80003c4 <MX_ADC1_Init+0xe4>)
 8000368:	f000 fe6e 	bl	8001048 <HAL_ADC_Init>
 800036c:	4603      	mov	r3, r0
 800036e:	2b00      	cmp	r3, #0
 8000370:	d001      	beq.n	8000376 <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 8000372:	f000 f9ed 	bl	8000750 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000376:	2300      	movs	r3, #0
 8000378:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800037a:	f107 031c 	add.w	r3, r7, #28
 800037e:	4619      	mov	r1, r3
 8000380:	4810      	ldr	r0, [pc, #64]	; (80003c4 <MX_ADC1_Init+0xe4>)
 8000382:	f001 fdbd 	bl	8001f00 <HAL_ADCEx_MultiModeConfigChannel>
 8000386:	4603      	mov	r3, r0
 8000388:	2b00      	cmp	r3, #0
 800038a:	d001      	beq.n	8000390 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 800038c:	f000 f9e0 	bl	8000750 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000390:	4b0e      	ldr	r3, [pc, #56]	; (80003cc <MX_ADC1_Init+0xec>)
 8000392:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000394:	2306      	movs	r3, #6
 8000396:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000398:	2300      	movs	r3, #0
 800039a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800039c:	237f      	movs	r3, #127	; 0x7f
 800039e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80003a0:	2304      	movs	r3, #4
 80003a2:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80003a4:	2300      	movs	r3, #0
 80003a6:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003a8:	1d3b      	adds	r3, r7, #4
 80003aa:	4619      	mov	r1, r3
 80003ac:	4805      	ldr	r0, [pc, #20]	; (80003c4 <MX_ADC1_Init+0xe4>)
 80003ae:	f001 f87f 	bl	80014b0 <HAL_ADC_ConfigChannel>
 80003b2:	4603      	mov	r3, r0
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	d001      	beq.n	80003bc <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 80003b8:	f000 f9ca 	bl	8000750 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80003bc:	bf00      	nop
 80003be:	3728      	adds	r7, #40	; 0x28
 80003c0:	46bd      	mov	sp, r7
 80003c2:	bd80      	pop	{r7, pc}
 80003c4:	20000028 	.word	0x20000028
 80003c8:	50040000 	.word	0x50040000
 80003cc:	04300002 	.word	0x04300002

080003d0 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b08a      	sub	sp, #40	; 0x28
 80003d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80003d6:	1d3b      	adds	r3, r7, #4
 80003d8:	2224      	movs	r2, #36	; 0x24
 80003da:	2100      	movs	r1, #0
 80003dc:	4618      	mov	r0, r3
 80003de:	f005 fa67 	bl	80058b0 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80003e2:	4b12      	ldr	r3, [pc, #72]	; (800042c <MX_DAC1_Init+0x5c>)
 80003e4:	4a12      	ldr	r2, [pc, #72]	; (8000430 <MX_DAC1_Init+0x60>)
 80003e6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80003e8:	4810      	ldr	r0, [pc, #64]	; (800042c <MX_DAC1_Init+0x5c>)
 80003ea:	f001 ff4a 	bl	8002282 <HAL_DAC_Init>
 80003ee:	4603      	mov	r3, r0
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d001      	beq.n	80003f8 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80003f4:	f000 f9ac 	bl	8000750 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80003f8:	2300      	movs	r3, #0
 80003fa:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 80003fc:	2304      	movs	r3, #4
 80003fe:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000400:	2300      	movs	r3, #0
 8000402:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000404:	2300      	movs	r3, #0
 8000406:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000408:	2300      	movs	r3, #0
 800040a:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800040c:	1d3b      	adds	r3, r7, #4
 800040e:	2200      	movs	r2, #0
 8000410:	4619      	mov	r1, r3
 8000412:	4806      	ldr	r0, [pc, #24]	; (800042c <MX_DAC1_Init+0x5c>)
 8000414:	f002 f8a6 	bl	8002564 <HAL_DAC_ConfigChannel>
 8000418:	4603      	mov	r3, r0
 800041a:	2b00      	cmp	r3, #0
 800041c:	d001      	beq.n	8000422 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 800041e:	f000 f997 	bl	8000750 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000422:	bf00      	nop
 8000424:	3728      	adds	r7, #40	; 0x28
 8000426:	46bd      	mov	sp, r7
 8000428:	bd80      	pop	{r7, pc}
 800042a:	bf00      	nop
 800042c:	200000d8 	.word	0x200000d8
 8000430:	40007400 	.word	0x40007400

08000434 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	b08e      	sub	sp, #56	; 0x38
 8000438:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800043a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800043e:	2200      	movs	r2, #0
 8000440:	601a      	str	r2, [r3, #0]
 8000442:	605a      	str	r2, [r3, #4]
 8000444:	609a      	str	r2, [r3, #8]
 8000446:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000448:	f107 031c 	add.w	r3, r7, #28
 800044c:	2200      	movs	r2, #0
 800044e:	601a      	str	r2, [r3, #0]
 8000450:	605a      	str	r2, [r3, #4]
 8000452:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000454:	463b      	mov	r3, r7
 8000456:	2200      	movs	r2, #0
 8000458:	601a      	str	r2, [r3, #0]
 800045a:	605a      	str	r2, [r3, #4]
 800045c:	609a      	str	r2, [r3, #8]
 800045e:	60da      	str	r2, [r3, #12]
 8000460:	611a      	str	r2, [r3, #16]
 8000462:	615a      	str	r2, [r3, #20]
 8000464:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000466:	4b2b      	ldr	r3, [pc, #172]	; (8000514 <MX_TIM3_Init+0xe0>)
 8000468:	4a2b      	ldr	r2, [pc, #172]	; (8000518 <MX_TIM3_Init+0xe4>)
 800046a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 40-1;
 800046c:	4b29      	ldr	r3, [pc, #164]	; (8000514 <MX_TIM3_Init+0xe0>)
 800046e:	2227      	movs	r2, #39	; 0x27
 8000470:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000472:	4b28      	ldr	r3, [pc, #160]	; (8000514 <MX_TIM3_Init+0xe0>)
 8000474:	2200      	movs	r2, #0
 8000476:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10-1;
 8000478:	4b26      	ldr	r3, [pc, #152]	; (8000514 <MX_TIM3_Init+0xe0>)
 800047a:	2209      	movs	r2, #9
 800047c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800047e:	4b25      	ldr	r3, [pc, #148]	; (8000514 <MX_TIM3_Init+0xe0>)
 8000480:	2200      	movs	r2, #0
 8000482:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000484:	4b23      	ldr	r3, [pc, #140]	; (8000514 <MX_TIM3_Init+0xe0>)
 8000486:	2200      	movs	r2, #0
 8000488:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800048a:	4822      	ldr	r0, [pc, #136]	; (8000514 <MX_TIM3_Init+0xe0>)
 800048c:	f004 f8ec 	bl	8004668 <HAL_TIM_Base_Init>
 8000490:	4603      	mov	r3, r0
 8000492:	2b00      	cmp	r3, #0
 8000494:	d001      	beq.n	800049a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000496:	f000 f95b 	bl	8000750 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800049a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800049e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80004a0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80004a4:	4619      	mov	r1, r3
 80004a6:	481b      	ldr	r0, [pc, #108]	; (8000514 <MX_TIM3_Init+0xe0>)
 80004a8:	f004 fc32 	bl	8004d10 <HAL_TIM_ConfigClockSource>
 80004ac:	4603      	mov	r3, r0
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d001      	beq.n	80004b6 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80004b2:	f000 f94d 	bl	8000750 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80004b6:	4817      	ldr	r0, [pc, #92]	; (8000514 <MX_TIM3_Init+0xe0>)
 80004b8:	f004 f996 	bl	80047e8 <HAL_TIM_PWM_Init>
 80004bc:	4603      	mov	r3, r0
 80004be:	2b00      	cmp	r3, #0
 80004c0:	d001      	beq.n	80004c6 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80004c2:	f000 f945 	bl	8000750 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80004c6:	2320      	movs	r3, #32
 80004c8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004ca:	2300      	movs	r3, #0
 80004cc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80004ce:	f107 031c 	add.w	r3, r7, #28
 80004d2:	4619      	mov	r1, r3
 80004d4:	480f      	ldr	r0, [pc, #60]	; (8000514 <MX_TIM3_Init+0xe0>)
 80004d6:	f005 f921 	bl	800571c <HAL_TIMEx_MasterConfigSynchronization>
 80004da:	4603      	mov	r3, r0
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d001      	beq.n	80004e4 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80004e0:	f000 f936 	bl	8000750 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80004e4:	2360      	movs	r3, #96	; 0x60
 80004e6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80004e8:	2300      	movs	r3, #0
 80004ea:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80004ec:	2300      	movs	r3, #0
 80004ee:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80004f0:	2300      	movs	r3, #0
 80004f2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80004f4:	463b      	mov	r3, r7
 80004f6:	2200      	movs	r2, #0
 80004f8:	4619      	mov	r1, r3
 80004fa:	4806      	ldr	r0, [pc, #24]	; (8000514 <MX_TIM3_Init+0xe0>)
 80004fc:	f004 faf4 	bl	8004ae8 <HAL_TIM_PWM_ConfigChannel>
 8000500:	4603      	mov	r3, r0
 8000502:	2b00      	cmp	r3, #0
 8000504:	d001      	beq.n	800050a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000506:	f000 f923 	bl	8000750 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800050a:	bf00      	nop
 800050c:	3738      	adds	r7, #56	; 0x38
 800050e:	46bd      	mov	sp, r7
 8000510:	bd80      	pop	{r7, pc}
 8000512:	bf00      	nop
 8000514:	20000134 	.word	0x20000134
 8000518:	40000400 	.word	0x40000400

0800051c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b084      	sub	sp, #16
 8000520:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000522:	1d3b      	adds	r3, r7, #4
 8000524:	2200      	movs	r2, #0
 8000526:	601a      	str	r2, [r3, #0]
 8000528:	605a      	str	r2, [r3, #4]
 800052a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800052c:	4b14      	ldr	r3, [pc, #80]	; (8000580 <MX_TIM6_Init+0x64>)
 800052e:	4a15      	ldr	r2, [pc, #84]	; (8000584 <MX_TIM6_Init+0x68>)
 8000530:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 40-1;
 8000532:	4b13      	ldr	r3, [pc, #76]	; (8000580 <MX_TIM6_Init+0x64>)
 8000534:	2227      	movs	r2, #39	; 0x27
 8000536:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000538:	4b11      	ldr	r3, [pc, #68]	; (8000580 <MX_TIM6_Init+0x64>)
 800053a:	2200      	movs	r2, #0
 800053c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10-1;
 800053e:	4b10      	ldr	r3, [pc, #64]	; (8000580 <MX_TIM6_Init+0x64>)
 8000540:	2209      	movs	r2, #9
 8000542:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000544:	4b0e      	ldr	r3, [pc, #56]	; (8000580 <MX_TIM6_Init+0x64>)
 8000546:	2200      	movs	r2, #0
 8000548:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800054a:	480d      	ldr	r0, [pc, #52]	; (8000580 <MX_TIM6_Init+0x64>)
 800054c:	f004 f88c 	bl	8004668 <HAL_TIM_Base_Init>
 8000550:	4603      	mov	r3, r0
 8000552:	2b00      	cmp	r3, #0
 8000554:	d001      	beq.n	800055a <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8000556:	f000 f8fb 	bl	8000750 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800055a:	2320      	movs	r3, #32
 800055c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800055e:	2300      	movs	r3, #0
 8000560:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000562:	1d3b      	adds	r3, r7, #4
 8000564:	4619      	mov	r1, r3
 8000566:	4806      	ldr	r0, [pc, #24]	; (8000580 <MX_TIM6_Init+0x64>)
 8000568:	f005 f8d8 	bl	800571c <HAL_TIMEx_MasterConfigSynchronization>
 800056c:	4603      	mov	r3, r0
 800056e:	2b00      	cmp	r3, #0
 8000570:	d001      	beq.n	8000576 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8000572:	f000 f8ed 	bl	8000750 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000576:	bf00      	nop
 8000578:	3710      	adds	r7, #16
 800057a:	46bd      	mov	sp, r7
 800057c:	bd80      	pop	{r7, pc}
 800057e:	bf00      	nop
 8000580:	20000180 	.word	0x20000180
 8000584:	40001000 	.word	0x40001000

08000588 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b082      	sub	sp, #8
 800058c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800058e:	4b10      	ldr	r3, [pc, #64]	; (80005d0 <MX_DMA_Init+0x48>)
 8000590:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000592:	4a0f      	ldr	r2, [pc, #60]	; (80005d0 <MX_DMA_Init+0x48>)
 8000594:	f043 0301 	orr.w	r3, r3, #1
 8000598:	6493      	str	r3, [r2, #72]	; 0x48
 800059a:	4b0d      	ldr	r3, [pc, #52]	; (80005d0 <MX_DMA_Init+0x48>)
 800059c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800059e:	f003 0301 	and.w	r3, r3, #1
 80005a2:	607b      	str	r3, [r7, #4]
 80005a4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80005a6:	2200      	movs	r2, #0
 80005a8:	2100      	movs	r1, #0
 80005aa:	200b      	movs	r0, #11
 80005ac:	f001 fe33 	bl	8002216 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80005b0:	200b      	movs	r0, #11
 80005b2:	f001 fe4c 	bl	800224e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80005b6:	2200      	movs	r2, #0
 80005b8:	2100      	movs	r1, #0
 80005ba:	200d      	movs	r0, #13
 80005bc:	f001 fe2b 	bl	8002216 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80005c0:	200d      	movs	r0, #13
 80005c2:	f001 fe44 	bl	800224e <HAL_NVIC_EnableIRQ>

}
 80005c6:	bf00      	nop
 80005c8:	3708      	adds	r7, #8
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	40021000 	.word	0x40021000

080005d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b08a      	sub	sp, #40	; 0x28
 80005d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005da:	f107 0314 	add.w	r3, r7, #20
 80005de:	2200      	movs	r2, #0
 80005e0:	601a      	str	r2, [r3, #0]
 80005e2:	605a      	str	r2, [r3, #4]
 80005e4:	609a      	str	r2, [r3, #8]
 80005e6:	60da      	str	r2, [r3, #12]
 80005e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005ea:	4b55      	ldr	r3, [pc, #340]	; (8000740 <MX_GPIO_Init+0x16c>)
 80005ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005ee:	4a54      	ldr	r2, [pc, #336]	; (8000740 <MX_GPIO_Init+0x16c>)
 80005f0:	f043 0304 	orr.w	r3, r3, #4
 80005f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005f6:	4b52      	ldr	r3, [pc, #328]	; (8000740 <MX_GPIO_Init+0x16c>)
 80005f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005fa:	f003 0304 	and.w	r3, r3, #4
 80005fe:	613b      	str	r3, [r7, #16]
 8000600:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000602:	4b4f      	ldr	r3, [pc, #316]	; (8000740 <MX_GPIO_Init+0x16c>)
 8000604:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000606:	4a4e      	ldr	r2, [pc, #312]	; (8000740 <MX_GPIO_Init+0x16c>)
 8000608:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800060c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800060e:	4b4c      	ldr	r3, [pc, #304]	; (8000740 <MX_GPIO_Init+0x16c>)
 8000610:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000612:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000616:	60fb      	str	r3, [r7, #12]
 8000618:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800061a:	4b49      	ldr	r3, [pc, #292]	; (8000740 <MX_GPIO_Init+0x16c>)
 800061c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800061e:	4a48      	ldr	r2, [pc, #288]	; (8000740 <MX_GPIO_Init+0x16c>)
 8000620:	f043 0301 	orr.w	r3, r3, #1
 8000624:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000626:	4b46      	ldr	r3, [pc, #280]	; (8000740 <MX_GPIO_Init+0x16c>)
 8000628:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800062a:	f003 0301 	and.w	r3, r3, #1
 800062e:	60bb      	str	r3, [r7, #8]
 8000630:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000632:	4b43      	ldr	r3, [pc, #268]	; (8000740 <MX_GPIO_Init+0x16c>)
 8000634:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000636:	4a42      	ldr	r2, [pc, #264]	; (8000740 <MX_GPIO_Init+0x16c>)
 8000638:	f043 0302 	orr.w	r3, r3, #2
 800063c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800063e:	4b40      	ldr	r3, [pc, #256]	; (8000740 <MX_GPIO_Init+0x16c>)
 8000640:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000642:	f003 0302 	and.w	r3, r3, #2
 8000646:	607b      	str	r3, [r7, #4]
 8000648:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800064a:	4b3d      	ldr	r3, [pc, #244]	; (8000740 <MX_GPIO_Init+0x16c>)
 800064c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800064e:	4a3c      	ldr	r2, [pc, #240]	; (8000740 <MX_GPIO_Init+0x16c>)
 8000650:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000654:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000656:	4b3a      	ldr	r3, [pc, #232]	; (8000740 <MX_GPIO_Init+0x16c>)
 8000658:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800065a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800065e:	603b      	str	r3, [r7, #0]
 8000660:	683b      	ldr	r3, [r7, #0]
  HAL_PWREx_EnableVddIO2();
 8000662:	f002 fd33 	bl	80030cc <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000666:	2200      	movs	r2, #0
 8000668:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 800066c:	4835      	ldr	r0, [pc, #212]	; (8000744 <MX_GPIO_Init+0x170>)
 800066e:	f002 fcb1 	bl	8002fd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, USB_PowerSwitchOn_Pin|SMPS_V1_Pin|SMPS_EN_Pin|SMPS_SW_Pin, GPIO_PIN_RESET);
 8000672:	2200      	movs	r2, #0
 8000674:	f44f 5131 	mov.w	r1, #11328	; 0x2c40
 8000678:	4833      	ldr	r0, [pc, #204]	; (8000748 <MX_GPIO_Init+0x174>)
 800067a:	f002 fcab 	bl	8002fd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800067e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000682:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000684:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000688:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068a:	2300      	movs	r3, #0
 800068c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800068e:	f107 0314 	add.w	r3, r7, #20
 8000692:	4619      	mov	r1, r3
 8000694:	482d      	ldr	r0, [pc, #180]	; (800074c <MX_GPIO_Init+0x178>)
 8000696:	f002 fb0b 	bl	8002cb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 800069a:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 800069e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006a0:	2301      	movs	r3, #1
 80006a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a4:	2300      	movs	r3, #0
 80006a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006a8:	2300      	movs	r3, #0
 80006aa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006ac:	f107 0314 	add.w	r3, r7, #20
 80006b0:	4619      	mov	r1, r3
 80006b2:	4824      	ldr	r0, [pc, #144]	; (8000744 <MX_GPIO_Init+0x170>)
 80006b4:	f002 fafc 	bl	8002cb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OverCurrent_Pin SMPS_PG_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin|SMPS_PG_Pin;
 80006b8:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 80006bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006be:	2300      	movs	r3, #0
 80006c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c2:	2300      	movs	r3, #0
 80006c4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80006c6:	f107 0314 	add.w	r3, r7, #20
 80006ca:	4619      	mov	r1, r3
 80006cc:	481e      	ldr	r0, [pc, #120]	; (8000748 <MX_GPIO_Init+0x174>)
 80006ce:	f002 faef 	bl	8002cb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_PowerSwitchOn_Pin SMPS_V1_Pin SMPS_EN_Pin SMPS_SW_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin|SMPS_V1_Pin|SMPS_EN_Pin|SMPS_SW_Pin;
 80006d2:	f44f 5331 	mov.w	r3, #11328	; 0x2c40
 80006d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006d8:	2301      	movs	r3, #1
 80006da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006dc:	2300      	movs	r3, #0
 80006de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e0:	2300      	movs	r3, #0
 80006e2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80006e4:	f107 0314 	add.w	r3, r7, #20
 80006e8:	4619      	mov	r1, r3
 80006ea:	4817      	ldr	r0, [pc, #92]	; (8000748 <MX_GPIO_Init+0x174>)
 80006ec:	f002 fae0 	bl	8002cb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLK_RX_Pin STLK_TX_Pin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80006f0:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80006f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006f6:	2302      	movs	r3, #2
 80006f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fa:	2300      	movs	r3, #0
 80006fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006fe:	2303      	movs	r3, #3
 8000700:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000702:	2308      	movs	r3, #8
 8000704:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000706:	f107 0314 	add.w	r3, r7, #20
 800070a:	4619      	mov	r1, r3
 800070c:	480e      	ldr	r0, [pc, #56]	; (8000748 <MX_GPIO_Init+0x174>)
 800070e:	f002 facf 	bl	8002cb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000712:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000716:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000718:	2302      	movs	r3, #2
 800071a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071c:	2300      	movs	r3, #0
 800071e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000720:	2303      	movs	r3, #3
 8000722:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000724:	230a      	movs	r3, #10
 8000726:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000728:	f107 0314 	add.w	r3, r7, #20
 800072c:	4619      	mov	r1, r3
 800072e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000732:	f002 fabd 	bl	8002cb0 <HAL_GPIO_Init>

}
 8000736:	bf00      	nop
 8000738:	3728      	adds	r7, #40	; 0x28
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	40021000 	.word	0x40021000
 8000744:	48000400 	.word	0x48000400
 8000748:	48001800 	.word	0x48001800
 800074c:	48000800 	.word	0x48000800

08000750 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000754:	b672      	cpsid	i
}
 8000756:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000758:	e7fe      	b.n	8000758 <Error_Handler+0x8>
	...

0800075c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800075c:	b480      	push	{r7}
 800075e:	b083      	sub	sp, #12
 8000760:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000762:	4b0f      	ldr	r3, [pc, #60]	; (80007a0 <HAL_MspInit+0x44>)
 8000764:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000766:	4a0e      	ldr	r2, [pc, #56]	; (80007a0 <HAL_MspInit+0x44>)
 8000768:	f043 0301 	orr.w	r3, r3, #1
 800076c:	6613      	str	r3, [r2, #96]	; 0x60
 800076e:	4b0c      	ldr	r3, [pc, #48]	; (80007a0 <HAL_MspInit+0x44>)
 8000770:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000772:	f003 0301 	and.w	r3, r3, #1
 8000776:	607b      	str	r3, [r7, #4]
 8000778:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800077a:	4b09      	ldr	r3, [pc, #36]	; (80007a0 <HAL_MspInit+0x44>)
 800077c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800077e:	4a08      	ldr	r2, [pc, #32]	; (80007a0 <HAL_MspInit+0x44>)
 8000780:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000784:	6593      	str	r3, [r2, #88]	; 0x58
 8000786:	4b06      	ldr	r3, [pc, #24]	; (80007a0 <HAL_MspInit+0x44>)
 8000788:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800078a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800078e:	603b      	str	r3, [r7, #0]
 8000790:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000792:	bf00      	nop
 8000794:	370c      	adds	r7, #12
 8000796:	46bd      	mov	sp, r7
 8000798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079c:	4770      	bx	lr
 800079e:	bf00      	nop
 80007a0:	40021000 	.word	0x40021000

080007a4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b0ac      	sub	sp, #176	; 0xb0
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ac:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80007b0:	2200      	movs	r2, #0
 80007b2:	601a      	str	r2, [r3, #0]
 80007b4:	605a      	str	r2, [r3, #4]
 80007b6:	609a      	str	r2, [r3, #8]
 80007b8:	60da      	str	r2, [r3, #12]
 80007ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007bc:	f107 0310 	add.w	r3, r7, #16
 80007c0:	228c      	movs	r2, #140	; 0x8c
 80007c2:	2100      	movs	r1, #0
 80007c4:	4618      	mov	r0, r3
 80007c6:	f005 f873 	bl	80058b0 <memset>
  if(hadc->Instance==ADC1)
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	4a3d      	ldr	r2, [pc, #244]	; (80008c4 <HAL_ADC_MspInit+0x120>)
 80007d0:	4293      	cmp	r3, r2
 80007d2:	d172      	bne.n	80008ba <HAL_ADC_MspInit+0x116>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80007d4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80007d8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80007da:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80007de:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80007e2:	2301      	movs	r3, #1
 80007e4:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80007e6:	2301      	movs	r3, #1
 80007e8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 80007ea:	2310      	movs	r3, #16
 80007ec:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 80007ee:	2302      	movs	r3, #2
 80007f0:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80007f2:	2302      	movs	r3, #2
 80007f4:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80007f6:	2302      	movs	r3, #2
 80007f8:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80007fa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80007fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000800:	f107 0310 	add.w	r3, r7, #16
 8000804:	4618      	mov	r0, r3
 8000806:	f003 fa65 	bl	8003cd4 <HAL_RCCEx_PeriphCLKConfig>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8000810:	f7ff ff9e 	bl	8000750 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000814:	4b2c      	ldr	r3, [pc, #176]	; (80008c8 <HAL_ADC_MspInit+0x124>)
 8000816:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000818:	4a2b      	ldr	r2, [pc, #172]	; (80008c8 <HAL_ADC_MspInit+0x124>)
 800081a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800081e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000820:	4b29      	ldr	r3, [pc, #164]	; (80008c8 <HAL_ADC_MspInit+0x124>)
 8000822:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000824:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000828:	60fb      	str	r3, [r7, #12]
 800082a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800082c:	4b26      	ldr	r3, [pc, #152]	; (80008c8 <HAL_ADC_MspInit+0x124>)
 800082e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000830:	4a25      	ldr	r2, [pc, #148]	; (80008c8 <HAL_ADC_MspInit+0x124>)
 8000832:	f043 0304 	orr.w	r3, r3, #4
 8000836:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000838:	4b23      	ldr	r3, [pc, #140]	; (80008c8 <HAL_ADC_MspInit+0x124>)
 800083a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800083c:	f003 0304 	and.w	r3, r3, #4
 8000840:	60bb      	str	r3, [r7, #8]
 8000842:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000844:	2301      	movs	r3, #1
 8000846:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800084a:	230b      	movs	r3, #11
 800084c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000850:	2300      	movs	r3, #0
 8000852:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000856:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800085a:	4619      	mov	r1, r3
 800085c:	481b      	ldr	r0, [pc, #108]	; (80008cc <HAL_ADC_MspInit+0x128>)
 800085e:	f002 fa27 	bl	8002cb0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000862:	4b1b      	ldr	r3, [pc, #108]	; (80008d0 <HAL_ADC_MspInit+0x12c>)
 8000864:	4a1b      	ldr	r2, [pc, #108]	; (80008d4 <HAL_ADC_MspInit+0x130>)
 8000866:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8000868:	4b19      	ldr	r3, [pc, #100]	; (80008d0 <HAL_ADC_MspInit+0x12c>)
 800086a:	2200      	movs	r2, #0
 800086c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800086e:	4b18      	ldr	r3, [pc, #96]	; (80008d0 <HAL_ADC_MspInit+0x12c>)
 8000870:	2200      	movs	r2, #0
 8000872:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000874:	4b16      	ldr	r3, [pc, #88]	; (80008d0 <HAL_ADC_MspInit+0x12c>)
 8000876:	2200      	movs	r2, #0
 8000878:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800087a:	4b15      	ldr	r3, [pc, #84]	; (80008d0 <HAL_ADC_MspInit+0x12c>)
 800087c:	2280      	movs	r2, #128	; 0x80
 800087e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000880:	4b13      	ldr	r3, [pc, #76]	; (80008d0 <HAL_ADC_MspInit+0x12c>)
 8000882:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000886:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000888:	4b11      	ldr	r3, [pc, #68]	; (80008d0 <HAL_ADC_MspInit+0x12c>)
 800088a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800088e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000890:	4b0f      	ldr	r3, [pc, #60]	; (80008d0 <HAL_ADC_MspInit+0x12c>)
 8000892:	2220      	movs	r2, #32
 8000894:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000896:	4b0e      	ldr	r3, [pc, #56]	; (80008d0 <HAL_ADC_MspInit+0x12c>)
 8000898:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800089c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800089e:	480c      	ldr	r0, [pc, #48]	; (80008d0 <HAL_ADC_MspInit+0x12c>)
 80008a0:	f002 f80e 	bl	80028c0 <HAL_DMA_Init>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <HAL_ADC_MspInit+0x10a>
    {
      Error_Handler();
 80008aa:	f7ff ff51 	bl	8000750 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	4a07      	ldr	r2, [pc, #28]	; (80008d0 <HAL_ADC_MspInit+0x12c>)
 80008b2:	651a      	str	r2, [r3, #80]	; 0x50
 80008b4:	4a06      	ldr	r2, [pc, #24]	; (80008d0 <HAL_ADC_MspInit+0x12c>)
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80008ba:	bf00      	nop
 80008bc:	37b0      	adds	r7, #176	; 0xb0
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	50040000 	.word	0x50040000
 80008c8:	40021000 	.word	0x40021000
 80008cc:	48000800 	.word	0x48000800
 80008d0:	20000090 	.word	0x20000090
 80008d4:	40020008 	.word	0x40020008

080008d8 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b08a      	sub	sp, #40	; 0x28
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e0:	f107 0314 	add.w	r3, r7, #20
 80008e4:	2200      	movs	r2, #0
 80008e6:	601a      	str	r2, [r3, #0]
 80008e8:	605a      	str	r2, [r3, #4]
 80008ea:	609a      	str	r2, [r3, #8]
 80008ec:	60da      	str	r2, [r3, #12]
 80008ee:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	4a2f      	ldr	r2, [pc, #188]	; (80009b4 <HAL_DAC_MspInit+0xdc>)
 80008f6:	4293      	cmp	r3, r2
 80008f8:	d157      	bne.n	80009aa <HAL_DAC_MspInit+0xd2>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80008fa:	4b2f      	ldr	r3, [pc, #188]	; (80009b8 <HAL_DAC_MspInit+0xe0>)
 80008fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008fe:	4a2e      	ldr	r2, [pc, #184]	; (80009b8 <HAL_DAC_MspInit+0xe0>)
 8000900:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000904:	6593      	str	r3, [r2, #88]	; 0x58
 8000906:	4b2c      	ldr	r3, [pc, #176]	; (80009b8 <HAL_DAC_MspInit+0xe0>)
 8000908:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800090a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800090e:	613b      	str	r3, [r7, #16]
 8000910:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000912:	4b29      	ldr	r3, [pc, #164]	; (80009b8 <HAL_DAC_MspInit+0xe0>)
 8000914:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000916:	4a28      	ldr	r2, [pc, #160]	; (80009b8 <HAL_DAC_MspInit+0xe0>)
 8000918:	f043 0301 	orr.w	r3, r3, #1
 800091c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800091e:	4b26      	ldr	r3, [pc, #152]	; (80009b8 <HAL_DAC_MspInit+0xe0>)
 8000920:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000922:	f003 0301 	and.w	r3, r3, #1
 8000926:	60fb      	str	r3, [r7, #12]
 8000928:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800092a:	2310      	movs	r3, #16
 800092c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800092e:	2303      	movs	r3, #3
 8000930:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000932:	2300      	movs	r3, #0
 8000934:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000936:	f107 0314 	add.w	r3, r7, #20
 800093a:	4619      	mov	r1, r3
 800093c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000940:	f002 f9b6 	bl	8002cb0 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA1_Channel3;
 8000944:	4b1d      	ldr	r3, [pc, #116]	; (80009bc <HAL_DAC_MspInit+0xe4>)
 8000946:	4a1e      	ldr	r2, [pc, #120]	; (80009c0 <HAL_DAC_MspInit+0xe8>)
 8000948:	601a      	str	r2, [r3, #0]
    hdma_dac_ch1.Init.Request = DMA_REQUEST_6;
 800094a:	4b1c      	ldr	r3, [pc, #112]	; (80009bc <HAL_DAC_MspInit+0xe4>)
 800094c:	2206      	movs	r2, #6
 800094e:	605a      	str	r2, [r3, #4]
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000950:	4b1a      	ldr	r3, [pc, #104]	; (80009bc <HAL_DAC_MspInit+0xe4>)
 8000952:	2210      	movs	r2, #16
 8000954:	609a      	str	r2, [r3, #8]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000956:	4b19      	ldr	r3, [pc, #100]	; (80009bc <HAL_DAC_MspInit+0xe4>)
 8000958:	2200      	movs	r2, #0
 800095a:	60da      	str	r2, [r3, #12]
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800095c:	4b17      	ldr	r3, [pc, #92]	; (80009bc <HAL_DAC_MspInit+0xe4>)
 800095e:	2280      	movs	r2, #128	; 0x80
 8000960:	611a      	str	r2, [r3, #16]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000962:	4b16      	ldr	r3, [pc, #88]	; (80009bc <HAL_DAC_MspInit+0xe4>)
 8000964:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000968:	615a      	str	r2, [r3, #20]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800096a:	4b14      	ldr	r3, [pc, #80]	; (80009bc <HAL_DAC_MspInit+0xe4>)
 800096c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000970:	619a      	str	r2, [r3, #24]
    hdma_dac_ch1.Init.Mode = DMA_CIRCULAR;
 8000972:	4b12      	ldr	r3, [pc, #72]	; (80009bc <HAL_DAC_MspInit+0xe4>)
 8000974:	2220      	movs	r2, #32
 8000976:	61da      	str	r2, [r3, #28]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000978:	4b10      	ldr	r3, [pc, #64]	; (80009bc <HAL_DAC_MspInit+0xe4>)
 800097a:	2200      	movs	r2, #0
 800097c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 800097e:	480f      	ldr	r0, [pc, #60]	; (80009bc <HAL_DAC_MspInit+0xe4>)
 8000980:	f001 ff9e 	bl	80028c0 <HAL_DMA_Init>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 800098a:	f7ff fee1 	bl	8000750 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac_ch1);
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	4a0a      	ldr	r2, [pc, #40]	; (80009bc <HAL_DAC_MspInit+0xe4>)
 8000992:	609a      	str	r2, [r3, #8]
 8000994:	4a09      	ldr	r2, [pc, #36]	; (80009bc <HAL_DAC_MspInit+0xe4>)
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	6293      	str	r3, [r2, #40]	; 0x28

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800099a:	2200      	movs	r2, #0
 800099c:	2100      	movs	r1, #0
 800099e:	2036      	movs	r0, #54	; 0x36
 80009a0:	f001 fc39 	bl	8002216 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80009a4:	2036      	movs	r0, #54	; 0x36
 80009a6:	f001 fc52 	bl	800224e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 80009aa:	bf00      	nop
 80009ac:	3728      	adds	r7, #40	; 0x28
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	40007400 	.word	0x40007400
 80009b8:	40021000 	.word	0x40021000
 80009bc:	200000ec 	.word	0x200000ec
 80009c0:	40020030 	.word	0x40020030

080009c4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b084      	sub	sp, #16
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	4a16      	ldr	r2, [pc, #88]	; (8000a2c <HAL_TIM_Base_MspInit+0x68>)
 80009d2:	4293      	cmp	r3, r2
 80009d4:	d10c      	bne.n	80009f0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80009d6:	4b16      	ldr	r3, [pc, #88]	; (8000a30 <HAL_TIM_Base_MspInit+0x6c>)
 80009d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009da:	4a15      	ldr	r2, [pc, #84]	; (8000a30 <HAL_TIM_Base_MspInit+0x6c>)
 80009dc:	f043 0302 	orr.w	r3, r3, #2
 80009e0:	6593      	str	r3, [r2, #88]	; 0x58
 80009e2:	4b13      	ldr	r3, [pc, #76]	; (8000a30 <HAL_TIM_Base_MspInit+0x6c>)
 80009e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009e6:	f003 0302 	and.w	r3, r3, #2
 80009ea:	60fb      	str	r3, [r7, #12]
 80009ec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80009ee:	e018      	b.n	8000a22 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM6)
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	4a0f      	ldr	r2, [pc, #60]	; (8000a34 <HAL_TIM_Base_MspInit+0x70>)
 80009f6:	4293      	cmp	r3, r2
 80009f8:	d113      	bne.n	8000a22 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80009fa:	4b0d      	ldr	r3, [pc, #52]	; (8000a30 <HAL_TIM_Base_MspInit+0x6c>)
 80009fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009fe:	4a0c      	ldr	r2, [pc, #48]	; (8000a30 <HAL_TIM_Base_MspInit+0x6c>)
 8000a00:	f043 0310 	orr.w	r3, r3, #16
 8000a04:	6593      	str	r3, [r2, #88]	; 0x58
 8000a06:	4b0a      	ldr	r3, [pc, #40]	; (8000a30 <HAL_TIM_Base_MspInit+0x6c>)
 8000a08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a0a:	f003 0310 	and.w	r3, r3, #16
 8000a0e:	60bb      	str	r3, [r7, #8]
 8000a10:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000a12:	2200      	movs	r2, #0
 8000a14:	2100      	movs	r1, #0
 8000a16:	2036      	movs	r0, #54	; 0x36
 8000a18:	f001 fbfd 	bl	8002216 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000a1c:	2036      	movs	r0, #54	; 0x36
 8000a1e:	f001 fc16 	bl	800224e <HAL_NVIC_EnableIRQ>
}
 8000a22:	bf00      	nop
 8000a24:	3710      	adds	r7, #16
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	40000400 	.word	0x40000400
 8000a30:	40021000 	.word	0x40021000
 8000a34:	40001000 	.word	0x40001000

08000a38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a3c:	e7fe      	b.n	8000a3c <NMI_Handler+0x4>

08000a3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a3e:	b480      	push	{r7}
 8000a40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a42:	e7fe      	b.n	8000a42 <HardFault_Handler+0x4>

08000a44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a48:	e7fe      	b.n	8000a48 <MemManage_Handler+0x4>

08000a4a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a4a:	b480      	push	{r7}
 8000a4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a4e:	e7fe      	b.n	8000a4e <BusFault_Handler+0x4>

08000a50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a54:	e7fe      	b.n	8000a54 <UsageFault_Handler+0x4>

08000a56 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a56:	b480      	push	{r7}
 8000a58:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a5a:	bf00      	nop
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a62:	4770      	bx	lr

08000a64 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a68:	bf00      	nop
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a70:	4770      	bx	lr

08000a72 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a72:	b480      	push	{r7}
 8000a74:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a76:	bf00      	nop
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7e:	4770      	bx	lr

08000a80 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a84:	f000 f8b4 	bl	8000bf0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a88:	bf00      	nop
 8000a8a:	bd80      	pop	{r7, pc}

08000a8c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000a90:	4802      	ldr	r0, [pc, #8]	; (8000a9c <DMA1_Channel1_IRQHandler+0x10>)
 8000a92:	f002 f82d 	bl	8002af0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000a96:	bf00      	nop
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	20000090 	.word	0x20000090

08000aa0 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 8000aa4:	4802      	ldr	r0, [pc, #8]	; (8000ab0 <DMA1_Channel3_IRQHandler+0x10>)
 8000aa6:	f002 f823 	bl	8002af0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8000aaa:	bf00      	nop
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	200000ec 	.word	0x200000ec

08000ab4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000ab8:	4803      	ldr	r0, [pc, #12]	; (8000ac8 <TIM6_DAC_IRQHandler+0x14>)
 8000aba:	f003 fef6 	bl	80048aa <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac1);
 8000abe:	4803      	ldr	r0, [pc, #12]	; (8000acc <TIM6_DAC_IRQHandler+0x18>)
 8000ac0:	f001 fcce 	bl	8002460 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000ac4:	bf00      	nop
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	20000180 	.word	0x20000180
 8000acc:	200000d8 	.word	0x200000d8

08000ad0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000ad4:	4b06      	ldr	r3, [pc, #24]	; (8000af0 <SystemInit+0x20>)
 8000ad6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ada:	4a05      	ldr	r2, [pc, #20]	; (8000af0 <SystemInit+0x20>)
 8000adc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ae0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000ae4:	bf00      	nop
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop
 8000af0:	e000ed00 	.word	0xe000ed00

08000af4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000af4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b2c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000af8:	f7ff ffea 	bl	8000ad0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000afc:	480c      	ldr	r0, [pc, #48]	; (8000b30 <LoopForever+0x6>)
  ldr r1, =_edata
 8000afe:	490d      	ldr	r1, [pc, #52]	; (8000b34 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b00:	4a0d      	ldr	r2, [pc, #52]	; (8000b38 <LoopForever+0xe>)
  movs r3, #0
 8000b02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b04:	e002      	b.n	8000b0c <LoopCopyDataInit>

08000b06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b0a:	3304      	adds	r3, #4

08000b0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b10:	d3f9      	bcc.n	8000b06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b12:	4a0a      	ldr	r2, [pc, #40]	; (8000b3c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b14:	4c0a      	ldr	r4, [pc, #40]	; (8000b40 <LoopForever+0x16>)
  movs r3, #0
 8000b16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b18:	e001      	b.n	8000b1e <LoopFillZerobss>

08000b1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b1c:	3204      	adds	r2, #4

08000b1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b20:	d3fb      	bcc.n	8000b1a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b22:	f004 fea1 	bl	8005868 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b26:	f7ff fb61 	bl	80001ec <main>

08000b2a <LoopForever>:

LoopForever:
    b LoopForever
 8000b2a:	e7fe      	b.n	8000b2a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000b2c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000b30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b34:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b38:	08005920 	.word	0x08005920
  ldr r2, =_sbss
 8000b3c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b40:	200002d0 	.word	0x200002d0

08000b44 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b44:	e7fe      	b.n	8000b44 <ADC1_2_IRQHandler>

08000b46 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b46:	b580      	push	{r7, lr}
 8000b48:	b082      	sub	sp, #8
 8000b4a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b50:	2003      	movs	r0, #3
 8000b52:	f001 fb55 	bl	8002200 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b56:	2000      	movs	r0, #0
 8000b58:	f000 f80e 	bl	8000b78 <HAL_InitTick>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d002      	beq.n	8000b68 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000b62:	2301      	movs	r3, #1
 8000b64:	71fb      	strb	r3, [r7, #7]
 8000b66:	e001      	b.n	8000b6c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b68:	f7ff fdf8 	bl	800075c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b6c:	79fb      	ldrb	r3, [r7, #7]
}
 8000b6e:	4618      	mov	r0, r3
 8000b70:	3708      	adds	r7, #8
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
	...

08000b78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b084      	sub	sp, #16
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b80:	2300      	movs	r3, #0
 8000b82:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000b84:	4b17      	ldr	r3, [pc, #92]	; (8000be4 <HAL_InitTick+0x6c>)
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d023      	beq.n	8000bd4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000b8c:	4b16      	ldr	r3, [pc, #88]	; (8000be8 <HAL_InitTick+0x70>)
 8000b8e:	681a      	ldr	r2, [r3, #0]
 8000b90:	4b14      	ldr	r3, [pc, #80]	; (8000be4 <HAL_InitTick+0x6c>)
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	4619      	mov	r1, r3
 8000b96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f001 fb61 	bl	800226a <HAL_SYSTICK_Config>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d10f      	bne.n	8000bce <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	2b0f      	cmp	r3, #15
 8000bb2:	d809      	bhi.n	8000bc8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	6879      	ldr	r1, [r7, #4]
 8000bb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bbc:	f001 fb2b 	bl	8002216 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bc0:	4a0a      	ldr	r2, [pc, #40]	; (8000bec <HAL_InitTick+0x74>)
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	6013      	str	r3, [r2, #0]
 8000bc6:	e007      	b.n	8000bd8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000bc8:	2301      	movs	r3, #1
 8000bca:	73fb      	strb	r3, [r7, #15]
 8000bcc:	e004      	b.n	8000bd8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000bce:	2301      	movs	r3, #1
 8000bd0:	73fb      	strb	r3, [r7, #15]
 8000bd2:	e001      	b.n	8000bd8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000bd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	3710      	adds	r7, #16
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	20000008 	.word	0x20000008
 8000be8:	20000000 	.word	0x20000000
 8000bec:	20000004 	.word	0x20000004

08000bf0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000bf4:	4b06      	ldr	r3, [pc, #24]	; (8000c10 <HAL_IncTick+0x20>)
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	461a      	mov	r2, r3
 8000bfa:	4b06      	ldr	r3, [pc, #24]	; (8000c14 <HAL_IncTick+0x24>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	4413      	add	r3, r2
 8000c00:	4a04      	ldr	r2, [pc, #16]	; (8000c14 <HAL_IncTick+0x24>)
 8000c02:	6013      	str	r3, [r2, #0]
}
 8000c04:	bf00      	nop
 8000c06:	46bd      	mov	sp, r7
 8000c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop
 8000c10:	20000008 	.word	0x20000008
 8000c14:	200002cc 	.word	0x200002cc

08000c18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c1c:	4b03      	ldr	r3, [pc, #12]	; (8000c2c <HAL_GetTick+0x14>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
}
 8000c20:	4618      	mov	r0, r3
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop
 8000c2c:	200002cc 	.word	0x200002cc

08000c30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b084      	sub	sp, #16
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c38:	f7ff ffee 	bl	8000c18 <HAL_GetTick>
 8000c3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000c48:	d005      	beq.n	8000c56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000c4a:	4b0a      	ldr	r3, [pc, #40]	; (8000c74 <HAL_Delay+0x44>)
 8000c4c:	781b      	ldrb	r3, [r3, #0]
 8000c4e:	461a      	mov	r2, r3
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	4413      	add	r3, r2
 8000c54:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c56:	bf00      	nop
 8000c58:	f7ff ffde 	bl	8000c18 <HAL_GetTick>
 8000c5c:	4602      	mov	r2, r0
 8000c5e:	68bb      	ldr	r3, [r7, #8]
 8000c60:	1ad3      	subs	r3, r2, r3
 8000c62:	68fa      	ldr	r2, [r7, #12]
 8000c64:	429a      	cmp	r2, r3
 8000c66:	d8f7      	bhi.n	8000c58 <HAL_Delay+0x28>
  {
  }
}
 8000c68:	bf00      	nop
 8000c6a:	bf00      	nop
 8000c6c:	3710      	adds	r7, #16
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	20000008 	.word	0x20000008

08000c78 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b083      	sub	sp, #12
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
 8000c80:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	689b      	ldr	r3, [r3, #8]
 8000c86:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	431a      	orrs	r2, r3
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	609a      	str	r2, [r3, #8]
}
 8000c92:	bf00      	nop
 8000c94:	370c      	adds	r7, #12
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr

08000c9e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000c9e:	b480      	push	{r7}
 8000ca0:	b083      	sub	sp, #12
 8000ca2:	af00      	add	r7, sp, #0
 8000ca4:	6078      	str	r0, [r7, #4]
 8000ca6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	689b      	ldr	r3, [r3, #8]
 8000cac:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	431a      	orrs	r2, r3
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	609a      	str	r2, [r3, #8]
}
 8000cb8:	bf00      	nop
 8000cba:	370c      	adds	r7, #12
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc2:	4770      	bx	lr

08000cc4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b083      	sub	sp, #12
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	689b      	ldr	r3, [r3, #8]
 8000cd0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	370c      	adds	r7, #12
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cde:	4770      	bx	lr

08000ce0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b087      	sub	sp, #28
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	60f8      	str	r0, [r7, #12]
 8000ce8:	60b9      	str	r1, [r7, #8]
 8000cea:	607a      	str	r2, [r7, #4]
 8000cec:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	3360      	adds	r3, #96	; 0x60
 8000cf2:	461a      	mov	r2, r3
 8000cf4:	68bb      	ldr	r3, [r7, #8]
 8000cf6:	009b      	lsls	r3, r3, #2
 8000cf8:	4413      	add	r3, r2
 8000cfa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000cfc:	697b      	ldr	r3, [r7, #20]
 8000cfe:	681a      	ldr	r2, [r3, #0]
 8000d00:	4b08      	ldr	r3, [pc, #32]	; (8000d24 <LL_ADC_SetOffset+0x44>)
 8000d02:	4013      	ands	r3, r2
 8000d04:	687a      	ldr	r2, [r7, #4]
 8000d06:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000d0a:	683a      	ldr	r2, [r7, #0]
 8000d0c:	430a      	orrs	r2, r1
 8000d0e:	4313      	orrs	r3, r2
 8000d10:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000d14:	697b      	ldr	r3, [r7, #20]
 8000d16:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000d18:	bf00      	nop
 8000d1a:	371c      	adds	r7, #28
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d22:	4770      	bx	lr
 8000d24:	03fff000 	.word	0x03fff000

08000d28 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b085      	sub	sp, #20
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
 8000d30:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	3360      	adds	r3, #96	; 0x60
 8000d36:	461a      	mov	r2, r3
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	009b      	lsls	r3, r3, #2
 8000d3c:	4413      	add	r3, r2
 8000d3e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000d48:	4618      	mov	r0, r3
 8000d4a:	3714      	adds	r7, #20
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d52:	4770      	bx	lr

08000d54 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b087      	sub	sp, #28
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	60f8      	str	r0, [r7, #12]
 8000d5c:	60b9      	str	r1, [r7, #8]
 8000d5e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	3360      	adds	r3, #96	; 0x60
 8000d64:	461a      	mov	r2, r3
 8000d66:	68bb      	ldr	r3, [r7, #8]
 8000d68:	009b      	lsls	r3, r3, #2
 8000d6a:	4413      	add	r3, r2
 8000d6c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000d6e:	697b      	ldr	r3, [r7, #20]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	431a      	orrs	r2, r3
 8000d7a:	697b      	ldr	r3, [r7, #20]
 8000d7c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000d7e:	bf00      	nop
 8000d80:	371c      	adds	r7, #28
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr

08000d8a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8000d8a:	b480      	push	{r7}
 8000d8c:	b083      	sub	sp, #12
 8000d8e:	af00      	add	r7, sp, #0
 8000d90:	6078      	str	r0, [r7, #4]
 8000d92:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	695b      	ldr	r3, [r3, #20]
 8000d98:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	431a      	orrs	r2, r3
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	615a      	str	r2, [r3, #20]
}
 8000da4:	bf00      	nop
 8000da6:	370c      	adds	r7, #12
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr

08000db0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b083      	sub	sp, #12
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	68db      	ldr	r3, [r3, #12]
 8000dbc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d101      	bne.n	8000dc8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	e000      	b.n	8000dca <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000dc8:	2300      	movs	r3, #0
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	370c      	adds	r7, #12
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr

08000dd6 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000dd6:	b480      	push	{r7}
 8000dd8:	b087      	sub	sp, #28
 8000dda:	af00      	add	r7, sp, #0
 8000ddc:	60f8      	str	r0, [r7, #12]
 8000dde:	60b9      	str	r1, [r7, #8]
 8000de0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	3330      	adds	r3, #48	; 0x30
 8000de6:	461a      	mov	r2, r3
 8000de8:	68bb      	ldr	r3, [r7, #8]
 8000dea:	0a1b      	lsrs	r3, r3, #8
 8000dec:	009b      	lsls	r3, r3, #2
 8000dee:	f003 030c 	and.w	r3, r3, #12
 8000df2:	4413      	add	r3, r2
 8000df4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000df6:	697b      	ldr	r3, [r7, #20]
 8000df8:	681a      	ldr	r2, [r3, #0]
 8000dfa:	68bb      	ldr	r3, [r7, #8]
 8000dfc:	f003 031f 	and.w	r3, r3, #31
 8000e00:	211f      	movs	r1, #31
 8000e02:	fa01 f303 	lsl.w	r3, r1, r3
 8000e06:	43db      	mvns	r3, r3
 8000e08:	401a      	ands	r2, r3
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	0e9b      	lsrs	r3, r3, #26
 8000e0e:	f003 011f 	and.w	r1, r3, #31
 8000e12:	68bb      	ldr	r3, [r7, #8]
 8000e14:	f003 031f 	and.w	r3, r3, #31
 8000e18:	fa01 f303 	lsl.w	r3, r1, r3
 8000e1c:	431a      	orrs	r2, r3
 8000e1e:	697b      	ldr	r3, [r7, #20]
 8000e20:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000e22:	bf00      	nop
 8000e24:	371c      	adds	r7, #28
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr

08000e2e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000e2e:	b480      	push	{r7}
 8000e30:	b087      	sub	sp, #28
 8000e32:	af00      	add	r7, sp, #0
 8000e34:	60f8      	str	r0, [r7, #12]
 8000e36:	60b9      	str	r1, [r7, #8]
 8000e38:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	3314      	adds	r3, #20
 8000e3e:	461a      	mov	r2, r3
 8000e40:	68bb      	ldr	r3, [r7, #8]
 8000e42:	0e5b      	lsrs	r3, r3, #25
 8000e44:	009b      	lsls	r3, r3, #2
 8000e46:	f003 0304 	and.w	r3, r3, #4
 8000e4a:	4413      	add	r3, r2
 8000e4c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000e4e:	697b      	ldr	r3, [r7, #20]
 8000e50:	681a      	ldr	r2, [r3, #0]
 8000e52:	68bb      	ldr	r3, [r7, #8]
 8000e54:	0d1b      	lsrs	r3, r3, #20
 8000e56:	f003 031f 	and.w	r3, r3, #31
 8000e5a:	2107      	movs	r1, #7
 8000e5c:	fa01 f303 	lsl.w	r3, r1, r3
 8000e60:	43db      	mvns	r3, r3
 8000e62:	401a      	ands	r2, r3
 8000e64:	68bb      	ldr	r3, [r7, #8]
 8000e66:	0d1b      	lsrs	r3, r3, #20
 8000e68:	f003 031f 	and.w	r3, r3, #31
 8000e6c:	6879      	ldr	r1, [r7, #4]
 8000e6e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e72:	431a      	orrs	r2, r3
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000e78:	bf00      	nop
 8000e7a:	371c      	adds	r7, #28
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr

08000e84 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b085      	sub	sp, #20
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	60f8      	str	r0, [r7, #12]
 8000e8c:	60b9      	str	r1, [r7, #8]
 8000e8e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8000e96:	68bb      	ldr	r3, [r7, #8]
 8000e98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000e9c:	43db      	mvns	r3, r3
 8000e9e:	401a      	ands	r2, r3
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	f003 0318 	and.w	r3, r3, #24
 8000ea6:	4908      	ldr	r1, [pc, #32]	; (8000ec8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000ea8:	40d9      	lsrs	r1, r3
 8000eaa:	68bb      	ldr	r3, [r7, #8]
 8000eac:	400b      	ands	r3, r1
 8000eae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000eb2:	431a      	orrs	r2, r3
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000eba:	bf00      	nop
 8000ebc:	3714      	adds	r7, #20
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop
 8000ec8:	0007ffff 	.word	0x0007ffff

08000ecc <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b083      	sub	sp, #12
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	689b      	ldr	r3, [r3, #8]
 8000ed8:	f003 031f 	and.w	r3, r3, #31
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	370c      	adds	r7, #12
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr

08000ee8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b083      	sub	sp, #12
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	689b      	ldr	r3, [r3, #8]
 8000ef4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8000ef8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000efc:	687a      	ldr	r2, [r7, #4]
 8000efe:	6093      	str	r3, [r2, #8]
}
 8000f00:	bf00      	nop
 8000f02:	370c      	adds	r7, #12
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr

08000f0c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b083      	sub	sp, #12
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	689b      	ldr	r3, [r3, #8]
 8000f18:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000f1c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000f20:	d101      	bne.n	8000f26 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000f22:	2301      	movs	r3, #1
 8000f24:	e000      	b.n	8000f28 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000f26:	2300      	movs	r3, #0
}
 8000f28:	4618      	mov	r0, r3
 8000f2a:	370c      	adds	r7, #12
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f32:	4770      	bx	lr

08000f34 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b083      	sub	sp, #12
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	689b      	ldr	r3, [r3, #8]
 8000f40:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8000f44:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000f48:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000f50:	bf00      	nop
 8000f52:	370c      	adds	r7, #12
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr

08000f5c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b083      	sub	sp, #12
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	689b      	ldr	r3, [r3, #8]
 8000f68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f6c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000f70:	d101      	bne.n	8000f76 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000f72:	2301      	movs	r3, #1
 8000f74:	e000      	b.n	8000f78 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000f76:	2300      	movs	r3, #0
}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	370c      	adds	r7, #12
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f82:	4770      	bx	lr

08000f84 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	689b      	ldr	r3, [r3, #8]
 8000f90:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000f94:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000f98:	f043 0201 	orr.w	r2, r3, #1
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000fa0:	bf00      	nop
 8000fa2:	370c      	adds	r7, #12
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr

08000fac <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b083      	sub	sp, #12
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	689b      	ldr	r3, [r3, #8]
 8000fb8:	f003 0301 	and.w	r3, r3, #1
 8000fbc:	2b01      	cmp	r3, #1
 8000fbe:	d101      	bne.n	8000fc4 <LL_ADC_IsEnabled+0x18>
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	e000      	b.n	8000fc6 <LL_ADC_IsEnabled+0x1a>
 8000fc4:	2300      	movs	r3, #0
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	370c      	adds	r7, #12
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr

08000fd2 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8000fd2:	b480      	push	{r7}
 8000fd4:	b083      	sub	sp, #12
 8000fd6:	af00      	add	r7, sp, #0
 8000fd8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	689b      	ldr	r3, [r3, #8]
 8000fde:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000fe2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000fe6:	f043 0204 	orr.w	r2, r3, #4
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8000fee:	bf00      	nop
 8000ff0:	370c      	adds	r7, #12
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr

08000ffa <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000ffa:	b480      	push	{r7}
 8000ffc:	b083      	sub	sp, #12
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	689b      	ldr	r3, [r3, #8]
 8001006:	f003 0304 	and.w	r3, r3, #4
 800100a:	2b04      	cmp	r3, #4
 800100c:	d101      	bne.n	8001012 <LL_ADC_REG_IsConversionOngoing+0x18>
 800100e:	2301      	movs	r3, #1
 8001010:	e000      	b.n	8001014 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001012:	2300      	movs	r3, #0
}
 8001014:	4618      	mov	r0, r3
 8001016:	370c      	adds	r7, #12
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr

08001020 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	689b      	ldr	r3, [r3, #8]
 800102c:	f003 0308 	and.w	r3, r3, #8
 8001030:	2b08      	cmp	r3, #8
 8001032:	d101      	bne.n	8001038 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001034:	2301      	movs	r3, #1
 8001036:	e000      	b.n	800103a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001038:	2300      	movs	r3, #0
}
 800103a:	4618      	mov	r0, r3
 800103c:	370c      	adds	r7, #12
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr
	...

08001048 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001048:	b590      	push	{r4, r7, lr}
 800104a:	b089      	sub	sp, #36	; 0x24
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001050:	2300      	movs	r3, #0
 8001052:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001054:	2300      	movs	r3, #0
 8001056:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d101      	bne.n	8001062 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800105e:	2301      	movs	r3, #1
 8001060:	e139      	b.n	80012d6 <HAL_ADC_Init+0x28e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	691b      	ldr	r3, [r3, #16]
 8001066:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800106c:	2b00      	cmp	r3, #0
 800106e:	d109      	bne.n	8001084 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001070:	6878      	ldr	r0, [r7, #4]
 8001072:	f7ff fb97 	bl	80007a4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	2200      	movs	r2, #0
 800107a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2200      	movs	r2, #0
 8001080:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4618      	mov	r0, r3
 800108a:	f7ff ff3f 	bl	8000f0c <LL_ADC_IsDeepPowerDownEnabled>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d004      	beq.n	800109e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4618      	mov	r0, r3
 800109a:	f7ff ff25 	bl	8000ee8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4618      	mov	r0, r3
 80010a4:	f7ff ff5a 	bl	8000f5c <LL_ADC_IsInternalRegulatorEnabled>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d115      	bne.n	80010da <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	4618      	mov	r0, r3
 80010b4:	f7ff ff3e 	bl	8000f34 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80010b8:	4b89      	ldr	r3, [pc, #548]	; (80012e0 <HAL_ADC_Init+0x298>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	099b      	lsrs	r3, r3, #6
 80010be:	4a89      	ldr	r2, [pc, #548]	; (80012e4 <HAL_ADC_Init+0x29c>)
 80010c0:	fba2 2303 	umull	r2, r3, r2, r3
 80010c4:	099b      	lsrs	r3, r3, #6
 80010c6:	3301      	adds	r3, #1
 80010c8:	005b      	lsls	r3, r3, #1
 80010ca:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80010cc:	e002      	b.n	80010d4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80010ce:	68bb      	ldr	r3, [r7, #8]
 80010d0:	3b01      	subs	r3, #1
 80010d2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80010d4:	68bb      	ldr	r3, [r7, #8]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d1f9      	bne.n	80010ce <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4618      	mov	r0, r3
 80010e0:	f7ff ff3c 	bl	8000f5c <LL_ADC_IsInternalRegulatorEnabled>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d10d      	bne.n	8001106 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010ee:	f043 0210 	orr.w	r2, r3, #16
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010fa:	f043 0201 	orr.w	r2, r3, #1
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001102:	2301      	movs	r3, #1
 8001104:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	4618      	mov	r0, r3
 800110c:	f7ff ff75 	bl	8000ffa <LL_ADC_REG_IsConversionOngoing>
 8001110:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001116:	f003 0310 	and.w	r3, r3, #16
 800111a:	2b00      	cmp	r3, #0
 800111c:	f040 80d2 	bne.w	80012c4 <HAL_ADC_Init+0x27c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	2b00      	cmp	r3, #0
 8001124:	f040 80ce 	bne.w	80012c4 <HAL_ADC_Init+0x27c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800112c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001130:	f043 0202 	orr.w	r2, r3, #2
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff ff35 	bl	8000fac <LL_ADC_IsEnabled>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d115      	bne.n	8001174 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001148:	4867      	ldr	r0, [pc, #412]	; (80012e8 <HAL_ADC_Init+0x2a0>)
 800114a:	f7ff ff2f 	bl	8000fac <LL_ADC_IsEnabled>
 800114e:	4604      	mov	r4, r0
 8001150:	4866      	ldr	r0, [pc, #408]	; (80012ec <HAL_ADC_Init+0x2a4>)
 8001152:	f7ff ff2b 	bl	8000fac <LL_ADC_IsEnabled>
 8001156:	4603      	mov	r3, r0
 8001158:	431c      	orrs	r4, r3
 800115a:	4865      	ldr	r0, [pc, #404]	; (80012f0 <HAL_ADC_Init+0x2a8>)
 800115c:	f7ff ff26 	bl	8000fac <LL_ADC_IsEnabled>
 8001160:	4603      	mov	r3, r0
 8001162:	4323      	orrs	r3, r4
 8001164:	2b00      	cmp	r3, #0
 8001166:	d105      	bne.n	8001174 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	4619      	mov	r1, r3
 800116e:	4861      	ldr	r0, [pc, #388]	; (80012f4 <HAL_ADC_Init+0x2ac>)
 8001170:	f7ff fd82 	bl	8000c78 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	7e5b      	ldrb	r3, [r3, #25]
 8001178:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800117e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001184:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800118a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001192:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001194:	4313      	orrs	r3, r2
 8001196:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800119e:	2b01      	cmp	r3, #1
 80011a0:	d106      	bne.n	80011b0 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011a6:	3b01      	subs	r3, #1
 80011a8:	045b      	lsls	r3, r3, #17
 80011aa:	69ba      	ldr	r2, [r7, #24]
 80011ac:	4313      	orrs	r3, r2
 80011ae:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d009      	beq.n	80011cc <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011bc:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011c4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80011c6:	69ba      	ldr	r2, [r7, #24]
 80011c8:	4313      	orrs	r3, r2
 80011ca:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	68da      	ldr	r2, [r3, #12]
 80011d2:	4b49      	ldr	r3, [pc, #292]	; (80012f8 <HAL_ADC_Init+0x2b0>)
 80011d4:	4013      	ands	r3, r2
 80011d6:	687a      	ldr	r2, [r7, #4]
 80011d8:	6812      	ldr	r2, [r2, #0]
 80011da:	69b9      	ldr	r1, [r7, #24]
 80011dc:	430b      	orrs	r3, r1
 80011de:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4618      	mov	r0, r3
 80011e6:	f7ff ff08 	bl	8000ffa <LL_ADC_REG_IsConversionOngoing>
 80011ea:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4618      	mov	r0, r3
 80011f2:	f7ff ff15 	bl	8001020 <LL_ADC_INJ_IsConversionOngoing>
 80011f6:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80011f8:	693b      	ldr	r3, [r7, #16]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d140      	bne.n	8001280 <HAL_ADC_Init+0x238>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d13d      	bne.n	8001280 <HAL_ADC_Init+0x238>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	7e1b      	ldrb	r3, [r3, #24]
 800120c:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800120e:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001216:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001218:	4313      	orrs	r3, r2
 800121a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	68db      	ldr	r3, [r3, #12]
 8001222:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001226:	f023 0306 	bic.w	r3, r3, #6
 800122a:	687a      	ldr	r2, [r7, #4]
 800122c:	6812      	ldr	r2, [r2, #0]
 800122e:	69b9      	ldr	r1, [r7, #24]
 8001230:	430b      	orrs	r3, r1
 8001232:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800123a:	2b01      	cmp	r3, #1
 800123c:	d118      	bne.n	8001270 <HAL_ADC_Init+0x228>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	691b      	ldr	r3, [r3, #16]
 8001244:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001248:	f023 0304 	bic.w	r3, r3, #4
 800124c:	687a      	ldr	r2, [r7, #4]
 800124e:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001250:	687a      	ldr	r2, [r7, #4]
 8001252:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001254:	4311      	orrs	r1, r2
 8001256:	687a      	ldr	r2, [r7, #4]
 8001258:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800125a:	4311      	orrs	r1, r2
 800125c:	687a      	ldr	r2, [r7, #4]
 800125e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001260:	430a      	orrs	r2, r1
 8001262:	431a      	orrs	r2, r3
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f042 0201 	orr.w	r2, r2, #1
 800126c:	611a      	str	r2, [r3, #16]
 800126e:	e007      	b.n	8001280 <HAL_ADC_Init+0x238>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	691a      	ldr	r2, [r3, #16]
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f022 0201 	bic.w	r2, r2, #1
 800127e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	691b      	ldr	r3, [r3, #16]
 8001284:	2b01      	cmp	r3, #1
 8001286:	d10c      	bne.n	80012a2 <HAL_ADC_Init+0x25a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128e:	f023 010f 	bic.w	r1, r3, #15
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	69db      	ldr	r3, [r3, #28]
 8001296:	1e5a      	subs	r2, r3, #1
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	430a      	orrs	r2, r1
 800129e:	631a      	str	r2, [r3, #48]	; 0x30
 80012a0:	e007      	b.n	80012b2 <HAL_ADC_Init+0x26a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f022 020f 	bic.w	r2, r2, #15
 80012b0:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012b6:	f023 0303 	bic.w	r3, r3, #3
 80012ba:	f043 0201 	orr.w	r2, r3, #1
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	659a      	str	r2, [r3, #88]	; 0x58
 80012c2:	e007      	b.n	80012d4 <HAL_ADC_Init+0x28c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012c8:	f043 0210 	orr.w	r2, r3, #16
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80012d0:	2301      	movs	r3, #1
 80012d2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80012d4:	7ffb      	ldrb	r3, [r7, #31]
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	3724      	adds	r7, #36	; 0x24
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd90      	pop	{r4, r7, pc}
 80012de:	bf00      	nop
 80012e0:	20000000 	.word	0x20000000
 80012e4:	053e2d63 	.word	0x053e2d63
 80012e8:	50040000 	.word	0x50040000
 80012ec:	50040100 	.word	0x50040100
 80012f0:	50040200 	.word	0x50040200
 80012f4:	50040300 	.word	0x50040300
 80012f8:	fff0c007 	.word	0xfff0c007

080012fc <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b086      	sub	sp, #24
 8001300:	af00      	add	r7, sp, #0
 8001302:	60f8      	str	r0, [r7, #12]
 8001304:	60b9      	str	r1, [r7, #8]
 8001306:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001308:	4853      	ldr	r0, [pc, #332]	; (8001458 <HAL_ADC_Start_DMA+0x15c>)
 800130a:	f7ff fddf 	bl	8000ecc <LL_ADC_GetMultimode>
 800130e:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4618      	mov	r0, r3
 8001316:	f7ff fe70 	bl	8000ffa <LL_ADC_REG_IsConversionOngoing>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	f040 8093 	bne.w	8001448 <HAL_ADC_Start_DMA+0x14c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001328:	2b01      	cmp	r3, #1
 800132a:	d101      	bne.n	8001330 <HAL_ADC_Start_DMA+0x34>
 800132c:	2302      	movs	r3, #2
 800132e:	e08e      	b.n	800144e <HAL_ADC_Start_DMA+0x152>
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	2201      	movs	r2, #1
 8001334:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a47      	ldr	r2, [pc, #284]	; (800145c <HAL_ADC_Start_DMA+0x160>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d008      	beq.n	8001354 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001342:	693b      	ldr	r3, [r7, #16]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d005      	beq.n	8001354 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001348:	693b      	ldr	r3, [r7, #16]
 800134a:	2b05      	cmp	r3, #5
 800134c:	d002      	beq.n	8001354 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800134e:	693b      	ldr	r3, [r7, #16]
 8001350:	2b09      	cmp	r3, #9
 8001352:	d172      	bne.n	800143a <HAL_ADC_Start_DMA+0x13e>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001354:	68f8      	ldr	r0, [r7, #12]
 8001356:	f000 fcb7 	bl	8001cc8 <ADC_Enable>
 800135a:	4603      	mov	r3, r0
 800135c:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800135e:	7dfb      	ldrb	r3, [r7, #23]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d165      	bne.n	8001430 <HAL_ADC_Start_DMA+0x134>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001368:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800136c:	f023 0301 	bic.w	r3, r3, #1
 8001370:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	659a      	str	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a38      	ldr	r2, [pc, #224]	; (8001460 <HAL_ADC_Start_DMA+0x164>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d002      	beq.n	8001388 <HAL_ADC_Start_DMA+0x8c>
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	e000      	b.n	800138a <HAL_ADC_Start_DMA+0x8e>
 8001388:	4b36      	ldr	r3, [pc, #216]	; (8001464 <HAL_ADC_Start_DMA+0x168>)
 800138a:	68fa      	ldr	r2, [r7, #12]
 800138c:	6812      	ldr	r2, [r2, #0]
 800138e:	4293      	cmp	r3, r2
 8001390:	d002      	beq.n	8001398 <HAL_ADC_Start_DMA+0x9c>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001392:	693b      	ldr	r3, [r7, #16]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d105      	bne.n	80013a4 <HAL_ADC_Start_DMA+0xa8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800139c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	659a      	str	r2, [r3, #88]	; 0x58
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d006      	beq.n	80013be <HAL_ADC_Start_DMA+0xc2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013b4:	f023 0206 	bic.w	r2, r3, #6
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	65da      	str	r2, [r3, #92]	; 0x5c
 80013bc:	e002      	b.n	80013c4 <HAL_ADC_Start_DMA+0xc8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	2200      	movs	r2, #0
 80013c2:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80013c8:	4a27      	ldr	r2, [pc, #156]	; (8001468 <HAL_ADC_Start_DMA+0x16c>)
 80013ca:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80013d0:	4a26      	ldr	r2, [pc, #152]	; (800146c <HAL_ADC_Start_DMA+0x170>)
 80013d2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80013d8:	4a25      	ldr	r2, [pc, #148]	; (8001470 <HAL_ADC_Start_DMA+0x174>)
 80013da:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	221c      	movs	r2, #28
 80013e2:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	2200      	movs	r2, #0
 80013e8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	685a      	ldr	r2, [r3, #4]
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f042 0210 	orr.w	r2, r2, #16
 80013fa:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	68da      	ldr	r2, [r3, #12]
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f042 0201 	orr.w	r2, r2, #1
 800140a:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	3340      	adds	r3, #64	; 0x40
 8001416:	4619      	mov	r1, r3
 8001418:	68ba      	ldr	r2, [r7, #8]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	f001 fb08 	bl	8002a30 <HAL_DMA_Start_IT>
 8001420:	4603      	mov	r3, r0
 8001422:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4618      	mov	r0, r3
 800142a:	f7ff fdd2 	bl	8000fd2 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800142e:	e00d      	b.n	800144c <HAL_ADC_Start_DMA+0x150>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	2200      	movs	r2, #0
 8001434:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      if (tmp_hal_status == HAL_OK)
 8001438:	e008      	b.n	800144c <HAL_ADC_Start_DMA+0x150>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 800143a:	2301      	movs	r3, #1
 800143c:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	2200      	movs	r2, #0
 8001442:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8001446:	e001      	b.n	800144c <HAL_ADC_Start_DMA+0x150>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001448:	2302      	movs	r3, #2
 800144a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800144c:	7dfb      	ldrb	r3, [r7, #23]
}
 800144e:	4618      	mov	r0, r3
 8001450:	3718      	adds	r7, #24
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	50040300 	.word	0x50040300
 800145c:	50040200 	.word	0x50040200
 8001460:	50040100 	.word	0x50040100
 8001464:	50040000 	.word	0x50040000
 8001468:	08001d8d 	.word	0x08001d8d
 800146c:	08001e65 	.word	0x08001e65
 8001470:	08001e81 	.word	0x08001e81

08001474 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001474:	b480      	push	{r7}
 8001476:	b083      	sub	sp, #12
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800147c:	bf00      	nop
 800147e:	370c      	adds	r7, #12
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr

08001488 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001488:	b480      	push	{r7}
 800148a:	b083      	sub	sp, #12
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001490:	bf00      	nop
 8001492:	370c      	adds	r7, #12
 8001494:	46bd      	mov	sp, r7
 8001496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149a:	4770      	bx	lr

0800149c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800149c:	b480      	push	{r7}
 800149e:	b083      	sub	sp, #12
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80014a4:	bf00      	nop
 80014a6:	370c      	adds	r7, #12
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr

080014b0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b0b6      	sub	sp, #216	; 0xd8
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
 80014b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014ba:	2300      	movs	r3, #0
 80014bc:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80014c0:	2300      	movs	r3, #0
 80014c2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80014ca:	2b01      	cmp	r3, #1
 80014cc:	d101      	bne.n	80014d2 <HAL_ADC_ConfigChannel+0x22>
 80014ce:	2302      	movs	r3, #2
 80014d0:	e3e3      	b.n	8001c9a <HAL_ADC_ConfigChannel+0x7ea>
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	2201      	movs	r2, #1
 80014d6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4618      	mov	r0, r3
 80014e0:	f7ff fd8b 	bl	8000ffa <LL_ADC_REG_IsConversionOngoing>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	f040 83c4 	bne.w	8001c74 <HAL_ADC_ConfigChannel+0x7c4>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	2b05      	cmp	r3, #5
 80014f2:	d824      	bhi.n	800153e <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	3b02      	subs	r3, #2
 80014fa:	2b03      	cmp	r3, #3
 80014fc:	d81b      	bhi.n	8001536 <HAL_ADC_ConfigChannel+0x86>
 80014fe:	a201      	add	r2, pc, #4	; (adr r2, 8001504 <HAL_ADC_ConfigChannel+0x54>)
 8001500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001504:	08001515 	.word	0x08001515
 8001508:	0800151d 	.word	0x0800151d
 800150c:	08001525 	.word	0x08001525
 8001510:	0800152d 	.word	0x0800152d
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	220c      	movs	r2, #12
 8001518:	605a      	str	r2, [r3, #4]
          break;
 800151a:	e011      	b.n	8001540 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	2212      	movs	r2, #18
 8001520:	605a      	str	r2, [r3, #4]
          break;
 8001522:	e00d      	b.n	8001540 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	2218      	movs	r2, #24
 8001528:	605a      	str	r2, [r3, #4]
          break;
 800152a:	e009      	b.n	8001540 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001532:	605a      	str	r2, [r3, #4]
          break;
 8001534:	e004      	b.n	8001540 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	2206      	movs	r2, #6
 800153a:	605a      	str	r2, [r3, #4]
          break;
 800153c:	e000      	b.n	8001540 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800153e:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6818      	ldr	r0, [r3, #0]
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	6859      	ldr	r1, [r3, #4]
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	461a      	mov	r2, r3
 800154e:	f7ff fc42 	bl	8000dd6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4618      	mov	r0, r3
 8001558:	f7ff fd4f 	bl	8000ffa <LL_ADC_REG_IsConversionOngoing>
 800155c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4618      	mov	r0, r3
 8001566:	f7ff fd5b 	bl	8001020 <LL_ADC_INJ_IsConversionOngoing>
 800156a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800156e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001572:	2b00      	cmp	r3, #0
 8001574:	f040 81c1 	bne.w	80018fa <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001578:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800157c:	2b00      	cmp	r3, #0
 800157e:	f040 81bc 	bne.w	80018fa <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	689b      	ldr	r3, [r3, #8]
 8001586:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800158a:	d10f      	bne.n	80015ac <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6818      	ldr	r0, [r3, #0]
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	2200      	movs	r2, #0
 8001596:	4619      	mov	r1, r3
 8001598:	f7ff fc49 	bl	8000e2e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80015a4:	4618      	mov	r0, r3
 80015a6:	f7ff fbf0 	bl	8000d8a <LL_ADC_SetSamplingTimeCommonConfig>
 80015aa:	e00e      	b.n	80015ca <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6818      	ldr	r0, [r3, #0]
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	6819      	ldr	r1, [r3, #0]
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	689b      	ldr	r3, [r3, #8]
 80015b8:	461a      	mov	r2, r3
 80015ba:	f7ff fc38 	bl	8000e2e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	2100      	movs	r1, #0
 80015c4:	4618      	mov	r0, r3
 80015c6:	f7ff fbe0 	bl	8000d8a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	695a      	ldr	r2, [r3, #20]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	68db      	ldr	r3, [r3, #12]
 80015d4:	08db      	lsrs	r3, r3, #3
 80015d6:	f003 0303 	and.w	r3, r3, #3
 80015da:	005b      	lsls	r3, r3, #1
 80015dc:	fa02 f303 	lsl.w	r3, r2, r3
 80015e0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	691b      	ldr	r3, [r3, #16]
 80015e8:	2b04      	cmp	r3, #4
 80015ea:	d00a      	beq.n	8001602 <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6818      	ldr	r0, [r3, #0]
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	6919      	ldr	r1, [r3, #16]
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	681a      	ldr	r2, [r3, #0]
 80015f8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80015fc:	f7ff fb70 	bl	8000ce0 <LL_ADC_SetOffset>
 8001600:	e17b      	b.n	80018fa <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	2100      	movs	r1, #0
 8001608:	4618      	mov	r0, r3
 800160a:	f7ff fb8d 	bl	8000d28 <LL_ADC_GetOffsetChannel>
 800160e:	4603      	mov	r3, r0
 8001610:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001614:	2b00      	cmp	r3, #0
 8001616:	d10a      	bne.n	800162e <HAL_ADC_ConfigChannel+0x17e>
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	2100      	movs	r1, #0
 800161e:	4618      	mov	r0, r3
 8001620:	f7ff fb82 	bl	8000d28 <LL_ADC_GetOffsetChannel>
 8001624:	4603      	mov	r3, r0
 8001626:	0e9b      	lsrs	r3, r3, #26
 8001628:	f003 021f 	and.w	r2, r3, #31
 800162c:	e01e      	b.n	800166c <HAL_ADC_ConfigChannel+0x1bc>
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	2100      	movs	r1, #0
 8001634:	4618      	mov	r0, r3
 8001636:	f7ff fb77 	bl	8000d28 <LL_ADC_GetOffsetChannel>
 800163a:	4603      	mov	r3, r0
 800163c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001640:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001644:	fa93 f3a3 	rbit	r3, r3
 8001648:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800164c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001650:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001654:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d101      	bne.n	8001660 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 800165c:	2320      	movs	r3, #32
 800165e:	e004      	b.n	800166a <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 8001660:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001664:	fab3 f383 	clz	r3, r3
 8001668:	b2db      	uxtb	r3, r3
 800166a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001674:	2b00      	cmp	r3, #0
 8001676:	d105      	bne.n	8001684 <HAL_ADC_ConfigChannel+0x1d4>
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	0e9b      	lsrs	r3, r3, #26
 800167e:	f003 031f 	and.w	r3, r3, #31
 8001682:	e018      	b.n	80016b6 <HAL_ADC_ConfigChannel+0x206>
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800168c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001690:	fa93 f3a3 	rbit	r3, r3
 8001694:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001698:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800169c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80016a0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d101      	bne.n	80016ac <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 80016a8:	2320      	movs	r3, #32
 80016aa:	e004      	b.n	80016b6 <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 80016ac:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80016b0:	fab3 f383 	clz	r3, r3
 80016b4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80016b6:	429a      	cmp	r2, r3
 80016b8:	d106      	bne.n	80016c8 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	2200      	movs	r2, #0
 80016c0:	2100      	movs	r1, #0
 80016c2:	4618      	mov	r0, r3
 80016c4:	f7ff fb46 	bl	8000d54 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	2101      	movs	r1, #1
 80016ce:	4618      	mov	r0, r3
 80016d0:	f7ff fb2a 	bl	8000d28 <LL_ADC_GetOffsetChannel>
 80016d4:	4603      	mov	r3, r0
 80016d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d10a      	bne.n	80016f4 <HAL_ADC_ConfigChannel+0x244>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	2101      	movs	r1, #1
 80016e4:	4618      	mov	r0, r3
 80016e6:	f7ff fb1f 	bl	8000d28 <LL_ADC_GetOffsetChannel>
 80016ea:	4603      	mov	r3, r0
 80016ec:	0e9b      	lsrs	r3, r3, #26
 80016ee:	f003 021f 	and.w	r2, r3, #31
 80016f2:	e01e      	b.n	8001732 <HAL_ADC_ConfigChannel+0x282>
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	2101      	movs	r1, #1
 80016fa:	4618      	mov	r0, r3
 80016fc:	f7ff fb14 	bl	8000d28 <LL_ADC_GetOffsetChannel>
 8001700:	4603      	mov	r3, r0
 8001702:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001706:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800170a:	fa93 f3a3 	rbit	r3, r3
 800170e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001712:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001716:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800171a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800171e:	2b00      	cmp	r3, #0
 8001720:	d101      	bne.n	8001726 <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 8001722:	2320      	movs	r3, #32
 8001724:	e004      	b.n	8001730 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 8001726:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800172a:	fab3 f383 	clz	r3, r3
 800172e:	b2db      	uxtb	r3, r3
 8001730:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800173a:	2b00      	cmp	r3, #0
 800173c:	d105      	bne.n	800174a <HAL_ADC_ConfigChannel+0x29a>
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	0e9b      	lsrs	r3, r3, #26
 8001744:	f003 031f 	and.w	r3, r3, #31
 8001748:	e018      	b.n	800177c <HAL_ADC_ConfigChannel+0x2cc>
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001752:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001756:	fa93 f3a3 	rbit	r3, r3
 800175a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800175e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001762:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001766:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800176a:	2b00      	cmp	r3, #0
 800176c:	d101      	bne.n	8001772 <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 800176e:	2320      	movs	r3, #32
 8001770:	e004      	b.n	800177c <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 8001772:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001776:	fab3 f383 	clz	r3, r3
 800177a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800177c:	429a      	cmp	r2, r3
 800177e:	d106      	bne.n	800178e <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	2200      	movs	r2, #0
 8001786:	2101      	movs	r1, #1
 8001788:	4618      	mov	r0, r3
 800178a:	f7ff fae3 	bl	8000d54 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	2102      	movs	r1, #2
 8001794:	4618      	mov	r0, r3
 8001796:	f7ff fac7 	bl	8000d28 <LL_ADC_GetOffsetChannel>
 800179a:	4603      	mov	r3, r0
 800179c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d10a      	bne.n	80017ba <HAL_ADC_ConfigChannel+0x30a>
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	2102      	movs	r1, #2
 80017aa:	4618      	mov	r0, r3
 80017ac:	f7ff fabc 	bl	8000d28 <LL_ADC_GetOffsetChannel>
 80017b0:	4603      	mov	r3, r0
 80017b2:	0e9b      	lsrs	r3, r3, #26
 80017b4:	f003 021f 	and.w	r2, r3, #31
 80017b8:	e01e      	b.n	80017f8 <HAL_ADC_ConfigChannel+0x348>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	2102      	movs	r1, #2
 80017c0:	4618      	mov	r0, r3
 80017c2:	f7ff fab1 	bl	8000d28 <LL_ADC_GetOffsetChannel>
 80017c6:	4603      	mov	r3, r0
 80017c8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80017d0:	fa93 f3a3 	rbit	r3, r3
 80017d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80017d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80017dc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80017e0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d101      	bne.n	80017ec <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 80017e8:	2320      	movs	r3, #32
 80017ea:	e004      	b.n	80017f6 <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 80017ec:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80017f0:	fab3 f383 	clz	r3, r3
 80017f4:	b2db      	uxtb	r3, r3
 80017f6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001800:	2b00      	cmp	r3, #0
 8001802:	d105      	bne.n	8001810 <HAL_ADC_ConfigChannel+0x360>
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	0e9b      	lsrs	r3, r3, #26
 800180a:	f003 031f 	and.w	r3, r3, #31
 800180e:	e016      	b.n	800183e <HAL_ADC_ConfigChannel+0x38e>
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001818:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800181c:	fa93 f3a3 	rbit	r3, r3
 8001820:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001822:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001824:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001828:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800182c:	2b00      	cmp	r3, #0
 800182e:	d101      	bne.n	8001834 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 8001830:	2320      	movs	r3, #32
 8001832:	e004      	b.n	800183e <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8001834:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001838:	fab3 f383 	clz	r3, r3
 800183c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800183e:	429a      	cmp	r2, r3
 8001840:	d106      	bne.n	8001850 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	2200      	movs	r2, #0
 8001848:	2102      	movs	r1, #2
 800184a:	4618      	mov	r0, r3
 800184c:	f7ff fa82 	bl	8000d54 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	2103      	movs	r1, #3
 8001856:	4618      	mov	r0, r3
 8001858:	f7ff fa66 	bl	8000d28 <LL_ADC_GetOffsetChannel>
 800185c:	4603      	mov	r3, r0
 800185e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001862:	2b00      	cmp	r3, #0
 8001864:	d10a      	bne.n	800187c <HAL_ADC_ConfigChannel+0x3cc>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	2103      	movs	r1, #3
 800186c:	4618      	mov	r0, r3
 800186e:	f7ff fa5b 	bl	8000d28 <LL_ADC_GetOffsetChannel>
 8001872:	4603      	mov	r3, r0
 8001874:	0e9b      	lsrs	r3, r3, #26
 8001876:	f003 021f 	and.w	r2, r3, #31
 800187a:	e017      	b.n	80018ac <HAL_ADC_ConfigChannel+0x3fc>
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	2103      	movs	r1, #3
 8001882:	4618      	mov	r0, r3
 8001884:	f7ff fa50 	bl	8000d28 <LL_ADC_GetOffsetChannel>
 8001888:	4603      	mov	r3, r0
 800188a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800188c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800188e:	fa93 f3a3 	rbit	r3, r3
 8001892:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001894:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001896:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001898:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800189a:	2b00      	cmp	r3, #0
 800189c:	d101      	bne.n	80018a2 <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 800189e:	2320      	movs	r3, #32
 80018a0:	e003      	b.n	80018aa <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 80018a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80018a4:	fab3 f383 	clz	r3, r3
 80018a8:	b2db      	uxtb	r3, r3
 80018aa:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d105      	bne.n	80018c4 <HAL_ADC_ConfigChannel+0x414>
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	0e9b      	lsrs	r3, r3, #26
 80018be:	f003 031f 	and.w	r3, r3, #31
 80018c2:	e011      	b.n	80018e8 <HAL_ADC_ConfigChannel+0x438>
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018ca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80018cc:	fa93 f3a3 	rbit	r3, r3
 80018d0:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80018d2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80018d4:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80018d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d101      	bne.n	80018e0 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 80018dc:	2320      	movs	r3, #32
 80018de:	e003      	b.n	80018e8 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 80018e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80018e2:	fab3 f383 	clz	r3, r3
 80018e6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80018e8:	429a      	cmp	r2, r3
 80018ea:	d106      	bne.n	80018fa <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	2200      	movs	r2, #0
 80018f2:	2103      	movs	r1, #3
 80018f4:	4618      	mov	r0, r3
 80018f6:	f7ff fa2d 	bl	8000d54 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4618      	mov	r0, r3
 8001900:	f7ff fb54 	bl	8000fac <LL_ADC_IsEnabled>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	f040 8140 	bne.w	8001b8c <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6818      	ldr	r0, [r3, #0]
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	6819      	ldr	r1, [r3, #0]
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	68db      	ldr	r3, [r3, #12]
 8001918:	461a      	mov	r2, r3
 800191a:	f7ff fab3 	bl	8000e84 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	68db      	ldr	r3, [r3, #12]
 8001922:	4a8f      	ldr	r2, [pc, #572]	; (8001b60 <HAL_ADC_ConfigChannel+0x6b0>)
 8001924:	4293      	cmp	r3, r2
 8001926:	f040 8131 	bne.w	8001b8c <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001936:	2b00      	cmp	r3, #0
 8001938:	d10b      	bne.n	8001952 <HAL_ADC_ConfigChannel+0x4a2>
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	0e9b      	lsrs	r3, r3, #26
 8001940:	3301      	adds	r3, #1
 8001942:	f003 031f 	and.w	r3, r3, #31
 8001946:	2b09      	cmp	r3, #9
 8001948:	bf94      	ite	ls
 800194a:	2301      	movls	r3, #1
 800194c:	2300      	movhi	r3, #0
 800194e:	b2db      	uxtb	r3, r3
 8001950:	e019      	b.n	8001986 <HAL_ADC_ConfigChannel+0x4d6>
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001958:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800195a:	fa93 f3a3 	rbit	r3, r3
 800195e:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001960:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001962:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001964:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001966:	2b00      	cmp	r3, #0
 8001968:	d101      	bne.n	800196e <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 800196a:	2320      	movs	r3, #32
 800196c:	e003      	b.n	8001976 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 800196e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001970:	fab3 f383 	clz	r3, r3
 8001974:	b2db      	uxtb	r3, r3
 8001976:	3301      	adds	r3, #1
 8001978:	f003 031f 	and.w	r3, r3, #31
 800197c:	2b09      	cmp	r3, #9
 800197e:	bf94      	ite	ls
 8001980:	2301      	movls	r3, #1
 8001982:	2300      	movhi	r3, #0
 8001984:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001986:	2b00      	cmp	r3, #0
 8001988:	d079      	beq.n	8001a7e <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001992:	2b00      	cmp	r3, #0
 8001994:	d107      	bne.n	80019a6 <HAL_ADC_ConfigChannel+0x4f6>
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	0e9b      	lsrs	r3, r3, #26
 800199c:	3301      	adds	r3, #1
 800199e:	069b      	lsls	r3, r3, #26
 80019a0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80019a4:	e015      	b.n	80019d2 <HAL_ADC_ConfigChannel+0x522>
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80019ae:	fa93 f3a3 	rbit	r3, r3
 80019b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80019b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80019b6:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80019b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d101      	bne.n	80019c2 <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 80019be:	2320      	movs	r3, #32
 80019c0:	e003      	b.n	80019ca <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 80019c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019c4:	fab3 f383 	clz	r3, r3
 80019c8:	b2db      	uxtb	r3, r3
 80019ca:	3301      	adds	r3, #1
 80019cc:	069b      	lsls	r3, r3, #26
 80019ce:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d109      	bne.n	80019f2 <HAL_ADC_ConfigChannel+0x542>
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	0e9b      	lsrs	r3, r3, #26
 80019e4:	3301      	adds	r3, #1
 80019e6:	f003 031f 	and.w	r3, r3, #31
 80019ea:	2101      	movs	r1, #1
 80019ec:	fa01 f303 	lsl.w	r3, r1, r3
 80019f0:	e017      	b.n	8001a22 <HAL_ADC_ConfigChannel+0x572>
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019fa:	fa93 f3a3 	rbit	r3, r3
 80019fe:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001a00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a02:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001a04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d101      	bne.n	8001a0e <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 8001a0a:	2320      	movs	r3, #32
 8001a0c:	e003      	b.n	8001a16 <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 8001a0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001a10:	fab3 f383 	clz	r3, r3
 8001a14:	b2db      	uxtb	r3, r3
 8001a16:	3301      	adds	r3, #1
 8001a18:	f003 031f 	and.w	r3, r3, #31
 8001a1c:	2101      	movs	r1, #1
 8001a1e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a22:	ea42 0103 	orr.w	r1, r2, r3
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d10a      	bne.n	8001a48 <HAL_ADC_ConfigChannel+0x598>
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	0e9b      	lsrs	r3, r3, #26
 8001a38:	3301      	adds	r3, #1
 8001a3a:	f003 021f 	and.w	r2, r3, #31
 8001a3e:	4613      	mov	r3, r2
 8001a40:	005b      	lsls	r3, r3, #1
 8001a42:	4413      	add	r3, r2
 8001a44:	051b      	lsls	r3, r3, #20
 8001a46:	e018      	b.n	8001a7a <HAL_ADC_ConfigChannel+0x5ca>
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a50:	fa93 f3a3 	rbit	r3, r3
 8001a54:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001a56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a58:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001a5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d101      	bne.n	8001a64 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 8001a60:	2320      	movs	r3, #32
 8001a62:	e003      	b.n	8001a6c <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 8001a64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a66:	fab3 f383 	clz	r3, r3
 8001a6a:	b2db      	uxtb	r3, r3
 8001a6c:	3301      	adds	r3, #1
 8001a6e:	f003 021f 	and.w	r2, r3, #31
 8001a72:	4613      	mov	r3, r2
 8001a74:	005b      	lsls	r3, r3, #1
 8001a76:	4413      	add	r3, r2
 8001a78:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001a7a:	430b      	orrs	r3, r1
 8001a7c:	e081      	b.n	8001b82 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d107      	bne.n	8001a9a <HAL_ADC_ConfigChannel+0x5ea>
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	0e9b      	lsrs	r3, r3, #26
 8001a90:	3301      	adds	r3, #1
 8001a92:	069b      	lsls	r3, r3, #26
 8001a94:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001a98:	e015      	b.n	8001ac6 <HAL_ADC_ConfigChannel+0x616>
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001aa2:	fa93 f3a3 	rbit	r3, r3
 8001aa6:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001aaa:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d101      	bne.n	8001ab6 <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 8001ab2:	2320      	movs	r3, #32
 8001ab4:	e003      	b.n	8001abe <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 8001ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ab8:	fab3 f383 	clz	r3, r3
 8001abc:	b2db      	uxtb	r3, r3
 8001abe:	3301      	adds	r3, #1
 8001ac0:	069b      	lsls	r3, r3, #26
 8001ac2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d109      	bne.n	8001ae6 <HAL_ADC_ConfigChannel+0x636>
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	0e9b      	lsrs	r3, r3, #26
 8001ad8:	3301      	adds	r3, #1
 8001ada:	f003 031f 	and.w	r3, r3, #31
 8001ade:	2101      	movs	r1, #1
 8001ae0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ae4:	e017      	b.n	8001b16 <HAL_ADC_ConfigChannel+0x666>
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aec:	6a3b      	ldr	r3, [r7, #32]
 8001aee:	fa93 f3a3 	rbit	r3, r3
 8001af2:	61fb      	str	r3, [r7, #28]
  return result;
 8001af4:	69fb      	ldr	r3, [r7, #28]
 8001af6:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d101      	bne.n	8001b02 <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 8001afe:	2320      	movs	r3, #32
 8001b00:	e003      	b.n	8001b0a <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 8001b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b04:	fab3 f383 	clz	r3, r3
 8001b08:	b2db      	uxtb	r3, r3
 8001b0a:	3301      	adds	r3, #1
 8001b0c:	f003 031f 	and.w	r3, r3, #31
 8001b10:	2101      	movs	r1, #1
 8001b12:	fa01 f303 	lsl.w	r3, r1, r3
 8001b16:	ea42 0103 	orr.w	r1, r2, r3
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d10d      	bne.n	8001b42 <HAL_ADC_ConfigChannel+0x692>
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	0e9b      	lsrs	r3, r3, #26
 8001b2c:	3301      	adds	r3, #1
 8001b2e:	f003 021f 	and.w	r2, r3, #31
 8001b32:	4613      	mov	r3, r2
 8001b34:	005b      	lsls	r3, r3, #1
 8001b36:	4413      	add	r3, r2
 8001b38:	3b1e      	subs	r3, #30
 8001b3a:	051b      	lsls	r3, r3, #20
 8001b3c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b40:	e01e      	b.n	8001b80 <HAL_ADC_ConfigChannel+0x6d0>
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	fa93 f3a3 	rbit	r3, r3
 8001b4e:	613b      	str	r3, [r7, #16]
  return result;
 8001b50:	693b      	ldr	r3, [r7, #16]
 8001b52:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001b54:	69bb      	ldr	r3, [r7, #24]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d104      	bne.n	8001b64 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8001b5a:	2320      	movs	r3, #32
 8001b5c:	e006      	b.n	8001b6c <HAL_ADC_ConfigChannel+0x6bc>
 8001b5e:	bf00      	nop
 8001b60:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001b64:	69bb      	ldr	r3, [r7, #24]
 8001b66:	fab3 f383 	clz	r3, r3
 8001b6a:	b2db      	uxtb	r3, r3
 8001b6c:	3301      	adds	r3, #1
 8001b6e:	f003 021f 	and.w	r2, r3, #31
 8001b72:	4613      	mov	r3, r2
 8001b74:	005b      	lsls	r3, r3, #1
 8001b76:	4413      	add	r3, r2
 8001b78:	3b1e      	subs	r3, #30
 8001b7a:	051b      	lsls	r3, r3, #20
 8001b7c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001b80:	430b      	orrs	r3, r1
 8001b82:	683a      	ldr	r2, [r7, #0]
 8001b84:	6892      	ldr	r2, [r2, #8]
 8001b86:	4619      	mov	r1, r3
 8001b88:	f7ff f951 	bl	8000e2e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	681a      	ldr	r2, [r3, #0]
 8001b90:	4b44      	ldr	r3, [pc, #272]	; (8001ca4 <HAL_ADC_ConfigChannel+0x7f4>)
 8001b92:	4013      	ands	r3, r2
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d07a      	beq.n	8001c8e <HAL_ADC_ConfigChannel+0x7de>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001b98:	4843      	ldr	r0, [pc, #268]	; (8001ca8 <HAL_ADC_ConfigChannel+0x7f8>)
 8001b9a:	f7ff f893 	bl	8000cc4 <LL_ADC_GetCommonPathInternalCh>
 8001b9e:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a41      	ldr	r2, [pc, #260]	; (8001cac <HAL_ADC_ConfigChannel+0x7fc>)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d12c      	bne.n	8001c06 <HAL_ADC_ConfigChannel+0x756>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001bac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001bb0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d126      	bne.n	8001c06 <HAL_ADC_ConfigChannel+0x756>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a3c      	ldr	r2, [pc, #240]	; (8001cb0 <HAL_ADC_ConfigChannel+0x800>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d004      	beq.n	8001bcc <HAL_ADC_ConfigChannel+0x71c>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4a3b      	ldr	r2, [pc, #236]	; (8001cb4 <HAL_ADC_ConfigChannel+0x804>)
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d15d      	bne.n	8001c88 <HAL_ADC_ConfigChannel+0x7d8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001bcc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001bd0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	4834      	ldr	r0, [pc, #208]	; (8001ca8 <HAL_ADC_ConfigChannel+0x7f8>)
 8001bd8:	f7ff f861 	bl	8000c9e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001bdc:	4b36      	ldr	r3, [pc, #216]	; (8001cb8 <HAL_ADC_ConfigChannel+0x808>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	099b      	lsrs	r3, r3, #6
 8001be2:	4a36      	ldr	r2, [pc, #216]	; (8001cbc <HAL_ADC_ConfigChannel+0x80c>)
 8001be4:	fba2 2303 	umull	r2, r3, r2, r3
 8001be8:	099b      	lsrs	r3, r3, #6
 8001bea:	1c5a      	adds	r2, r3, #1
 8001bec:	4613      	mov	r3, r2
 8001bee:	005b      	lsls	r3, r3, #1
 8001bf0:	4413      	add	r3, r2
 8001bf2:	009b      	lsls	r3, r3, #2
 8001bf4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001bf6:	e002      	b.n	8001bfe <HAL_ADC_ConfigChannel+0x74e>
          {
            wait_loop_index--;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	3b01      	subs	r3, #1
 8001bfc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d1f9      	bne.n	8001bf8 <HAL_ADC_ConfigChannel+0x748>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001c04:	e040      	b.n	8001c88 <HAL_ADC_ConfigChannel+0x7d8>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a2d      	ldr	r2, [pc, #180]	; (8001cc0 <HAL_ADC_ConfigChannel+0x810>)
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d118      	bne.n	8001c42 <HAL_ADC_ConfigChannel+0x792>
 8001c10:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001c14:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d112      	bne.n	8001c42 <HAL_ADC_ConfigChannel+0x792>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a23      	ldr	r2, [pc, #140]	; (8001cb0 <HAL_ADC_ConfigChannel+0x800>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d004      	beq.n	8001c30 <HAL_ADC_ConfigChannel+0x780>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a22      	ldr	r2, [pc, #136]	; (8001cb4 <HAL_ADC_ConfigChannel+0x804>)
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d12d      	bne.n	8001c8c <HAL_ADC_ConfigChannel+0x7dc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001c30:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001c34:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c38:	4619      	mov	r1, r3
 8001c3a:	481b      	ldr	r0, [pc, #108]	; (8001ca8 <HAL_ADC_ConfigChannel+0x7f8>)
 8001c3c:	f7ff f82f 	bl	8000c9e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001c40:	e024      	b.n	8001c8c <HAL_ADC_ConfigChannel+0x7dc>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a1f      	ldr	r2, [pc, #124]	; (8001cc4 <HAL_ADC_ConfigChannel+0x814>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d120      	bne.n	8001c8e <HAL_ADC_ConfigChannel+0x7de>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001c4c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001c50:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d11a      	bne.n	8001c8e <HAL_ADC_ConfigChannel+0x7de>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a14      	ldr	r2, [pc, #80]	; (8001cb0 <HAL_ADC_ConfigChannel+0x800>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d115      	bne.n	8001c8e <HAL_ADC_ConfigChannel+0x7de>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001c62:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001c66:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	480e      	ldr	r0, [pc, #56]	; (8001ca8 <HAL_ADC_ConfigChannel+0x7f8>)
 8001c6e:	f7ff f816 	bl	8000c9e <LL_ADC_SetCommonPathInternalCh>
 8001c72:	e00c      	b.n	8001c8e <HAL_ADC_ConfigChannel+0x7de>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c78:	f043 0220 	orr.w	r2, r3, #32
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001c80:	2301      	movs	r3, #1
 8001c82:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8001c86:	e002      	b.n	8001c8e <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001c88:	bf00      	nop
 8001c8a:	e000      	b.n	8001c8e <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001c8c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2200      	movs	r2, #0
 8001c92:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8001c96:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	37d8      	adds	r7, #216	; 0xd8
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	80080000 	.word	0x80080000
 8001ca8:	50040300 	.word	0x50040300
 8001cac:	c7520000 	.word	0xc7520000
 8001cb0:	50040000 	.word	0x50040000
 8001cb4:	50040200 	.word	0x50040200
 8001cb8:	20000000 	.word	0x20000000
 8001cbc:	053e2d63 	.word	0x053e2d63
 8001cc0:	cb840000 	.word	0xcb840000
 8001cc4:	80000001 	.word	0x80000001

08001cc8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b084      	sub	sp, #16
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f7ff f969 	bl	8000fac <LL_ADC_IsEnabled>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d14d      	bne.n	8001d7c <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	689a      	ldr	r2, [r3, #8]
 8001ce6:	4b28      	ldr	r3, [pc, #160]	; (8001d88 <ADC_Enable+0xc0>)
 8001ce8:	4013      	ands	r3, r2
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d00d      	beq.n	8001d0a <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cf2:	f043 0210 	orr.w	r2, r3, #16
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cfe:	f043 0201 	orr.w	r2, r3, #1
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
 8001d08:	e039      	b.n	8001d7e <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f7ff f938 	bl	8000f84 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8001d14:	f7fe ff80 	bl	8000c18 <HAL_GetTick>
 8001d18:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001d1a:	e028      	b.n	8001d6e <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4618      	mov	r0, r3
 8001d22:	f7ff f943 	bl	8000fac <LL_ADC_IsEnabled>
 8001d26:	4603      	mov	r3, r0
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d104      	bne.n	8001d36 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4618      	mov	r0, r3
 8001d32:	f7ff f927 	bl	8000f84 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001d36:	f7fe ff6f 	bl	8000c18 <HAL_GetTick>
 8001d3a:	4602      	mov	r2, r0
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	1ad3      	subs	r3, r2, r3
 8001d40:	2b02      	cmp	r3, #2
 8001d42:	d914      	bls.n	8001d6e <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f003 0301 	and.w	r3, r3, #1
 8001d4e:	2b01      	cmp	r3, #1
 8001d50:	d00d      	beq.n	8001d6e <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d56:	f043 0210 	orr.w	r2, r3, #16
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d62:	f043 0201 	orr.w	r2, r3, #1
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e007      	b.n	8001d7e <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f003 0301 	and.w	r3, r3, #1
 8001d78:	2b01      	cmp	r3, #1
 8001d7a:	d1cf      	bne.n	8001d1c <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001d7c:	2300      	movs	r3, #0
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3710      	adds	r7, #16
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	8000003f 	.word	0x8000003f

08001d8c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b084      	sub	sp, #16
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d98:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d9e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d14b      	bne.n	8001e3e <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001daa:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	659a      	str	r2, [r3, #88]	; 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f003 0308 	and.w	r3, r3, #8
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d021      	beq.n	8001e04 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f7fe fff3 	bl	8000db0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d032      	beq.n	8001e36 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	68db      	ldr	r3, [r3, #12]
 8001dd6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d12b      	bne.n	8001e36 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001de2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	659a      	str	r2, [r3, #88]	; 0x58
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d11f      	bne.n	8001e36 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dfa:	f043 0201 	orr.w	r2, r3, #1
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	659a      	str	r2, [r3, #88]	; 0x58
 8001e02:	e018      	b.n	8001e36 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	68db      	ldr	r3, [r3, #12]
 8001e0a:	f003 0302 	and.w	r3, r3, #2
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d111      	bne.n	8001e36 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e16:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	659a      	str	r2, [r3, #88]	; 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e22:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d105      	bne.n	8001e36 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e2e:	f043 0201 	orr.w	r2, r3, #1
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	659a      	str	r2, [r3, #88]	; 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001e36:	68f8      	ldr	r0, [r7, #12]
 8001e38:	f7ff fb1c 	bl	8001474 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001e3c:	e00e      	b.n	8001e5c <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e42:	f003 0310 	and.w	r3, r3, #16
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d003      	beq.n	8001e52 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8001e4a:	68f8      	ldr	r0, [r7, #12]
 8001e4c:	f7ff fb26 	bl	800149c <HAL_ADC_ErrorCallback>
}
 8001e50:	e004      	b.n	8001e5c <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e58:	6878      	ldr	r0, [r7, #4]
 8001e5a:	4798      	blx	r3
}
 8001e5c:	bf00      	nop
 8001e5e:	3710      	adds	r7, #16
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}

08001e64 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b084      	sub	sp, #16
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e70:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001e72:	68f8      	ldr	r0, [r7, #12]
 8001e74:	f7ff fb08 	bl	8001488 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001e78:	bf00      	nop
 8001e7a:	3710      	adds	r7, #16
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}

08001e80 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b084      	sub	sp, #16
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e8c:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e92:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e9e:	f043 0204 	orr.w	r2, r3, #4
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001ea6:	68f8      	ldr	r0, [r7, #12]
 8001ea8:	f7ff faf8 	bl	800149c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001eac:	bf00      	nop
 8001eae:	3710      	adds	r7, #16
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}

08001eb4 <LL_ADC_IsEnabled>:
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b083      	sub	sp, #12
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	f003 0301 	and.w	r3, r3, #1
 8001ec4:	2b01      	cmp	r3, #1
 8001ec6:	d101      	bne.n	8001ecc <LL_ADC_IsEnabled+0x18>
 8001ec8:	2301      	movs	r3, #1
 8001eca:	e000      	b.n	8001ece <LL_ADC_IsEnabled+0x1a>
 8001ecc:	2300      	movs	r3, #0
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	370c      	adds	r7, #12
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr

08001eda <LL_ADC_REG_IsConversionOngoing>:
{
 8001eda:	b480      	push	{r7}
 8001edc:	b083      	sub	sp, #12
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	f003 0304 	and.w	r3, r3, #4
 8001eea:	2b04      	cmp	r3, #4
 8001eec:	d101      	bne.n	8001ef2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e000      	b.n	8001ef4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001ef2:	2300      	movs	r3, #0
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	370c      	adds	r7, #12
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr

08001f00 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8001f00:	b590      	push	{r4, r7, lr}
 8001f02:	b0a1      	sub	sp, #132	; 0x84
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
 8001f08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001f16:	2b01      	cmp	r3, #1
 8001f18:	d101      	bne.n	8001f1e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8001f1a:	2302      	movs	r3, #2
 8001f1c:	e093      	b.n	8002046 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2201      	movs	r2, #1
 8001f22:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8001f26:	2300      	movs	r3, #0
 8001f28:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4a47      	ldr	r2, [pc, #284]	; (8002050 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d102      	bne.n	8001f3e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8001f38:	4b46      	ldr	r3, [pc, #280]	; (8002054 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8001f3a:	60fb      	str	r3, [r7, #12]
 8001f3c:	e001      	b.n	8001f42 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8001f3e:	2300      	movs	r3, #0
 8001f40:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d10b      	bne.n	8001f60 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f4c:	f043 0220 	orr.w	r2, r3, #32
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2200      	movs	r2, #0
 8001f58:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    return HAL_ERROR;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	e072      	b.n	8002046 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	4618      	mov	r0, r3
 8001f64:	f7ff ffb9 	bl	8001eda <LL_ADC_REG_IsConversionOngoing>
 8001f68:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f7ff ffb3 	bl	8001eda <LL_ADC_REG_IsConversionOngoing>
 8001f74:	4603      	mov	r3, r0
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d154      	bne.n	8002024 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8001f7a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d151      	bne.n	8002024 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8001f80:	4b35      	ldr	r3, [pc, #212]	; (8002058 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8001f82:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d02c      	beq.n	8001fe6 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8001f8c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	6859      	ldr	r1, [r3, #4]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001f9e:	035b      	lsls	r3, r3, #13
 8001fa0:	430b      	orrs	r3, r1
 8001fa2:	431a      	orrs	r2, r3
 8001fa4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001fa6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001fa8:	4829      	ldr	r0, [pc, #164]	; (8002050 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8001faa:	f7ff ff83 	bl	8001eb4 <LL_ADC_IsEnabled>
 8001fae:	4604      	mov	r4, r0
 8001fb0:	4828      	ldr	r0, [pc, #160]	; (8002054 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8001fb2:	f7ff ff7f 	bl	8001eb4 <LL_ADC_IsEnabled>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	431c      	orrs	r4, r3
 8001fba:	4828      	ldr	r0, [pc, #160]	; (800205c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8001fbc:	f7ff ff7a 	bl	8001eb4 <LL_ADC_IsEnabled>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	4323      	orrs	r3, r4
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d137      	bne.n	8002038 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8001fc8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001fd0:	f023 030f 	bic.w	r3, r3, #15
 8001fd4:	683a      	ldr	r2, [r7, #0]
 8001fd6:	6811      	ldr	r1, [r2, #0]
 8001fd8:	683a      	ldr	r2, [r7, #0]
 8001fda:	6892      	ldr	r2, [r2, #8]
 8001fdc:	430a      	orrs	r2, r1
 8001fde:	431a      	orrs	r2, r3
 8001fe0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001fe2:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001fe4:	e028      	b.n	8002038 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001fe6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001fee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001ff0:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001ff2:	4817      	ldr	r0, [pc, #92]	; (8002050 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8001ff4:	f7ff ff5e 	bl	8001eb4 <LL_ADC_IsEnabled>
 8001ff8:	4604      	mov	r4, r0
 8001ffa:	4816      	ldr	r0, [pc, #88]	; (8002054 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8001ffc:	f7ff ff5a 	bl	8001eb4 <LL_ADC_IsEnabled>
 8002000:	4603      	mov	r3, r0
 8002002:	431c      	orrs	r4, r3
 8002004:	4815      	ldr	r0, [pc, #84]	; (800205c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002006:	f7ff ff55 	bl	8001eb4 <LL_ADC_IsEnabled>
 800200a:	4603      	mov	r3, r0
 800200c:	4323      	orrs	r3, r4
 800200e:	2b00      	cmp	r3, #0
 8002010:	d112      	bne.n	8002038 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002012:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002014:	689b      	ldr	r3, [r3, #8]
 8002016:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800201a:	f023 030f 	bic.w	r3, r3, #15
 800201e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002020:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002022:	e009      	b.n	8002038 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002028:	f043 0220 	orr.w	r2, r3, #32
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002030:	2301      	movs	r3, #1
 8002032:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002036:	e000      	b.n	800203a <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002038:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2200      	movs	r2, #0
 800203e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8002042:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002046:	4618      	mov	r0, r3
 8002048:	3784      	adds	r7, #132	; 0x84
 800204a:	46bd      	mov	sp, r7
 800204c:	bd90      	pop	{r4, r7, pc}
 800204e:	bf00      	nop
 8002050:	50040000 	.word	0x50040000
 8002054:	50040100 	.word	0x50040100
 8002058:	50040300 	.word	0x50040300
 800205c:	50040200 	.word	0x50040200

08002060 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002060:	b480      	push	{r7}
 8002062:	b085      	sub	sp, #20
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	f003 0307 	and.w	r3, r3, #7
 800206e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002070:	4b0c      	ldr	r3, [pc, #48]	; (80020a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002072:	68db      	ldr	r3, [r3, #12]
 8002074:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002076:	68ba      	ldr	r2, [r7, #8]
 8002078:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800207c:	4013      	ands	r3, r2
 800207e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002088:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800208c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002090:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002092:	4a04      	ldr	r2, [pc, #16]	; (80020a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	60d3      	str	r3, [r2, #12]
}
 8002098:	bf00      	nop
 800209a:	3714      	adds	r7, #20
 800209c:	46bd      	mov	sp, r7
 800209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a2:	4770      	bx	lr
 80020a4:	e000ed00 	.word	0xe000ed00

080020a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020a8:	b480      	push	{r7}
 80020aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020ac:	4b04      	ldr	r3, [pc, #16]	; (80020c0 <__NVIC_GetPriorityGrouping+0x18>)
 80020ae:	68db      	ldr	r3, [r3, #12]
 80020b0:	0a1b      	lsrs	r3, r3, #8
 80020b2:	f003 0307 	and.w	r3, r3, #7
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr
 80020c0:	e000ed00 	.word	0xe000ed00

080020c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b083      	sub	sp, #12
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	4603      	mov	r3, r0
 80020cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	db0b      	blt.n	80020ee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020d6:	79fb      	ldrb	r3, [r7, #7]
 80020d8:	f003 021f 	and.w	r2, r3, #31
 80020dc:	4907      	ldr	r1, [pc, #28]	; (80020fc <__NVIC_EnableIRQ+0x38>)
 80020de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020e2:	095b      	lsrs	r3, r3, #5
 80020e4:	2001      	movs	r0, #1
 80020e6:	fa00 f202 	lsl.w	r2, r0, r2
 80020ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80020ee:	bf00      	nop
 80020f0:	370c      	adds	r7, #12
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr
 80020fa:	bf00      	nop
 80020fc:	e000e100 	.word	0xe000e100

08002100 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002100:	b480      	push	{r7}
 8002102:	b083      	sub	sp, #12
 8002104:	af00      	add	r7, sp, #0
 8002106:	4603      	mov	r3, r0
 8002108:	6039      	str	r1, [r7, #0]
 800210a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800210c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002110:	2b00      	cmp	r3, #0
 8002112:	db0a      	blt.n	800212a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	b2da      	uxtb	r2, r3
 8002118:	490c      	ldr	r1, [pc, #48]	; (800214c <__NVIC_SetPriority+0x4c>)
 800211a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800211e:	0112      	lsls	r2, r2, #4
 8002120:	b2d2      	uxtb	r2, r2
 8002122:	440b      	add	r3, r1
 8002124:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002128:	e00a      	b.n	8002140 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	b2da      	uxtb	r2, r3
 800212e:	4908      	ldr	r1, [pc, #32]	; (8002150 <__NVIC_SetPriority+0x50>)
 8002130:	79fb      	ldrb	r3, [r7, #7]
 8002132:	f003 030f 	and.w	r3, r3, #15
 8002136:	3b04      	subs	r3, #4
 8002138:	0112      	lsls	r2, r2, #4
 800213a:	b2d2      	uxtb	r2, r2
 800213c:	440b      	add	r3, r1
 800213e:	761a      	strb	r2, [r3, #24]
}
 8002140:	bf00      	nop
 8002142:	370c      	adds	r7, #12
 8002144:	46bd      	mov	sp, r7
 8002146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214a:	4770      	bx	lr
 800214c:	e000e100 	.word	0xe000e100
 8002150:	e000ed00 	.word	0xe000ed00

08002154 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002154:	b480      	push	{r7}
 8002156:	b089      	sub	sp, #36	; 0x24
 8002158:	af00      	add	r7, sp, #0
 800215a:	60f8      	str	r0, [r7, #12]
 800215c:	60b9      	str	r1, [r7, #8]
 800215e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	f003 0307 	and.w	r3, r3, #7
 8002166:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002168:	69fb      	ldr	r3, [r7, #28]
 800216a:	f1c3 0307 	rsb	r3, r3, #7
 800216e:	2b04      	cmp	r3, #4
 8002170:	bf28      	it	cs
 8002172:	2304      	movcs	r3, #4
 8002174:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002176:	69fb      	ldr	r3, [r7, #28]
 8002178:	3304      	adds	r3, #4
 800217a:	2b06      	cmp	r3, #6
 800217c:	d902      	bls.n	8002184 <NVIC_EncodePriority+0x30>
 800217e:	69fb      	ldr	r3, [r7, #28]
 8002180:	3b03      	subs	r3, #3
 8002182:	e000      	b.n	8002186 <NVIC_EncodePriority+0x32>
 8002184:	2300      	movs	r3, #0
 8002186:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002188:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800218c:	69bb      	ldr	r3, [r7, #24]
 800218e:	fa02 f303 	lsl.w	r3, r2, r3
 8002192:	43da      	mvns	r2, r3
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	401a      	ands	r2, r3
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800219c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	fa01 f303 	lsl.w	r3, r1, r3
 80021a6:	43d9      	mvns	r1, r3
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021ac:	4313      	orrs	r3, r2
         );
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	3724      	adds	r7, #36	; 0x24
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr
	...

080021bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b082      	sub	sp, #8
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	3b01      	subs	r3, #1
 80021c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021cc:	d301      	bcc.n	80021d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021ce:	2301      	movs	r3, #1
 80021d0:	e00f      	b.n	80021f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021d2:	4a0a      	ldr	r2, [pc, #40]	; (80021fc <SysTick_Config+0x40>)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	3b01      	subs	r3, #1
 80021d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021da:	210f      	movs	r1, #15
 80021dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80021e0:	f7ff ff8e 	bl	8002100 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021e4:	4b05      	ldr	r3, [pc, #20]	; (80021fc <SysTick_Config+0x40>)
 80021e6:	2200      	movs	r2, #0
 80021e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021ea:	4b04      	ldr	r3, [pc, #16]	; (80021fc <SysTick_Config+0x40>)
 80021ec:	2207      	movs	r2, #7
 80021ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021f0:	2300      	movs	r3, #0
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	3708      	adds	r7, #8
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	e000e010 	.word	0xe000e010

08002200 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b082      	sub	sp, #8
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002208:	6878      	ldr	r0, [r7, #4]
 800220a:	f7ff ff29 	bl	8002060 <__NVIC_SetPriorityGrouping>
}
 800220e:	bf00      	nop
 8002210:	3708      	adds	r7, #8
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}

08002216 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002216:	b580      	push	{r7, lr}
 8002218:	b086      	sub	sp, #24
 800221a:	af00      	add	r7, sp, #0
 800221c:	4603      	mov	r3, r0
 800221e:	60b9      	str	r1, [r7, #8]
 8002220:	607a      	str	r2, [r7, #4]
 8002222:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002224:	2300      	movs	r3, #0
 8002226:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002228:	f7ff ff3e 	bl	80020a8 <__NVIC_GetPriorityGrouping>
 800222c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800222e:	687a      	ldr	r2, [r7, #4]
 8002230:	68b9      	ldr	r1, [r7, #8]
 8002232:	6978      	ldr	r0, [r7, #20]
 8002234:	f7ff ff8e 	bl	8002154 <NVIC_EncodePriority>
 8002238:	4602      	mov	r2, r0
 800223a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800223e:	4611      	mov	r1, r2
 8002240:	4618      	mov	r0, r3
 8002242:	f7ff ff5d 	bl	8002100 <__NVIC_SetPriority>
}
 8002246:	bf00      	nop
 8002248:	3718      	adds	r7, #24
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}

0800224e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800224e:	b580      	push	{r7, lr}
 8002250:	b082      	sub	sp, #8
 8002252:	af00      	add	r7, sp, #0
 8002254:	4603      	mov	r3, r0
 8002256:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002258:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800225c:	4618      	mov	r0, r3
 800225e:	f7ff ff31 	bl	80020c4 <__NVIC_EnableIRQ>
}
 8002262:	bf00      	nop
 8002264:	3708      	adds	r7, #8
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}

0800226a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800226a:	b580      	push	{r7, lr}
 800226c:	b082      	sub	sp, #8
 800226e:	af00      	add	r7, sp, #0
 8002270:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002272:	6878      	ldr	r0, [r7, #4]
 8002274:	f7ff ffa2 	bl	80021bc <SysTick_Config>
 8002278:	4603      	mov	r3, r0
}
 800227a:	4618      	mov	r0, r3
 800227c:	3708      	adds	r7, #8
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}

08002282 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002282:	b580      	push	{r7, lr}
 8002284:	b082      	sub	sp, #8
 8002286:	af00      	add	r7, sp, #0
 8002288:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d101      	bne.n	8002294 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8002290:	2301      	movs	r3, #1
 8002292:	e014      	b.n	80022be <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	791b      	ldrb	r3, [r3, #4]
 8002298:	b2db      	uxtb	r3, r3
 800229a:	2b00      	cmp	r3, #0
 800229c:	d105      	bne.n	80022aa <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2200      	movs	r2, #0
 80022a2:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80022a4:	6878      	ldr	r0, [r7, #4]
 80022a6:	f7fe fb17 	bl	80008d8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2202      	movs	r2, #2
 80022ae:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2200      	movs	r2, #0
 80022b4:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2201      	movs	r2, #1
 80022ba:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80022bc:	2300      	movs	r3, #0
}
 80022be:	4618      	mov	r0, r3
 80022c0:	3708      	adds	r7, #8
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
	...

080022c8 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b086      	sub	sp, #24
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	60f8      	str	r0, [r7, #12]
 80022d0:	60b9      	str	r1, [r7, #8]
 80022d2:	607a      	str	r2, [r7, #4]
 80022d4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 80022d6:	2300      	movs	r3, #0
 80022d8:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	795b      	ldrb	r3, [r3, #5]
 80022de:	2b01      	cmp	r3, #1
 80022e0:	d101      	bne.n	80022e6 <HAL_DAC_Start_DMA+0x1e>
 80022e2:	2302      	movs	r3, #2
 80022e4:	e0ab      	b.n	800243e <HAL_DAC_Start_DMA+0x176>
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	2201      	movs	r2, #1
 80022ea:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	2202      	movs	r2, #2
 80022f0:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d12f      	bne.n	8002358 <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	4a52      	ldr	r2, [pc, #328]	; (8002448 <HAL_DAC_Start_DMA+0x180>)
 80022fe:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	4a51      	ldr	r2, [pc, #324]	; (800244c <HAL_DAC_Start_DMA+0x184>)
 8002306:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	4a50      	ldr	r2, [pc, #320]	; (8002450 <HAL_DAC_Start_DMA+0x188>)
 800230e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800231e:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8002320:	6a3b      	ldr	r3, [r7, #32]
 8002322:	2b08      	cmp	r3, #8
 8002324:	d013      	beq.n	800234e <HAL_DAC_Start_DMA+0x86>
 8002326:	6a3b      	ldr	r3, [r7, #32]
 8002328:	2b08      	cmp	r3, #8
 800232a:	d845      	bhi.n	80023b8 <HAL_DAC_Start_DMA+0xf0>
 800232c:	6a3b      	ldr	r3, [r7, #32]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d003      	beq.n	800233a <HAL_DAC_Start_DMA+0x72>
 8002332:	6a3b      	ldr	r3, [r7, #32]
 8002334:	2b04      	cmp	r3, #4
 8002336:	d005      	beq.n	8002344 <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8002338:	e03e      	b.n	80023b8 <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	3308      	adds	r3, #8
 8002340:	613b      	str	r3, [r7, #16]
        break;
 8002342:	e03c      	b.n	80023be <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	330c      	adds	r3, #12
 800234a:	613b      	str	r3, [r7, #16]
        break;
 800234c:	e037      	b.n	80023be <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	3310      	adds	r3, #16
 8002354:	613b      	str	r3, [r7, #16]
        break;
 8002356:	e032      	b.n	80023be <HAL_DAC_Start_DMA+0xf6>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	68db      	ldr	r3, [r3, #12]
 800235c:	4a3d      	ldr	r2, [pc, #244]	; (8002454 <HAL_DAC_Start_DMA+0x18c>)
 800235e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	4a3c      	ldr	r2, [pc, #240]	; (8002458 <HAL_DAC_Start_DMA+0x190>)
 8002366:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	68db      	ldr	r3, [r3, #12]
 800236c:	4a3b      	ldr	r2, [pc, #236]	; (800245c <HAL_DAC_Start_DMA+0x194>)
 800236e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	681a      	ldr	r2, [r3, #0]
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800237e:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8002380:	6a3b      	ldr	r3, [r7, #32]
 8002382:	2b08      	cmp	r3, #8
 8002384:	d013      	beq.n	80023ae <HAL_DAC_Start_DMA+0xe6>
 8002386:	6a3b      	ldr	r3, [r7, #32]
 8002388:	2b08      	cmp	r3, #8
 800238a:	d817      	bhi.n	80023bc <HAL_DAC_Start_DMA+0xf4>
 800238c:	6a3b      	ldr	r3, [r7, #32]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d003      	beq.n	800239a <HAL_DAC_Start_DMA+0xd2>
 8002392:	6a3b      	ldr	r3, [r7, #32]
 8002394:	2b04      	cmp	r3, #4
 8002396:	d005      	beq.n	80023a4 <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8002398:	e010      	b.n	80023bc <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	3314      	adds	r3, #20
 80023a0:	613b      	str	r3, [r7, #16]
        break;
 80023a2:	e00c      	b.n	80023be <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	3318      	adds	r3, #24
 80023aa:	613b      	str	r3, [r7, #16]
        break;
 80023ac:	e007      	b.n	80023be <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	331c      	adds	r3, #28
 80023b4:	613b      	str	r3, [r7, #16]
        break;
 80023b6:	e002      	b.n	80023be <HAL_DAC_Start_DMA+0xf6>
        break;
 80023b8:	bf00      	nop
 80023ba:	e000      	b.n	80023be <HAL_DAC_Start_DMA+0xf6>
        break;
 80023bc:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d111      	bne.n	80023e8 <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	681a      	ldr	r2, [r3, #0]
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80023d2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	6898      	ldr	r0, [r3, #8]
 80023d8:	6879      	ldr	r1, [r7, #4]
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	693a      	ldr	r2, [r7, #16]
 80023de:	f000 fb27 	bl	8002a30 <HAL_DMA_Start_IT>
 80023e2:	4603      	mov	r3, r0
 80023e4:	75fb      	strb	r3, [r7, #23]
 80023e6:	e010      	b.n	800240a <HAL_DAC_Start_DMA+0x142>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80023f6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	68d8      	ldr	r0, [r3, #12]
 80023fc:	6879      	ldr	r1, [r7, #4]
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	693a      	ldr	r2, [r7, #16]
 8002402:	f000 fb15 	bl	8002a30 <HAL_DMA_Start_IT>
 8002406:	4603      	mov	r3, r0
 8002408:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	2200      	movs	r2, #0
 800240e:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8002410:	7dfb      	ldrb	r3, [r7, #23]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d10c      	bne.n	8002430 <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	6819      	ldr	r1, [r3, #0]
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	f003 0310 	and.w	r3, r3, #16
 8002422:	2201      	movs	r2, #1
 8002424:	409a      	lsls	r2, r3
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	430a      	orrs	r2, r1
 800242c:	601a      	str	r2, [r3, #0]
 800242e:	e005      	b.n	800243c <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	691b      	ldr	r3, [r3, #16]
 8002434:	f043 0204 	orr.w	r2, r3, #4
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 800243c:	7dfb      	ldrb	r3, [r7, #23]
}
 800243e:	4618      	mov	r0, r3
 8002440:	3718      	adds	r7, #24
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	08002799 	.word	0x08002799
 800244c:	080027bb 	.word	0x080027bb
 8002450:	080027d7 	.word	0x080027d7
 8002454:	08002855 	.word	0x08002855
 8002458:	08002877 	.word	0x08002877
 800245c:	08002893 	.word	0x08002893

08002460 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b082      	sub	sp, #8
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002472:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002476:	d120      	bne.n	80024ba <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800247e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002482:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002486:	d118      	bne.n	80024ba <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2204      	movs	r2, #4
 800248c:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to chanel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	691b      	ldr	r3, [r3, #16]
 8002492:	f043 0201 	orr.w	r2, r3, #1
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80024a2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80024b2:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 80024b4:	6878      	ldr	r0, [r7, #4]
 80024b6:	f000 f84b 	bl	8002550 <HAL_DAC_DMAUnderrunCallbackCh1>
  }
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80024c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80024c8:	d120      	bne.n	800250c <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80024d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80024d8:	d118      	bne.n	800250c <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2204      	movs	r2, #4
 80024de:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	691b      	ldr	r3, [r3, #16]
 80024e4:	f043 0202 	orr.w	r2, r3, #2
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80024f4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8002504:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8002506:	6878      	ldr	r0, [r7, #4]
 8002508:	f000 f99a 	bl	8002840 <HAL_DACEx_DMAUnderrunCallbackCh2>
  }
#endif  /* STM32L431xx STM32L432xx STM32L433xx STM32L442xx STM32L443xx                         */
        /* STM32L471xx STM32L475xx STM32L476xx STM32L485xx STM32L486xx STM32L496xx STM32L4A6xx */
        /* STM32L4P5xx STM32L4Q5xx                                                             */
        /* STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx             */
}
 800250c:	bf00      	nop
 800250e:	3708      	adds	r7, #8
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}

08002514 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002514:	b480      	push	{r7}
 8002516:	b083      	sub	sp, #12
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 800251c:	bf00      	nop
 800251e:	370c      	adds	r7, #12
 8002520:	46bd      	mov	sp, r7
 8002522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002526:	4770      	bx	lr

08002528 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002528:	b480      	push	{r7}
 800252a:	b083      	sub	sp, #12
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8002530:	bf00      	nop
 8002532:	370c      	adds	r7, #12
 8002534:	46bd      	mov	sp, r7
 8002536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253a:	4770      	bx	lr

0800253c <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800253c:	b480      	push	{r7}
 800253e:	b083      	sub	sp, #12
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8002544:	bf00      	nop
 8002546:	370c      	adds	r7, #12
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr

08002550 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002550:	b480      	push	{r7}
 8002552:	b083      	sub	sp, #12
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8002558:	bf00      	nop
 800255a:	370c      	adds	r7, #12
 800255c:	46bd      	mov	sp, r7
 800255e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002562:	4770      	bx	lr

08002564 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b088      	sub	sp, #32
 8002568:	af00      	add	r7, sp, #0
 800256a:	60f8      	str	r0, [r7, #12]
 800256c:	60b9      	str	r1, [r7, #8]
 800256e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8002570:	2300      	movs	r3, #0
 8002572:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	795b      	ldrb	r3, [r3, #5]
 8002578:	2b01      	cmp	r3, #1
 800257a:	d101      	bne.n	8002580 <HAL_DAC_ConfigChannel+0x1c>
 800257c:	2302      	movs	r3, #2
 800257e:	e107      	b.n	8002790 <HAL_DAC_ConfigChannel+0x22c>
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	2201      	movs	r2, #1
 8002584:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	2202      	movs	r2, #2
 800258a:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	2b04      	cmp	r3, #4
 8002592:	d174      	bne.n	800267e <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8002594:	f7fe fb40 	bl	8000c18 <HAL_GetTick>
 8002598:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d134      	bne.n	800260a <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80025a0:	e011      	b.n	80025c6 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80025a2:	f7fe fb39 	bl	8000c18 <HAL_GetTick>
 80025a6:	4602      	mov	r2, r0
 80025a8:	69fb      	ldr	r3, [r7, #28]
 80025aa:	1ad3      	subs	r3, r2, r3
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	d90a      	bls.n	80025c6 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	691b      	ldr	r3, [r3, #16]
 80025b4:	f043 0208 	orr.w	r2, r3, #8
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	2203      	movs	r2, #3
 80025c0:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80025c2:	2303      	movs	r3, #3
 80025c4:	e0e4      	b.n	8002790 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d1e6      	bne.n	80025a2 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 80025d4:	2001      	movs	r0, #1
 80025d6:	f7fe fb2b 	bl	8000c30 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	68ba      	ldr	r2, [r7, #8]
 80025e0:	6992      	ldr	r2, [r2, #24]
 80025e2:	641a      	str	r2, [r3, #64]	; 0x40
 80025e4:	e01e      	b.n	8002624 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80025e6:	f7fe fb17 	bl	8000c18 <HAL_GetTick>
 80025ea:	4602      	mov	r2, r0
 80025ec:	69fb      	ldr	r3, [r7, #28]
 80025ee:	1ad3      	subs	r3, r2, r3
 80025f0:	2b01      	cmp	r3, #1
 80025f2:	d90a      	bls.n	800260a <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	691b      	ldr	r3, [r3, #16]
 80025f8:	f043 0208 	orr.w	r2, r3, #8
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	2203      	movs	r2, #3
 8002604:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8002606:	2303      	movs	r3, #3
 8002608:	e0c2      	b.n	8002790 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002610:	2b00      	cmp	r3, #0
 8002612:	dbe8      	blt.n	80025e6 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8002614:	2001      	movs	r0, #1
 8002616:	f7fe fb0b 	bl	8000c30 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	68ba      	ldr	r2, [r7, #8]
 8002620:	6992      	ldr	r2, [r2, #24]
 8002622:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	f003 0310 	and.w	r3, r3, #16
 8002630:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8002634:	fa01 f303 	lsl.w	r3, r1, r3
 8002638:	43db      	mvns	r3, r3
 800263a:	ea02 0103 	and.w	r1, r2, r3
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	69da      	ldr	r2, [r3, #28]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	f003 0310 	and.w	r3, r3, #16
 8002648:	409a      	lsls	r2, r3
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	430a      	orrs	r2, r1
 8002650:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	f003 0310 	and.w	r3, r3, #16
 800265e:	21ff      	movs	r1, #255	; 0xff
 8002660:	fa01 f303 	lsl.w	r3, r1, r3
 8002664:	43db      	mvns	r3, r3
 8002666:	ea02 0103 	and.w	r1, r2, r3
 800266a:	68bb      	ldr	r3, [r7, #8]
 800266c:	6a1a      	ldr	r2, [r3, #32]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	f003 0310 	and.w	r3, r3, #16
 8002674:	409a      	lsls	r2, r3
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	430a      	orrs	r2, r1
 800267c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	691b      	ldr	r3, [r3, #16]
 8002682:	2b01      	cmp	r3, #1
 8002684:	d11d      	bne.n	80026c2 <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800268c:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	f003 0310 	and.w	r3, r3, #16
 8002694:	221f      	movs	r2, #31
 8002696:	fa02 f303 	lsl.w	r3, r2, r3
 800269a:	43db      	mvns	r3, r3
 800269c:	69ba      	ldr	r2, [r7, #24]
 800269e:	4013      	ands	r3, r2
 80026a0:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	695b      	ldr	r3, [r3, #20]
 80026a6:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	f003 0310 	and.w	r3, r3, #16
 80026ae:	697a      	ldr	r2, [r7, #20]
 80026b0:	fa02 f303 	lsl.w	r3, r2, r3
 80026b4:	69ba      	ldr	r2, [r7, #24]
 80026b6:	4313      	orrs	r3, r2
 80026b8:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	69ba      	ldr	r2, [r7, #24]
 80026c0:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026c8:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	f003 0310 	and.w	r3, r3, #16
 80026d0:	2207      	movs	r2, #7
 80026d2:	fa02 f303 	lsl.w	r3, r2, r3
 80026d6:	43db      	mvns	r3, r3
 80026d8:	69ba      	ldr	r2, [r7, #24]
 80026da:	4013      	ands	r3, r2
 80026dc:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	431a      	orrs	r2, r3
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	68db      	ldr	r3, [r3, #12]
 80026ec:	4313      	orrs	r3, r2
 80026ee:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	f003 0310 	and.w	r3, r3, #16
 80026f6:	697a      	ldr	r2, [r7, #20]
 80026f8:	fa02 f303 	lsl.w	r3, r2, r3
 80026fc:	69ba      	ldr	r2, [r7, #24]
 80026fe:	4313      	orrs	r3, r2
 8002700:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	69ba      	ldr	r2, [r7, #24]
 8002708:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	6819      	ldr	r1, [r3, #0]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	f003 0310 	and.w	r3, r3, #16
 8002716:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800271a:	fa02 f303 	lsl.w	r3, r2, r3
 800271e:	43da      	mvns	r2, r3
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	400a      	ands	r2, r1
 8002726:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	f003 0310 	and.w	r3, r3, #16
 8002736:	f640 72fc 	movw	r2, #4092	; 0xffc
 800273a:	fa02 f303 	lsl.w	r3, r2, r3
 800273e:	43db      	mvns	r3, r3
 8002740:	69ba      	ldr	r2, [r7, #24]
 8002742:	4013      	ands	r3, r2
 8002744:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	f003 0310 	and.w	r3, r3, #16
 8002752:	697a      	ldr	r2, [r7, #20]
 8002754:	fa02 f303 	lsl.w	r3, r2, r3
 8002758:	69ba      	ldr	r2, [r7, #24]
 800275a:	4313      	orrs	r3, r2
 800275c:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	69ba      	ldr	r2, [r7, #24]
 8002764:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	6819      	ldr	r1, [r3, #0]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	f003 0310 	and.w	r3, r3, #16
 8002772:	22c0      	movs	r2, #192	; 0xc0
 8002774:	fa02 f303 	lsl.w	r3, r2, r3
 8002778:	43da      	mvns	r2, r3
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	400a      	ands	r2, r1
 8002780:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	2201      	movs	r2, #1
 8002786:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	2200      	movs	r2, #0
 800278c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800278e:	2300      	movs	r3, #0
}
 8002790:	4618      	mov	r0, r3
 8002792:	3720      	adds	r7, #32
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}

08002798 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b084      	sub	sp, #16
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027a4:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 80027a6:	68f8      	ldr	r0, [r7, #12]
 80027a8:	f7ff feb4 	bl	8002514 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	2201      	movs	r2, #1
 80027b0:	711a      	strb	r2, [r3, #4]
}
 80027b2:	bf00      	nop
 80027b4:	3710      	adds	r7, #16
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}

080027ba <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80027ba:	b580      	push	{r7, lr}
 80027bc:	b084      	sub	sp, #16
 80027be:	af00      	add	r7, sp, #0
 80027c0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027c6:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 80027c8:	68f8      	ldr	r0, [r7, #12]
 80027ca:	f7ff fead 	bl	8002528 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80027ce:	bf00      	nop
 80027d0:	3710      	adds	r7, #16
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}

080027d6 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 80027d6:	b580      	push	{r7, lr}
 80027d8:	b084      	sub	sp, #16
 80027da:	af00      	add	r7, sp, #0
 80027dc:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027e2:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	691b      	ldr	r3, [r3, #16]
 80027e8:	f043 0204 	orr.w	r2, r3, #4
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 80027f0:	68f8      	ldr	r0, [r7, #12]
 80027f2:	f7ff fea3 	bl	800253c <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	2201      	movs	r2, #1
 80027fa:	711a      	strb	r2, [r3, #4]
}
 80027fc:	bf00      	nop
 80027fe:	3710      	adds	r7, #16
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}

08002804 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002804:	b480      	push	{r7}
 8002806:	b083      	sub	sp, #12
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 800280c:	bf00      	nop
 800280e:	370c      	adds	r7, #12
 8002810:	46bd      	mov	sp, r7
 8002812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002816:	4770      	bx	lr

08002818 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002818:	b480      	push	{r7}
 800281a:	b083      	sub	sp, #12
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8002820:	bf00      	nop
 8002822:	370c      	adds	r7, #12
 8002824:	46bd      	mov	sp, r7
 8002826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282a:	4770      	bx	lr

0800282c <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800282c:	b480      	push	{r7}
 800282e:	b083      	sub	sp, #12
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8002834:	bf00      	nop
 8002836:	370c      	adds	r7, #12
 8002838:	46bd      	mov	sp, r7
 800283a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283e:	4770      	bx	lr

08002840 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002840:	b480      	push	{r7}
 8002842:	b083      	sub	sp, #12
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8002848:	bf00      	nop
 800284a:	370c      	adds	r7, #12
 800284c:	46bd      	mov	sp, r7
 800284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002852:	4770      	bx	lr

08002854 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b084      	sub	sp, #16
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002860:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8002862:	68f8      	ldr	r0, [r7, #12]
 8002864:	f7ff ffce 	bl	8002804 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	2201      	movs	r2, #1
 800286c:	711a      	strb	r2, [r3, #4]
}
 800286e:	bf00      	nop
 8002870:	3710      	adds	r7, #16
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}

08002876 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8002876:	b580      	push	{r7, lr}
 8002878:	b084      	sub	sp, #16
 800287a:	af00      	add	r7, sp, #0
 800287c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002882:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8002884:	68f8      	ldr	r0, [r7, #12]
 8002886:	f7ff ffc7 	bl	8002818 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800288a:	bf00      	nop
 800288c:	3710      	adds	r7, #16
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}

08002892 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8002892:	b580      	push	{r7, lr}
 8002894:	b084      	sub	sp, #16
 8002896:	af00      	add	r7, sp, #0
 8002898:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800289e:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	691b      	ldr	r3, [r3, #16]
 80028a4:	f043 0204 	orr.w	r2, r3, #4
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 80028ac:	68f8      	ldr	r0, [r7, #12]
 80028ae:	f7ff ffbd 	bl	800282c <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	2201      	movs	r2, #1
 80028b6:	711a      	strb	r2, [r3, #4]
}
 80028b8:	bf00      	nop
 80028ba:	3710      	adds	r7, #16
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}

080028c0 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b085      	sub	sp, #20
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d101      	bne.n	80028d2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	e098      	b.n	8002a04 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	461a      	mov	r2, r3
 80028d8:	4b4d      	ldr	r3, [pc, #308]	; (8002a10 <HAL_DMA_Init+0x150>)
 80028da:	429a      	cmp	r2, r3
 80028dc:	d80f      	bhi.n	80028fe <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	461a      	mov	r2, r3
 80028e4:	4b4b      	ldr	r3, [pc, #300]	; (8002a14 <HAL_DMA_Init+0x154>)
 80028e6:	4413      	add	r3, r2
 80028e8:	4a4b      	ldr	r2, [pc, #300]	; (8002a18 <HAL_DMA_Init+0x158>)
 80028ea:	fba2 2303 	umull	r2, r3, r2, r3
 80028ee:	091b      	lsrs	r3, r3, #4
 80028f0:	009a      	lsls	r2, r3, #2
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	4a48      	ldr	r2, [pc, #288]	; (8002a1c <HAL_DMA_Init+0x15c>)
 80028fa:	641a      	str	r2, [r3, #64]	; 0x40
 80028fc:	e00e      	b.n	800291c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	461a      	mov	r2, r3
 8002904:	4b46      	ldr	r3, [pc, #280]	; (8002a20 <HAL_DMA_Init+0x160>)
 8002906:	4413      	add	r3, r2
 8002908:	4a43      	ldr	r2, [pc, #268]	; (8002a18 <HAL_DMA_Init+0x158>)
 800290a:	fba2 2303 	umull	r2, r3, r2, r3
 800290e:	091b      	lsrs	r3, r3, #4
 8002910:	009a      	lsls	r2, r3, #2
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	4a42      	ldr	r2, [pc, #264]	; (8002a24 <HAL_DMA_Init+0x164>)
 800291a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2202      	movs	r2, #2
 8002920:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002932:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002936:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002940:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	691b      	ldr	r3, [r3, #16]
 8002946:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800294c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	699b      	ldr	r3, [r3, #24]
 8002952:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002958:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6a1b      	ldr	r3, [r3, #32]
 800295e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002960:	68fa      	ldr	r2, [r7, #12]
 8002962:	4313      	orrs	r3, r2
 8002964:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	68fa      	ldr	r2, [r7, #12]
 800296c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	689b      	ldr	r3, [r3, #8]
 8002972:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002976:	d039      	beq.n	80029ec <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297c:	4a27      	ldr	r2, [pc, #156]	; (8002a1c <HAL_DMA_Init+0x15c>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d11a      	bne.n	80029b8 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002982:	4b29      	ldr	r3, [pc, #164]	; (8002a28 <HAL_DMA_Init+0x168>)
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800298a:	f003 031c 	and.w	r3, r3, #28
 800298e:	210f      	movs	r1, #15
 8002990:	fa01 f303 	lsl.w	r3, r1, r3
 8002994:	43db      	mvns	r3, r3
 8002996:	4924      	ldr	r1, [pc, #144]	; (8002a28 <HAL_DMA_Init+0x168>)
 8002998:	4013      	ands	r3, r2
 800299a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800299c:	4b22      	ldr	r3, [pc, #136]	; (8002a28 <HAL_DMA_Init+0x168>)
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6859      	ldr	r1, [r3, #4]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029a8:	f003 031c 	and.w	r3, r3, #28
 80029ac:	fa01 f303 	lsl.w	r3, r1, r3
 80029b0:	491d      	ldr	r1, [pc, #116]	; (8002a28 <HAL_DMA_Init+0x168>)
 80029b2:	4313      	orrs	r3, r2
 80029b4:	600b      	str	r3, [r1, #0]
 80029b6:	e019      	b.n	80029ec <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80029b8:	4b1c      	ldr	r3, [pc, #112]	; (8002a2c <HAL_DMA_Init+0x16c>)
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029c0:	f003 031c 	and.w	r3, r3, #28
 80029c4:	210f      	movs	r1, #15
 80029c6:	fa01 f303 	lsl.w	r3, r1, r3
 80029ca:	43db      	mvns	r3, r3
 80029cc:	4917      	ldr	r1, [pc, #92]	; (8002a2c <HAL_DMA_Init+0x16c>)
 80029ce:	4013      	ands	r3, r2
 80029d0:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80029d2:	4b16      	ldr	r3, [pc, #88]	; (8002a2c <HAL_DMA_Init+0x16c>)
 80029d4:	681a      	ldr	r2, [r3, #0]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6859      	ldr	r1, [r3, #4]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029de:	f003 031c 	and.w	r3, r3, #28
 80029e2:	fa01 f303 	lsl.w	r3, r1, r3
 80029e6:	4911      	ldr	r1, [pc, #68]	; (8002a2c <HAL_DMA_Init+0x16c>)
 80029e8:	4313      	orrs	r3, r2
 80029ea:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2200      	movs	r2, #0
 80029f0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2201      	movs	r2, #1
 80029f6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2200      	movs	r2, #0
 80029fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002a02:	2300      	movs	r3, #0
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	3714      	adds	r7, #20
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0e:	4770      	bx	lr
 8002a10:	40020407 	.word	0x40020407
 8002a14:	bffdfff8 	.word	0xbffdfff8
 8002a18:	cccccccd 	.word	0xcccccccd
 8002a1c:	40020000 	.word	0x40020000
 8002a20:	bffdfbf8 	.word	0xbffdfbf8
 8002a24:	40020400 	.word	0x40020400
 8002a28:	400200a8 	.word	0x400200a8
 8002a2c:	400204a8 	.word	0x400204a8

08002a30 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b086      	sub	sp, #24
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	60f8      	str	r0, [r7, #12]
 8002a38:	60b9      	str	r1, [r7, #8]
 8002a3a:	607a      	str	r2, [r7, #4]
 8002a3c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002a48:	2b01      	cmp	r3, #1
 8002a4a:	d101      	bne.n	8002a50 <HAL_DMA_Start_IT+0x20>
 8002a4c:	2302      	movs	r3, #2
 8002a4e:	e04b      	b.n	8002ae8 <HAL_DMA_Start_IT+0xb8>
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	2201      	movs	r2, #1
 8002a54:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002a5e:	b2db      	uxtb	r3, r3
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	d13a      	bne.n	8002ada <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	2202      	movs	r2, #2
 8002a68:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	681a      	ldr	r2, [r3, #0]
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f022 0201 	bic.w	r2, r2, #1
 8002a80:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	687a      	ldr	r2, [r7, #4]
 8002a86:	68b9      	ldr	r1, [r7, #8]
 8002a88:	68f8      	ldr	r0, [r7, #12]
 8002a8a:	f000 f8e0 	bl	8002c4e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d008      	beq.n	8002aa8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	681a      	ldr	r2, [r3, #0]
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f042 020e 	orr.w	r2, r2, #14
 8002aa4:	601a      	str	r2, [r3, #0]
 8002aa6:	e00f      	b.n	8002ac8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	681a      	ldr	r2, [r3, #0]
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f022 0204 	bic.w	r2, r2, #4
 8002ab6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f042 020a 	orr.w	r2, r2, #10
 8002ac6:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	681a      	ldr	r2, [r3, #0]
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f042 0201 	orr.w	r2, r2, #1
 8002ad6:	601a      	str	r2, [r3, #0]
 8002ad8:	e005      	b.n	8002ae6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	2200      	movs	r2, #0
 8002ade:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002ae2:	2302      	movs	r3, #2
 8002ae4:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002ae6:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	3718      	adds	r7, #24
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}

08002af0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b084      	sub	sp, #16
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b0c:	f003 031c 	and.w	r3, r3, #28
 8002b10:	2204      	movs	r2, #4
 8002b12:	409a      	lsls	r2, r3
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	4013      	ands	r3, r2
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d026      	beq.n	8002b6a <HAL_DMA_IRQHandler+0x7a>
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	f003 0304 	and.w	r3, r3, #4
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d021      	beq.n	8002b6a <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f003 0320 	and.w	r3, r3, #32
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d107      	bne.n	8002b44 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	681a      	ldr	r2, [r3, #0]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f022 0204 	bic.w	r2, r2, #4
 8002b42:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b48:	f003 021c 	and.w	r2, r3, #28
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b50:	2104      	movs	r1, #4
 8002b52:	fa01 f202 	lsl.w	r2, r1, r2
 8002b56:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d071      	beq.n	8002c44 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b64:	6878      	ldr	r0, [r7, #4]
 8002b66:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8002b68:	e06c      	b.n	8002c44 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b6e:	f003 031c 	and.w	r3, r3, #28
 8002b72:	2202      	movs	r2, #2
 8002b74:	409a      	lsls	r2, r3
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	4013      	ands	r3, r2
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d02e      	beq.n	8002bdc <HAL_DMA_IRQHandler+0xec>
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	f003 0302 	and.w	r3, r3, #2
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d029      	beq.n	8002bdc <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 0320 	and.w	r3, r3, #32
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d10b      	bne.n	8002bae <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	681a      	ldr	r2, [r3, #0]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f022 020a 	bic.w	r2, r2, #10
 8002ba4:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2201      	movs	r2, #1
 8002baa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bb2:	f003 021c 	and.w	r2, r3, #28
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bba:	2102      	movs	r1, #2
 8002bbc:	fa01 f202 	lsl.w	r2, r1, r2
 8002bc0:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d038      	beq.n	8002c44 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002bda:	e033      	b.n	8002c44 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002be0:	f003 031c 	and.w	r3, r3, #28
 8002be4:	2208      	movs	r2, #8
 8002be6:	409a      	lsls	r2, r3
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	4013      	ands	r3, r2
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d02a      	beq.n	8002c46 <HAL_DMA_IRQHandler+0x156>
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	f003 0308 	and.w	r3, r3, #8
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d025      	beq.n	8002c46 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	681a      	ldr	r2, [r3, #0]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f022 020e 	bic.w	r2, r2, #14
 8002c08:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c0e:	f003 021c 	and.w	r2, r3, #28
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c16:	2101      	movs	r1, #1
 8002c18:	fa01 f202 	lsl.w	r2, r1, r2
 8002c1c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2201      	movs	r2, #1
 8002c22:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2201      	movs	r2, #1
 8002c28:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d004      	beq.n	8002c46 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c40:	6878      	ldr	r0, [r7, #4]
 8002c42:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002c44:	bf00      	nop
 8002c46:	bf00      	nop
}
 8002c48:	3710      	adds	r7, #16
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}

08002c4e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c4e:	b480      	push	{r7}
 8002c50:	b085      	sub	sp, #20
 8002c52:	af00      	add	r7, sp, #0
 8002c54:	60f8      	str	r0, [r7, #12]
 8002c56:	60b9      	str	r1, [r7, #8]
 8002c58:	607a      	str	r2, [r7, #4]
 8002c5a:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c60:	f003 021c 	and.w	r2, r3, #28
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c68:	2101      	movs	r1, #1
 8002c6a:	fa01 f202 	lsl.w	r2, r1, r2
 8002c6e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	683a      	ldr	r2, [r7, #0]
 8002c76:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	2b10      	cmp	r3, #16
 8002c7e:	d108      	bne.n	8002c92 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	687a      	ldr	r2, [r7, #4]
 8002c86:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	68ba      	ldr	r2, [r7, #8]
 8002c8e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002c90:	e007      	b.n	8002ca2 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	68ba      	ldr	r2, [r7, #8]
 8002c98:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	687a      	ldr	r2, [r7, #4]
 8002ca0:	60da      	str	r2, [r3, #12]
}
 8002ca2:	bf00      	nop
 8002ca4:	3714      	adds	r7, #20
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr
	...

08002cb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b087      	sub	sp, #28
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
 8002cb8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002cbe:	e166      	b.n	8002f8e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	681a      	ldr	r2, [r3, #0]
 8002cc4:	2101      	movs	r1, #1
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	fa01 f303 	lsl.w	r3, r1, r3
 8002ccc:	4013      	ands	r3, r2
 8002cce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	f000 8158 	beq.w	8002f88 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	f003 0303 	and.w	r3, r3, #3
 8002ce0:	2b01      	cmp	r3, #1
 8002ce2:	d005      	beq.n	8002cf0 <HAL_GPIO_Init+0x40>
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	f003 0303 	and.w	r3, r3, #3
 8002cec:	2b02      	cmp	r3, #2
 8002cee:	d130      	bne.n	8002d52 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	005b      	lsls	r3, r3, #1
 8002cfa:	2203      	movs	r2, #3
 8002cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002d00:	43db      	mvns	r3, r3
 8002d02:	693a      	ldr	r2, [r7, #16]
 8002d04:	4013      	ands	r3, r2
 8002d06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	68da      	ldr	r2, [r3, #12]
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	005b      	lsls	r3, r3, #1
 8002d10:	fa02 f303 	lsl.w	r3, r2, r3
 8002d14:	693a      	ldr	r2, [r7, #16]
 8002d16:	4313      	orrs	r3, r2
 8002d18:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	693a      	ldr	r2, [r7, #16]
 8002d1e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002d26:	2201      	movs	r2, #1
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2e:	43db      	mvns	r3, r3
 8002d30:	693a      	ldr	r2, [r7, #16]
 8002d32:	4013      	ands	r3, r2
 8002d34:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	091b      	lsrs	r3, r3, #4
 8002d3c:	f003 0201 	and.w	r2, r3, #1
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	fa02 f303 	lsl.w	r3, r2, r3
 8002d46:	693a      	ldr	r2, [r7, #16]
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	693a      	ldr	r2, [r7, #16]
 8002d50:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	f003 0303 	and.w	r3, r3, #3
 8002d5a:	2b03      	cmp	r3, #3
 8002d5c:	d017      	beq.n	8002d8e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	68db      	ldr	r3, [r3, #12]
 8002d62:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	005b      	lsls	r3, r3, #1
 8002d68:	2203      	movs	r2, #3
 8002d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6e:	43db      	mvns	r3, r3
 8002d70:	693a      	ldr	r2, [r7, #16]
 8002d72:	4013      	ands	r3, r2
 8002d74:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	689a      	ldr	r2, [r3, #8]
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	005b      	lsls	r3, r3, #1
 8002d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d82:	693a      	ldr	r2, [r7, #16]
 8002d84:	4313      	orrs	r3, r2
 8002d86:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	693a      	ldr	r2, [r7, #16]
 8002d8c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	f003 0303 	and.w	r3, r3, #3
 8002d96:	2b02      	cmp	r3, #2
 8002d98:	d123      	bne.n	8002de2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	08da      	lsrs	r2, r3, #3
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	3208      	adds	r2, #8
 8002da2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002da6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	f003 0307 	and.w	r3, r3, #7
 8002dae:	009b      	lsls	r3, r3, #2
 8002db0:	220f      	movs	r2, #15
 8002db2:	fa02 f303 	lsl.w	r3, r2, r3
 8002db6:	43db      	mvns	r3, r3
 8002db8:	693a      	ldr	r2, [r7, #16]
 8002dba:	4013      	ands	r3, r2
 8002dbc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	691a      	ldr	r2, [r3, #16]
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	f003 0307 	and.w	r3, r3, #7
 8002dc8:	009b      	lsls	r3, r3, #2
 8002dca:	fa02 f303 	lsl.w	r3, r2, r3
 8002dce:	693a      	ldr	r2, [r7, #16]
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	08da      	lsrs	r2, r3, #3
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	3208      	adds	r2, #8
 8002ddc:	6939      	ldr	r1, [r7, #16]
 8002dde:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	005b      	lsls	r3, r3, #1
 8002dec:	2203      	movs	r2, #3
 8002dee:	fa02 f303 	lsl.w	r3, r2, r3
 8002df2:	43db      	mvns	r3, r3
 8002df4:	693a      	ldr	r2, [r7, #16]
 8002df6:	4013      	ands	r3, r2
 8002df8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	f003 0203 	and.w	r2, r3, #3
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	005b      	lsls	r3, r3, #1
 8002e06:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0a:	693a      	ldr	r2, [r7, #16]
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	693a      	ldr	r2, [r7, #16]
 8002e14:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	f000 80b2 	beq.w	8002f88 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e24:	4b61      	ldr	r3, [pc, #388]	; (8002fac <HAL_GPIO_Init+0x2fc>)
 8002e26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e28:	4a60      	ldr	r2, [pc, #384]	; (8002fac <HAL_GPIO_Init+0x2fc>)
 8002e2a:	f043 0301 	orr.w	r3, r3, #1
 8002e2e:	6613      	str	r3, [r2, #96]	; 0x60
 8002e30:	4b5e      	ldr	r3, [pc, #376]	; (8002fac <HAL_GPIO_Init+0x2fc>)
 8002e32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e34:	f003 0301 	and.w	r3, r3, #1
 8002e38:	60bb      	str	r3, [r7, #8]
 8002e3a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002e3c:	4a5c      	ldr	r2, [pc, #368]	; (8002fb0 <HAL_GPIO_Init+0x300>)
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	089b      	lsrs	r3, r3, #2
 8002e42:	3302      	adds	r3, #2
 8002e44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e48:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	f003 0303 	and.w	r3, r3, #3
 8002e50:	009b      	lsls	r3, r3, #2
 8002e52:	220f      	movs	r2, #15
 8002e54:	fa02 f303 	lsl.w	r3, r2, r3
 8002e58:	43db      	mvns	r3, r3
 8002e5a:	693a      	ldr	r2, [r7, #16]
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002e66:	d02b      	beq.n	8002ec0 <HAL_GPIO_Init+0x210>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	4a52      	ldr	r2, [pc, #328]	; (8002fb4 <HAL_GPIO_Init+0x304>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d025      	beq.n	8002ebc <HAL_GPIO_Init+0x20c>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	4a51      	ldr	r2, [pc, #324]	; (8002fb8 <HAL_GPIO_Init+0x308>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d01f      	beq.n	8002eb8 <HAL_GPIO_Init+0x208>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	4a50      	ldr	r2, [pc, #320]	; (8002fbc <HAL_GPIO_Init+0x30c>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d019      	beq.n	8002eb4 <HAL_GPIO_Init+0x204>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	4a4f      	ldr	r2, [pc, #316]	; (8002fc0 <HAL_GPIO_Init+0x310>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d013      	beq.n	8002eb0 <HAL_GPIO_Init+0x200>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	4a4e      	ldr	r2, [pc, #312]	; (8002fc4 <HAL_GPIO_Init+0x314>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d00d      	beq.n	8002eac <HAL_GPIO_Init+0x1fc>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	4a4d      	ldr	r2, [pc, #308]	; (8002fc8 <HAL_GPIO_Init+0x318>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d007      	beq.n	8002ea8 <HAL_GPIO_Init+0x1f8>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	4a4c      	ldr	r2, [pc, #304]	; (8002fcc <HAL_GPIO_Init+0x31c>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d101      	bne.n	8002ea4 <HAL_GPIO_Init+0x1f4>
 8002ea0:	2307      	movs	r3, #7
 8002ea2:	e00e      	b.n	8002ec2 <HAL_GPIO_Init+0x212>
 8002ea4:	2308      	movs	r3, #8
 8002ea6:	e00c      	b.n	8002ec2 <HAL_GPIO_Init+0x212>
 8002ea8:	2306      	movs	r3, #6
 8002eaa:	e00a      	b.n	8002ec2 <HAL_GPIO_Init+0x212>
 8002eac:	2305      	movs	r3, #5
 8002eae:	e008      	b.n	8002ec2 <HAL_GPIO_Init+0x212>
 8002eb0:	2304      	movs	r3, #4
 8002eb2:	e006      	b.n	8002ec2 <HAL_GPIO_Init+0x212>
 8002eb4:	2303      	movs	r3, #3
 8002eb6:	e004      	b.n	8002ec2 <HAL_GPIO_Init+0x212>
 8002eb8:	2302      	movs	r3, #2
 8002eba:	e002      	b.n	8002ec2 <HAL_GPIO_Init+0x212>
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	e000      	b.n	8002ec2 <HAL_GPIO_Init+0x212>
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	697a      	ldr	r2, [r7, #20]
 8002ec4:	f002 0203 	and.w	r2, r2, #3
 8002ec8:	0092      	lsls	r2, r2, #2
 8002eca:	4093      	lsls	r3, r2
 8002ecc:	693a      	ldr	r2, [r7, #16]
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002ed2:	4937      	ldr	r1, [pc, #220]	; (8002fb0 <HAL_GPIO_Init+0x300>)
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	089b      	lsrs	r3, r3, #2
 8002ed8:	3302      	adds	r3, #2
 8002eda:	693a      	ldr	r2, [r7, #16]
 8002edc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002ee0:	4b3b      	ldr	r3, [pc, #236]	; (8002fd0 <HAL_GPIO_Init+0x320>)
 8002ee2:	689b      	ldr	r3, [r3, #8]
 8002ee4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	43db      	mvns	r3, r3
 8002eea:	693a      	ldr	r2, [r7, #16]
 8002eec:	4013      	ands	r3, r2
 8002eee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d003      	beq.n	8002f04 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8002efc:	693a      	ldr	r2, [r7, #16]
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	4313      	orrs	r3, r2
 8002f02:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002f04:	4a32      	ldr	r2, [pc, #200]	; (8002fd0 <HAL_GPIO_Init+0x320>)
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002f0a:	4b31      	ldr	r3, [pc, #196]	; (8002fd0 <HAL_GPIO_Init+0x320>)
 8002f0c:	68db      	ldr	r3, [r3, #12]
 8002f0e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	43db      	mvns	r3, r3
 8002f14:	693a      	ldr	r2, [r7, #16]
 8002f16:	4013      	ands	r3, r2
 8002f18:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d003      	beq.n	8002f2e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8002f26:	693a      	ldr	r2, [r7, #16]
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002f2e:	4a28      	ldr	r2, [pc, #160]	; (8002fd0 <HAL_GPIO_Init+0x320>)
 8002f30:	693b      	ldr	r3, [r7, #16]
 8002f32:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002f34:	4b26      	ldr	r3, [pc, #152]	; (8002fd0 <HAL_GPIO_Init+0x320>)
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	43db      	mvns	r3, r3
 8002f3e:	693a      	ldr	r2, [r7, #16]
 8002f40:	4013      	ands	r3, r2
 8002f42:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d003      	beq.n	8002f58 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8002f50:	693a      	ldr	r2, [r7, #16]
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	4313      	orrs	r3, r2
 8002f56:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002f58:	4a1d      	ldr	r2, [pc, #116]	; (8002fd0 <HAL_GPIO_Init+0x320>)
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002f5e:	4b1c      	ldr	r3, [pc, #112]	; (8002fd0 <HAL_GPIO_Init+0x320>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	43db      	mvns	r3, r3
 8002f68:	693a      	ldr	r2, [r7, #16]
 8002f6a:	4013      	ands	r3, r2
 8002f6c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d003      	beq.n	8002f82 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8002f7a:	693a      	ldr	r2, [r7, #16]
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002f82:	4a13      	ldr	r2, [pc, #76]	; (8002fd0 <HAL_GPIO_Init+0x320>)
 8002f84:	693b      	ldr	r3, [r7, #16]
 8002f86:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	3301      	adds	r3, #1
 8002f8c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	681a      	ldr	r2, [r3, #0]
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	fa22 f303 	lsr.w	r3, r2, r3
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	f47f ae91 	bne.w	8002cc0 <HAL_GPIO_Init+0x10>
  }
}
 8002f9e:	bf00      	nop
 8002fa0:	bf00      	nop
 8002fa2:	371c      	adds	r7, #28
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002faa:	4770      	bx	lr
 8002fac:	40021000 	.word	0x40021000
 8002fb0:	40010000 	.word	0x40010000
 8002fb4:	48000400 	.word	0x48000400
 8002fb8:	48000800 	.word	0x48000800
 8002fbc:	48000c00 	.word	0x48000c00
 8002fc0:	48001000 	.word	0x48001000
 8002fc4:	48001400 	.word	0x48001400
 8002fc8:	48001800 	.word	0x48001800
 8002fcc:	48001c00 	.word	0x48001c00
 8002fd0:	40010400 	.word	0x40010400

08002fd4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b083      	sub	sp, #12
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
 8002fdc:	460b      	mov	r3, r1
 8002fde:	807b      	strh	r3, [r7, #2]
 8002fe0:	4613      	mov	r3, r2
 8002fe2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002fe4:	787b      	ldrb	r3, [r7, #1]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d003      	beq.n	8002ff2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002fea:	887a      	ldrh	r2, [r7, #2]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002ff0:	e002      	b.n	8002ff8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002ff2:	887a      	ldrh	r2, [r7, #2]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002ff8:	bf00      	nop
 8002ffa:	370c      	adds	r7, #12
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003002:	4770      	bx	lr

08003004 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003004:	b480      	push	{r7}
 8003006:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003008:	4b04      	ldr	r3, [pc, #16]	; (800301c <HAL_PWREx_GetVoltageRange+0x18>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003010:	4618      	mov	r0, r3
 8003012:	46bd      	mov	sp, r7
 8003014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003018:	4770      	bx	lr
 800301a:	bf00      	nop
 800301c:	40007000 	.word	0x40007000

08003020 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003020:	b480      	push	{r7}
 8003022:	b085      	sub	sp, #20
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800302e:	d130      	bne.n	8003092 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003030:	4b23      	ldr	r3, [pc, #140]	; (80030c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003038:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800303c:	d038      	beq.n	80030b0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800303e:	4b20      	ldr	r3, [pc, #128]	; (80030c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003046:	4a1e      	ldr	r2, [pc, #120]	; (80030c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003048:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800304c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800304e:	4b1d      	ldr	r3, [pc, #116]	; (80030c4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	2232      	movs	r2, #50	; 0x32
 8003054:	fb02 f303 	mul.w	r3, r2, r3
 8003058:	4a1b      	ldr	r2, [pc, #108]	; (80030c8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800305a:	fba2 2303 	umull	r2, r3, r2, r3
 800305e:	0c9b      	lsrs	r3, r3, #18
 8003060:	3301      	adds	r3, #1
 8003062:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003064:	e002      	b.n	800306c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	3b01      	subs	r3, #1
 800306a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800306c:	4b14      	ldr	r3, [pc, #80]	; (80030c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800306e:	695b      	ldr	r3, [r3, #20]
 8003070:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003074:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003078:	d102      	bne.n	8003080 <HAL_PWREx_ControlVoltageScaling+0x60>
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d1f2      	bne.n	8003066 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003080:	4b0f      	ldr	r3, [pc, #60]	; (80030c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003082:	695b      	ldr	r3, [r3, #20]
 8003084:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003088:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800308c:	d110      	bne.n	80030b0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800308e:	2303      	movs	r3, #3
 8003090:	e00f      	b.n	80030b2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003092:	4b0b      	ldr	r3, [pc, #44]	; (80030c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800309a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800309e:	d007      	beq.n	80030b0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80030a0:	4b07      	ldr	r3, [pc, #28]	; (80030c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80030a8:	4a05      	ldr	r2, [pc, #20]	; (80030c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80030ae:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80030b0:	2300      	movs	r3, #0
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	3714      	adds	r7, #20
 80030b6:	46bd      	mov	sp, r7
 80030b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030bc:	4770      	bx	lr
 80030be:	bf00      	nop
 80030c0:	40007000 	.word	0x40007000
 80030c4:	20000000 	.word	0x20000000
 80030c8:	431bde83 	.word	0x431bde83

080030cc <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80030cc:	b480      	push	{r7}
 80030ce:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80030d0:	4b05      	ldr	r3, [pc, #20]	; (80030e8 <HAL_PWREx_EnableVddIO2+0x1c>)
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	4a04      	ldr	r2, [pc, #16]	; (80030e8 <HAL_PWREx_EnableVddIO2+0x1c>)
 80030d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80030da:	6053      	str	r3, [r2, #4]
}
 80030dc:	bf00      	nop
 80030de:	46bd      	mov	sp, r7
 80030e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e4:	4770      	bx	lr
 80030e6:	bf00      	nop
 80030e8:	40007000 	.word	0x40007000

080030ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b088      	sub	sp, #32
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d102      	bne.n	8003100 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	f000 bc16 	b.w	800392c <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003100:	4b96      	ldr	r3, [pc, #600]	; (800335c <HAL_RCC_OscConfig+0x270>)
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	f003 030c 	and.w	r3, r3, #12
 8003108:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800310a:	4b94      	ldr	r3, [pc, #592]	; (800335c <HAL_RCC_OscConfig+0x270>)
 800310c:	68db      	ldr	r3, [r3, #12]
 800310e:	f003 0303 	and.w	r3, r3, #3
 8003112:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f003 0310 	and.w	r3, r3, #16
 800311c:	2b00      	cmp	r3, #0
 800311e:	f000 80e4 	beq.w	80032ea <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003122:	69bb      	ldr	r3, [r7, #24]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d007      	beq.n	8003138 <HAL_RCC_OscConfig+0x4c>
 8003128:	69bb      	ldr	r3, [r7, #24]
 800312a:	2b0c      	cmp	r3, #12
 800312c:	f040 808b 	bne.w	8003246 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	2b01      	cmp	r3, #1
 8003134:	f040 8087 	bne.w	8003246 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003138:	4b88      	ldr	r3, [pc, #544]	; (800335c <HAL_RCC_OscConfig+0x270>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f003 0302 	and.w	r3, r3, #2
 8003140:	2b00      	cmp	r3, #0
 8003142:	d005      	beq.n	8003150 <HAL_RCC_OscConfig+0x64>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	699b      	ldr	r3, [r3, #24]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d101      	bne.n	8003150 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	e3ed      	b.n	800392c <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6a1a      	ldr	r2, [r3, #32]
 8003154:	4b81      	ldr	r3, [pc, #516]	; (800335c <HAL_RCC_OscConfig+0x270>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f003 0308 	and.w	r3, r3, #8
 800315c:	2b00      	cmp	r3, #0
 800315e:	d004      	beq.n	800316a <HAL_RCC_OscConfig+0x7e>
 8003160:	4b7e      	ldr	r3, [pc, #504]	; (800335c <HAL_RCC_OscConfig+0x270>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003168:	e005      	b.n	8003176 <HAL_RCC_OscConfig+0x8a>
 800316a:	4b7c      	ldr	r3, [pc, #496]	; (800335c <HAL_RCC_OscConfig+0x270>)
 800316c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003170:	091b      	lsrs	r3, r3, #4
 8003172:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003176:	4293      	cmp	r3, r2
 8003178:	d223      	bcs.n	80031c2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6a1b      	ldr	r3, [r3, #32]
 800317e:	4618      	mov	r0, r3
 8003180:	f000 fd48 	bl	8003c14 <RCC_SetFlashLatencyFromMSIRange>
 8003184:	4603      	mov	r3, r0
 8003186:	2b00      	cmp	r3, #0
 8003188:	d001      	beq.n	800318e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	e3ce      	b.n	800392c <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800318e:	4b73      	ldr	r3, [pc, #460]	; (800335c <HAL_RCC_OscConfig+0x270>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a72      	ldr	r2, [pc, #456]	; (800335c <HAL_RCC_OscConfig+0x270>)
 8003194:	f043 0308 	orr.w	r3, r3, #8
 8003198:	6013      	str	r3, [r2, #0]
 800319a:	4b70      	ldr	r3, [pc, #448]	; (800335c <HAL_RCC_OscConfig+0x270>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6a1b      	ldr	r3, [r3, #32]
 80031a6:	496d      	ldr	r1, [pc, #436]	; (800335c <HAL_RCC_OscConfig+0x270>)
 80031a8:	4313      	orrs	r3, r2
 80031aa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80031ac:	4b6b      	ldr	r3, [pc, #428]	; (800335c <HAL_RCC_OscConfig+0x270>)
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	69db      	ldr	r3, [r3, #28]
 80031b8:	021b      	lsls	r3, r3, #8
 80031ba:	4968      	ldr	r1, [pc, #416]	; (800335c <HAL_RCC_OscConfig+0x270>)
 80031bc:	4313      	orrs	r3, r2
 80031be:	604b      	str	r3, [r1, #4]
 80031c0:	e025      	b.n	800320e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80031c2:	4b66      	ldr	r3, [pc, #408]	; (800335c <HAL_RCC_OscConfig+0x270>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a65      	ldr	r2, [pc, #404]	; (800335c <HAL_RCC_OscConfig+0x270>)
 80031c8:	f043 0308 	orr.w	r3, r3, #8
 80031cc:	6013      	str	r3, [r2, #0]
 80031ce:	4b63      	ldr	r3, [pc, #396]	; (800335c <HAL_RCC_OscConfig+0x270>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6a1b      	ldr	r3, [r3, #32]
 80031da:	4960      	ldr	r1, [pc, #384]	; (800335c <HAL_RCC_OscConfig+0x270>)
 80031dc:	4313      	orrs	r3, r2
 80031de:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80031e0:	4b5e      	ldr	r3, [pc, #376]	; (800335c <HAL_RCC_OscConfig+0x270>)
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	69db      	ldr	r3, [r3, #28]
 80031ec:	021b      	lsls	r3, r3, #8
 80031ee:	495b      	ldr	r1, [pc, #364]	; (800335c <HAL_RCC_OscConfig+0x270>)
 80031f0:	4313      	orrs	r3, r2
 80031f2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80031f4:	69bb      	ldr	r3, [r7, #24]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d109      	bne.n	800320e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6a1b      	ldr	r3, [r3, #32]
 80031fe:	4618      	mov	r0, r3
 8003200:	f000 fd08 	bl	8003c14 <RCC_SetFlashLatencyFromMSIRange>
 8003204:	4603      	mov	r3, r0
 8003206:	2b00      	cmp	r3, #0
 8003208:	d001      	beq.n	800320e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	e38e      	b.n	800392c <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800320e:	f000 fc75 	bl	8003afc <HAL_RCC_GetSysClockFreq>
 8003212:	4602      	mov	r2, r0
 8003214:	4b51      	ldr	r3, [pc, #324]	; (800335c <HAL_RCC_OscConfig+0x270>)
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	091b      	lsrs	r3, r3, #4
 800321a:	f003 030f 	and.w	r3, r3, #15
 800321e:	4950      	ldr	r1, [pc, #320]	; (8003360 <HAL_RCC_OscConfig+0x274>)
 8003220:	5ccb      	ldrb	r3, [r1, r3]
 8003222:	f003 031f 	and.w	r3, r3, #31
 8003226:	fa22 f303 	lsr.w	r3, r2, r3
 800322a:	4a4e      	ldr	r2, [pc, #312]	; (8003364 <HAL_RCC_OscConfig+0x278>)
 800322c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800322e:	4b4e      	ldr	r3, [pc, #312]	; (8003368 <HAL_RCC_OscConfig+0x27c>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4618      	mov	r0, r3
 8003234:	f7fd fca0 	bl	8000b78 <HAL_InitTick>
 8003238:	4603      	mov	r3, r0
 800323a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800323c:	7bfb      	ldrb	r3, [r7, #15]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d052      	beq.n	80032e8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003242:	7bfb      	ldrb	r3, [r7, #15]
 8003244:	e372      	b.n	800392c <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	699b      	ldr	r3, [r3, #24]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d032      	beq.n	80032b4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800324e:	4b43      	ldr	r3, [pc, #268]	; (800335c <HAL_RCC_OscConfig+0x270>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a42      	ldr	r2, [pc, #264]	; (800335c <HAL_RCC_OscConfig+0x270>)
 8003254:	f043 0301 	orr.w	r3, r3, #1
 8003258:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800325a:	f7fd fcdd 	bl	8000c18 <HAL_GetTick>
 800325e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003260:	e008      	b.n	8003274 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003262:	f7fd fcd9 	bl	8000c18 <HAL_GetTick>
 8003266:	4602      	mov	r2, r0
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	1ad3      	subs	r3, r2, r3
 800326c:	2b02      	cmp	r3, #2
 800326e:	d901      	bls.n	8003274 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003270:	2303      	movs	r3, #3
 8003272:	e35b      	b.n	800392c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003274:	4b39      	ldr	r3, [pc, #228]	; (800335c <HAL_RCC_OscConfig+0x270>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f003 0302 	and.w	r3, r3, #2
 800327c:	2b00      	cmp	r3, #0
 800327e:	d0f0      	beq.n	8003262 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003280:	4b36      	ldr	r3, [pc, #216]	; (800335c <HAL_RCC_OscConfig+0x270>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a35      	ldr	r2, [pc, #212]	; (800335c <HAL_RCC_OscConfig+0x270>)
 8003286:	f043 0308 	orr.w	r3, r3, #8
 800328a:	6013      	str	r3, [r2, #0]
 800328c:	4b33      	ldr	r3, [pc, #204]	; (800335c <HAL_RCC_OscConfig+0x270>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6a1b      	ldr	r3, [r3, #32]
 8003298:	4930      	ldr	r1, [pc, #192]	; (800335c <HAL_RCC_OscConfig+0x270>)
 800329a:	4313      	orrs	r3, r2
 800329c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800329e:	4b2f      	ldr	r3, [pc, #188]	; (800335c <HAL_RCC_OscConfig+0x270>)
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	69db      	ldr	r3, [r3, #28]
 80032aa:	021b      	lsls	r3, r3, #8
 80032ac:	492b      	ldr	r1, [pc, #172]	; (800335c <HAL_RCC_OscConfig+0x270>)
 80032ae:	4313      	orrs	r3, r2
 80032b0:	604b      	str	r3, [r1, #4]
 80032b2:	e01a      	b.n	80032ea <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80032b4:	4b29      	ldr	r3, [pc, #164]	; (800335c <HAL_RCC_OscConfig+0x270>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a28      	ldr	r2, [pc, #160]	; (800335c <HAL_RCC_OscConfig+0x270>)
 80032ba:	f023 0301 	bic.w	r3, r3, #1
 80032be:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80032c0:	f7fd fcaa 	bl	8000c18 <HAL_GetTick>
 80032c4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80032c6:	e008      	b.n	80032da <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80032c8:	f7fd fca6 	bl	8000c18 <HAL_GetTick>
 80032cc:	4602      	mov	r2, r0
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	1ad3      	subs	r3, r2, r3
 80032d2:	2b02      	cmp	r3, #2
 80032d4:	d901      	bls.n	80032da <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80032d6:	2303      	movs	r3, #3
 80032d8:	e328      	b.n	800392c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80032da:	4b20      	ldr	r3, [pc, #128]	; (800335c <HAL_RCC_OscConfig+0x270>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f003 0302 	and.w	r3, r3, #2
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d1f0      	bne.n	80032c8 <HAL_RCC_OscConfig+0x1dc>
 80032e6:	e000      	b.n	80032ea <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80032e8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 0301 	and.w	r3, r3, #1
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d073      	beq.n	80033de <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80032f6:	69bb      	ldr	r3, [r7, #24]
 80032f8:	2b08      	cmp	r3, #8
 80032fa:	d005      	beq.n	8003308 <HAL_RCC_OscConfig+0x21c>
 80032fc:	69bb      	ldr	r3, [r7, #24]
 80032fe:	2b0c      	cmp	r3, #12
 8003300:	d10e      	bne.n	8003320 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	2b03      	cmp	r3, #3
 8003306:	d10b      	bne.n	8003320 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003308:	4b14      	ldr	r3, [pc, #80]	; (800335c <HAL_RCC_OscConfig+0x270>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003310:	2b00      	cmp	r3, #0
 8003312:	d063      	beq.n	80033dc <HAL_RCC_OscConfig+0x2f0>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d15f      	bne.n	80033dc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800331c:	2301      	movs	r3, #1
 800331e:	e305      	b.n	800392c <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003328:	d106      	bne.n	8003338 <HAL_RCC_OscConfig+0x24c>
 800332a:	4b0c      	ldr	r3, [pc, #48]	; (800335c <HAL_RCC_OscConfig+0x270>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a0b      	ldr	r2, [pc, #44]	; (800335c <HAL_RCC_OscConfig+0x270>)
 8003330:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003334:	6013      	str	r3, [r2, #0]
 8003336:	e025      	b.n	8003384 <HAL_RCC_OscConfig+0x298>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003340:	d114      	bne.n	800336c <HAL_RCC_OscConfig+0x280>
 8003342:	4b06      	ldr	r3, [pc, #24]	; (800335c <HAL_RCC_OscConfig+0x270>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a05      	ldr	r2, [pc, #20]	; (800335c <HAL_RCC_OscConfig+0x270>)
 8003348:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800334c:	6013      	str	r3, [r2, #0]
 800334e:	4b03      	ldr	r3, [pc, #12]	; (800335c <HAL_RCC_OscConfig+0x270>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a02      	ldr	r2, [pc, #8]	; (800335c <HAL_RCC_OscConfig+0x270>)
 8003354:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003358:	6013      	str	r3, [r2, #0]
 800335a:	e013      	b.n	8003384 <HAL_RCC_OscConfig+0x298>
 800335c:	40021000 	.word	0x40021000
 8003360:	080058d8 	.word	0x080058d8
 8003364:	20000000 	.word	0x20000000
 8003368:	20000004 	.word	0x20000004
 800336c:	4ba0      	ldr	r3, [pc, #640]	; (80035f0 <HAL_RCC_OscConfig+0x504>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a9f      	ldr	r2, [pc, #636]	; (80035f0 <HAL_RCC_OscConfig+0x504>)
 8003372:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003376:	6013      	str	r3, [r2, #0]
 8003378:	4b9d      	ldr	r3, [pc, #628]	; (80035f0 <HAL_RCC_OscConfig+0x504>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a9c      	ldr	r2, [pc, #624]	; (80035f0 <HAL_RCC_OscConfig+0x504>)
 800337e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003382:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d013      	beq.n	80033b4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800338c:	f7fd fc44 	bl	8000c18 <HAL_GetTick>
 8003390:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003392:	e008      	b.n	80033a6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003394:	f7fd fc40 	bl	8000c18 <HAL_GetTick>
 8003398:	4602      	mov	r2, r0
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	1ad3      	subs	r3, r2, r3
 800339e:	2b64      	cmp	r3, #100	; 0x64
 80033a0:	d901      	bls.n	80033a6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80033a2:	2303      	movs	r3, #3
 80033a4:	e2c2      	b.n	800392c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80033a6:	4b92      	ldr	r3, [pc, #584]	; (80035f0 <HAL_RCC_OscConfig+0x504>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d0f0      	beq.n	8003394 <HAL_RCC_OscConfig+0x2a8>
 80033b2:	e014      	b.n	80033de <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033b4:	f7fd fc30 	bl	8000c18 <HAL_GetTick>
 80033b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80033ba:	e008      	b.n	80033ce <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033bc:	f7fd fc2c 	bl	8000c18 <HAL_GetTick>
 80033c0:	4602      	mov	r2, r0
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	1ad3      	subs	r3, r2, r3
 80033c6:	2b64      	cmp	r3, #100	; 0x64
 80033c8:	d901      	bls.n	80033ce <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80033ca:	2303      	movs	r3, #3
 80033cc:	e2ae      	b.n	800392c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80033ce:	4b88      	ldr	r3, [pc, #544]	; (80035f0 <HAL_RCC_OscConfig+0x504>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d1f0      	bne.n	80033bc <HAL_RCC_OscConfig+0x2d0>
 80033da:	e000      	b.n	80033de <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f003 0302 	and.w	r3, r3, #2
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d060      	beq.n	80034ac <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80033ea:	69bb      	ldr	r3, [r7, #24]
 80033ec:	2b04      	cmp	r3, #4
 80033ee:	d005      	beq.n	80033fc <HAL_RCC_OscConfig+0x310>
 80033f0:	69bb      	ldr	r3, [r7, #24]
 80033f2:	2b0c      	cmp	r3, #12
 80033f4:	d119      	bne.n	800342a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	2b02      	cmp	r3, #2
 80033fa:	d116      	bne.n	800342a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80033fc:	4b7c      	ldr	r3, [pc, #496]	; (80035f0 <HAL_RCC_OscConfig+0x504>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003404:	2b00      	cmp	r3, #0
 8003406:	d005      	beq.n	8003414 <HAL_RCC_OscConfig+0x328>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	68db      	ldr	r3, [r3, #12]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d101      	bne.n	8003414 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003410:	2301      	movs	r3, #1
 8003412:	e28b      	b.n	800392c <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003414:	4b76      	ldr	r3, [pc, #472]	; (80035f0 <HAL_RCC_OscConfig+0x504>)
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	691b      	ldr	r3, [r3, #16]
 8003420:	061b      	lsls	r3, r3, #24
 8003422:	4973      	ldr	r1, [pc, #460]	; (80035f0 <HAL_RCC_OscConfig+0x504>)
 8003424:	4313      	orrs	r3, r2
 8003426:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003428:	e040      	b.n	80034ac <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	68db      	ldr	r3, [r3, #12]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d023      	beq.n	800347a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003432:	4b6f      	ldr	r3, [pc, #444]	; (80035f0 <HAL_RCC_OscConfig+0x504>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a6e      	ldr	r2, [pc, #440]	; (80035f0 <HAL_RCC_OscConfig+0x504>)
 8003438:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800343c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800343e:	f7fd fbeb 	bl	8000c18 <HAL_GetTick>
 8003442:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003444:	e008      	b.n	8003458 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003446:	f7fd fbe7 	bl	8000c18 <HAL_GetTick>
 800344a:	4602      	mov	r2, r0
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	1ad3      	subs	r3, r2, r3
 8003450:	2b02      	cmp	r3, #2
 8003452:	d901      	bls.n	8003458 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003454:	2303      	movs	r3, #3
 8003456:	e269      	b.n	800392c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003458:	4b65      	ldr	r3, [pc, #404]	; (80035f0 <HAL_RCC_OscConfig+0x504>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003460:	2b00      	cmp	r3, #0
 8003462:	d0f0      	beq.n	8003446 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003464:	4b62      	ldr	r3, [pc, #392]	; (80035f0 <HAL_RCC_OscConfig+0x504>)
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	691b      	ldr	r3, [r3, #16]
 8003470:	061b      	lsls	r3, r3, #24
 8003472:	495f      	ldr	r1, [pc, #380]	; (80035f0 <HAL_RCC_OscConfig+0x504>)
 8003474:	4313      	orrs	r3, r2
 8003476:	604b      	str	r3, [r1, #4]
 8003478:	e018      	b.n	80034ac <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800347a:	4b5d      	ldr	r3, [pc, #372]	; (80035f0 <HAL_RCC_OscConfig+0x504>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a5c      	ldr	r2, [pc, #368]	; (80035f0 <HAL_RCC_OscConfig+0x504>)
 8003480:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003484:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003486:	f7fd fbc7 	bl	8000c18 <HAL_GetTick>
 800348a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800348c:	e008      	b.n	80034a0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800348e:	f7fd fbc3 	bl	8000c18 <HAL_GetTick>
 8003492:	4602      	mov	r2, r0
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	1ad3      	subs	r3, r2, r3
 8003498:	2b02      	cmp	r3, #2
 800349a:	d901      	bls.n	80034a0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800349c:	2303      	movs	r3, #3
 800349e:	e245      	b.n	800392c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80034a0:	4b53      	ldr	r3, [pc, #332]	; (80035f0 <HAL_RCC_OscConfig+0x504>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d1f0      	bne.n	800348e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f003 0308 	and.w	r3, r3, #8
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d03c      	beq.n	8003532 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	695b      	ldr	r3, [r3, #20]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d01c      	beq.n	80034fa <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034c0:	4b4b      	ldr	r3, [pc, #300]	; (80035f0 <HAL_RCC_OscConfig+0x504>)
 80034c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034c6:	4a4a      	ldr	r2, [pc, #296]	; (80035f0 <HAL_RCC_OscConfig+0x504>)
 80034c8:	f043 0301 	orr.w	r3, r3, #1
 80034cc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034d0:	f7fd fba2 	bl	8000c18 <HAL_GetTick>
 80034d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80034d6:	e008      	b.n	80034ea <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034d8:	f7fd fb9e 	bl	8000c18 <HAL_GetTick>
 80034dc:	4602      	mov	r2, r0
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	1ad3      	subs	r3, r2, r3
 80034e2:	2b02      	cmp	r3, #2
 80034e4:	d901      	bls.n	80034ea <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80034e6:	2303      	movs	r3, #3
 80034e8:	e220      	b.n	800392c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80034ea:	4b41      	ldr	r3, [pc, #260]	; (80035f0 <HAL_RCC_OscConfig+0x504>)
 80034ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034f0:	f003 0302 	and.w	r3, r3, #2
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d0ef      	beq.n	80034d8 <HAL_RCC_OscConfig+0x3ec>
 80034f8:	e01b      	b.n	8003532 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034fa:	4b3d      	ldr	r3, [pc, #244]	; (80035f0 <HAL_RCC_OscConfig+0x504>)
 80034fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003500:	4a3b      	ldr	r2, [pc, #236]	; (80035f0 <HAL_RCC_OscConfig+0x504>)
 8003502:	f023 0301 	bic.w	r3, r3, #1
 8003506:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800350a:	f7fd fb85 	bl	8000c18 <HAL_GetTick>
 800350e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003510:	e008      	b.n	8003524 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003512:	f7fd fb81 	bl	8000c18 <HAL_GetTick>
 8003516:	4602      	mov	r2, r0
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	1ad3      	subs	r3, r2, r3
 800351c:	2b02      	cmp	r3, #2
 800351e:	d901      	bls.n	8003524 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003520:	2303      	movs	r3, #3
 8003522:	e203      	b.n	800392c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003524:	4b32      	ldr	r3, [pc, #200]	; (80035f0 <HAL_RCC_OscConfig+0x504>)
 8003526:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800352a:	f003 0302 	and.w	r3, r3, #2
 800352e:	2b00      	cmp	r3, #0
 8003530:	d1ef      	bne.n	8003512 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f003 0304 	and.w	r3, r3, #4
 800353a:	2b00      	cmp	r3, #0
 800353c:	f000 80a6 	beq.w	800368c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003540:	2300      	movs	r3, #0
 8003542:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003544:	4b2a      	ldr	r3, [pc, #168]	; (80035f0 <HAL_RCC_OscConfig+0x504>)
 8003546:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003548:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800354c:	2b00      	cmp	r3, #0
 800354e:	d10d      	bne.n	800356c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003550:	4b27      	ldr	r3, [pc, #156]	; (80035f0 <HAL_RCC_OscConfig+0x504>)
 8003552:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003554:	4a26      	ldr	r2, [pc, #152]	; (80035f0 <HAL_RCC_OscConfig+0x504>)
 8003556:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800355a:	6593      	str	r3, [r2, #88]	; 0x58
 800355c:	4b24      	ldr	r3, [pc, #144]	; (80035f0 <HAL_RCC_OscConfig+0x504>)
 800355e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003560:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003564:	60bb      	str	r3, [r7, #8]
 8003566:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003568:	2301      	movs	r3, #1
 800356a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800356c:	4b21      	ldr	r3, [pc, #132]	; (80035f4 <HAL_RCC_OscConfig+0x508>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003574:	2b00      	cmp	r3, #0
 8003576:	d118      	bne.n	80035aa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003578:	4b1e      	ldr	r3, [pc, #120]	; (80035f4 <HAL_RCC_OscConfig+0x508>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a1d      	ldr	r2, [pc, #116]	; (80035f4 <HAL_RCC_OscConfig+0x508>)
 800357e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003582:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003584:	f7fd fb48 	bl	8000c18 <HAL_GetTick>
 8003588:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800358a:	e008      	b.n	800359e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800358c:	f7fd fb44 	bl	8000c18 <HAL_GetTick>
 8003590:	4602      	mov	r2, r0
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	1ad3      	subs	r3, r2, r3
 8003596:	2b02      	cmp	r3, #2
 8003598:	d901      	bls.n	800359e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800359a:	2303      	movs	r3, #3
 800359c:	e1c6      	b.n	800392c <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800359e:	4b15      	ldr	r3, [pc, #84]	; (80035f4 <HAL_RCC_OscConfig+0x508>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d0f0      	beq.n	800358c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	2b01      	cmp	r3, #1
 80035b0:	d108      	bne.n	80035c4 <HAL_RCC_OscConfig+0x4d8>
 80035b2:	4b0f      	ldr	r3, [pc, #60]	; (80035f0 <HAL_RCC_OscConfig+0x504>)
 80035b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035b8:	4a0d      	ldr	r2, [pc, #52]	; (80035f0 <HAL_RCC_OscConfig+0x504>)
 80035ba:	f043 0301 	orr.w	r3, r3, #1
 80035be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80035c2:	e029      	b.n	8003618 <HAL_RCC_OscConfig+0x52c>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	689b      	ldr	r3, [r3, #8]
 80035c8:	2b05      	cmp	r3, #5
 80035ca:	d115      	bne.n	80035f8 <HAL_RCC_OscConfig+0x50c>
 80035cc:	4b08      	ldr	r3, [pc, #32]	; (80035f0 <HAL_RCC_OscConfig+0x504>)
 80035ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035d2:	4a07      	ldr	r2, [pc, #28]	; (80035f0 <HAL_RCC_OscConfig+0x504>)
 80035d4:	f043 0304 	orr.w	r3, r3, #4
 80035d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80035dc:	4b04      	ldr	r3, [pc, #16]	; (80035f0 <HAL_RCC_OscConfig+0x504>)
 80035de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035e2:	4a03      	ldr	r2, [pc, #12]	; (80035f0 <HAL_RCC_OscConfig+0x504>)
 80035e4:	f043 0301 	orr.w	r3, r3, #1
 80035e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80035ec:	e014      	b.n	8003618 <HAL_RCC_OscConfig+0x52c>
 80035ee:	bf00      	nop
 80035f0:	40021000 	.word	0x40021000
 80035f4:	40007000 	.word	0x40007000
 80035f8:	4b9d      	ldr	r3, [pc, #628]	; (8003870 <HAL_RCC_OscConfig+0x784>)
 80035fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035fe:	4a9c      	ldr	r2, [pc, #624]	; (8003870 <HAL_RCC_OscConfig+0x784>)
 8003600:	f023 0301 	bic.w	r3, r3, #1
 8003604:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003608:	4b99      	ldr	r3, [pc, #612]	; (8003870 <HAL_RCC_OscConfig+0x784>)
 800360a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800360e:	4a98      	ldr	r2, [pc, #608]	; (8003870 <HAL_RCC_OscConfig+0x784>)
 8003610:	f023 0304 	bic.w	r3, r3, #4
 8003614:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d016      	beq.n	800364e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003620:	f7fd fafa 	bl	8000c18 <HAL_GetTick>
 8003624:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003626:	e00a      	b.n	800363e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003628:	f7fd faf6 	bl	8000c18 <HAL_GetTick>
 800362c:	4602      	mov	r2, r0
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	1ad3      	subs	r3, r2, r3
 8003632:	f241 3288 	movw	r2, #5000	; 0x1388
 8003636:	4293      	cmp	r3, r2
 8003638:	d901      	bls.n	800363e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800363a:	2303      	movs	r3, #3
 800363c:	e176      	b.n	800392c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800363e:	4b8c      	ldr	r3, [pc, #560]	; (8003870 <HAL_RCC_OscConfig+0x784>)
 8003640:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003644:	f003 0302 	and.w	r3, r3, #2
 8003648:	2b00      	cmp	r3, #0
 800364a:	d0ed      	beq.n	8003628 <HAL_RCC_OscConfig+0x53c>
 800364c:	e015      	b.n	800367a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800364e:	f7fd fae3 	bl	8000c18 <HAL_GetTick>
 8003652:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003654:	e00a      	b.n	800366c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003656:	f7fd fadf 	bl	8000c18 <HAL_GetTick>
 800365a:	4602      	mov	r2, r0
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	1ad3      	subs	r3, r2, r3
 8003660:	f241 3288 	movw	r2, #5000	; 0x1388
 8003664:	4293      	cmp	r3, r2
 8003666:	d901      	bls.n	800366c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003668:	2303      	movs	r3, #3
 800366a:	e15f      	b.n	800392c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800366c:	4b80      	ldr	r3, [pc, #512]	; (8003870 <HAL_RCC_OscConfig+0x784>)
 800366e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003672:	f003 0302 	and.w	r3, r3, #2
 8003676:	2b00      	cmp	r3, #0
 8003678:	d1ed      	bne.n	8003656 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800367a:	7ffb      	ldrb	r3, [r7, #31]
 800367c:	2b01      	cmp	r3, #1
 800367e:	d105      	bne.n	800368c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003680:	4b7b      	ldr	r3, [pc, #492]	; (8003870 <HAL_RCC_OscConfig+0x784>)
 8003682:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003684:	4a7a      	ldr	r2, [pc, #488]	; (8003870 <HAL_RCC_OscConfig+0x784>)
 8003686:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800368a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f003 0320 	and.w	r3, r3, #32
 8003694:	2b00      	cmp	r3, #0
 8003696:	d03c      	beq.n	8003712 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800369c:	2b00      	cmp	r3, #0
 800369e:	d01c      	beq.n	80036da <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80036a0:	4b73      	ldr	r3, [pc, #460]	; (8003870 <HAL_RCC_OscConfig+0x784>)
 80036a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80036a6:	4a72      	ldr	r2, [pc, #456]	; (8003870 <HAL_RCC_OscConfig+0x784>)
 80036a8:	f043 0301 	orr.w	r3, r3, #1
 80036ac:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036b0:	f7fd fab2 	bl	8000c18 <HAL_GetTick>
 80036b4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80036b6:	e008      	b.n	80036ca <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80036b8:	f7fd faae 	bl	8000c18 <HAL_GetTick>
 80036bc:	4602      	mov	r2, r0
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	1ad3      	subs	r3, r2, r3
 80036c2:	2b02      	cmp	r3, #2
 80036c4:	d901      	bls.n	80036ca <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80036c6:	2303      	movs	r3, #3
 80036c8:	e130      	b.n	800392c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80036ca:	4b69      	ldr	r3, [pc, #420]	; (8003870 <HAL_RCC_OscConfig+0x784>)
 80036cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80036d0:	f003 0302 	and.w	r3, r3, #2
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d0ef      	beq.n	80036b8 <HAL_RCC_OscConfig+0x5cc>
 80036d8:	e01b      	b.n	8003712 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80036da:	4b65      	ldr	r3, [pc, #404]	; (8003870 <HAL_RCC_OscConfig+0x784>)
 80036dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80036e0:	4a63      	ldr	r2, [pc, #396]	; (8003870 <HAL_RCC_OscConfig+0x784>)
 80036e2:	f023 0301 	bic.w	r3, r3, #1
 80036e6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036ea:	f7fd fa95 	bl	8000c18 <HAL_GetTick>
 80036ee:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80036f0:	e008      	b.n	8003704 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80036f2:	f7fd fa91 	bl	8000c18 <HAL_GetTick>
 80036f6:	4602      	mov	r2, r0
 80036f8:	693b      	ldr	r3, [r7, #16]
 80036fa:	1ad3      	subs	r3, r2, r3
 80036fc:	2b02      	cmp	r3, #2
 80036fe:	d901      	bls.n	8003704 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003700:	2303      	movs	r3, #3
 8003702:	e113      	b.n	800392c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003704:	4b5a      	ldr	r3, [pc, #360]	; (8003870 <HAL_RCC_OscConfig+0x784>)
 8003706:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800370a:	f003 0302 	and.w	r3, r3, #2
 800370e:	2b00      	cmp	r3, #0
 8003710:	d1ef      	bne.n	80036f2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003716:	2b00      	cmp	r3, #0
 8003718:	f000 8107 	beq.w	800392a <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003720:	2b02      	cmp	r3, #2
 8003722:	f040 80cf 	bne.w	80038c4 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003726:	4b52      	ldr	r3, [pc, #328]	; (8003870 <HAL_RCC_OscConfig+0x784>)
 8003728:	68db      	ldr	r3, [r3, #12]
 800372a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	f003 0203 	and.w	r2, r3, #3
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003736:	429a      	cmp	r2, r3
 8003738:	d12c      	bne.n	8003794 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003744:	3b01      	subs	r3, #1
 8003746:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003748:	429a      	cmp	r2, r3
 800374a:	d123      	bne.n	8003794 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800374c:	697b      	ldr	r3, [r7, #20]
 800374e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003756:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003758:	429a      	cmp	r2, r3
 800375a:	d11b      	bne.n	8003794 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003766:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003768:	429a      	cmp	r2, r3
 800376a:	d113      	bne.n	8003794 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800376c:	697b      	ldr	r3, [r7, #20]
 800376e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003776:	085b      	lsrs	r3, r3, #1
 8003778:	3b01      	subs	r3, #1
 800377a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800377c:	429a      	cmp	r2, r3
 800377e:	d109      	bne.n	8003794 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003780:	697b      	ldr	r3, [r7, #20]
 8003782:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378a:	085b      	lsrs	r3, r3, #1
 800378c:	3b01      	subs	r3, #1
 800378e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003790:	429a      	cmp	r2, r3
 8003792:	d071      	beq.n	8003878 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003794:	69bb      	ldr	r3, [r7, #24]
 8003796:	2b0c      	cmp	r3, #12
 8003798:	d068      	beq.n	800386c <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800379a:	4b35      	ldr	r3, [pc, #212]	; (8003870 <HAL_RCC_OscConfig+0x784>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d105      	bne.n	80037b2 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80037a6:	4b32      	ldr	r3, [pc, #200]	; (8003870 <HAL_RCC_OscConfig+0x784>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d001      	beq.n	80037b6 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
 80037b4:	e0ba      	b.n	800392c <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80037b6:	4b2e      	ldr	r3, [pc, #184]	; (8003870 <HAL_RCC_OscConfig+0x784>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a2d      	ldr	r2, [pc, #180]	; (8003870 <HAL_RCC_OscConfig+0x784>)
 80037bc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80037c0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80037c2:	f7fd fa29 	bl	8000c18 <HAL_GetTick>
 80037c6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037c8:	e008      	b.n	80037dc <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037ca:	f7fd fa25 	bl	8000c18 <HAL_GetTick>
 80037ce:	4602      	mov	r2, r0
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	1ad3      	subs	r3, r2, r3
 80037d4:	2b02      	cmp	r3, #2
 80037d6:	d901      	bls.n	80037dc <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80037d8:	2303      	movs	r3, #3
 80037da:	e0a7      	b.n	800392c <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037dc:	4b24      	ldr	r3, [pc, #144]	; (8003870 <HAL_RCC_OscConfig+0x784>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d1f0      	bne.n	80037ca <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80037e8:	4b21      	ldr	r3, [pc, #132]	; (8003870 <HAL_RCC_OscConfig+0x784>)
 80037ea:	68da      	ldr	r2, [r3, #12]
 80037ec:	4b21      	ldr	r3, [pc, #132]	; (8003874 <HAL_RCC_OscConfig+0x788>)
 80037ee:	4013      	ands	r3, r2
 80037f0:	687a      	ldr	r2, [r7, #4]
 80037f2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80037f4:	687a      	ldr	r2, [r7, #4]
 80037f6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80037f8:	3a01      	subs	r2, #1
 80037fa:	0112      	lsls	r2, r2, #4
 80037fc:	4311      	orrs	r1, r2
 80037fe:	687a      	ldr	r2, [r7, #4]
 8003800:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003802:	0212      	lsls	r2, r2, #8
 8003804:	4311      	orrs	r1, r2
 8003806:	687a      	ldr	r2, [r7, #4]
 8003808:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800380a:	0852      	lsrs	r2, r2, #1
 800380c:	3a01      	subs	r2, #1
 800380e:	0552      	lsls	r2, r2, #21
 8003810:	4311      	orrs	r1, r2
 8003812:	687a      	ldr	r2, [r7, #4]
 8003814:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003816:	0852      	lsrs	r2, r2, #1
 8003818:	3a01      	subs	r2, #1
 800381a:	0652      	lsls	r2, r2, #25
 800381c:	4311      	orrs	r1, r2
 800381e:	687a      	ldr	r2, [r7, #4]
 8003820:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003822:	06d2      	lsls	r2, r2, #27
 8003824:	430a      	orrs	r2, r1
 8003826:	4912      	ldr	r1, [pc, #72]	; (8003870 <HAL_RCC_OscConfig+0x784>)
 8003828:	4313      	orrs	r3, r2
 800382a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800382c:	4b10      	ldr	r3, [pc, #64]	; (8003870 <HAL_RCC_OscConfig+0x784>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a0f      	ldr	r2, [pc, #60]	; (8003870 <HAL_RCC_OscConfig+0x784>)
 8003832:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003836:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003838:	4b0d      	ldr	r3, [pc, #52]	; (8003870 <HAL_RCC_OscConfig+0x784>)
 800383a:	68db      	ldr	r3, [r3, #12]
 800383c:	4a0c      	ldr	r2, [pc, #48]	; (8003870 <HAL_RCC_OscConfig+0x784>)
 800383e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003842:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003844:	f7fd f9e8 	bl	8000c18 <HAL_GetTick>
 8003848:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800384a:	e008      	b.n	800385e <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800384c:	f7fd f9e4 	bl	8000c18 <HAL_GetTick>
 8003850:	4602      	mov	r2, r0
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	1ad3      	subs	r3, r2, r3
 8003856:	2b02      	cmp	r3, #2
 8003858:	d901      	bls.n	800385e <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800385a:	2303      	movs	r3, #3
 800385c:	e066      	b.n	800392c <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800385e:	4b04      	ldr	r3, [pc, #16]	; (8003870 <HAL_RCC_OscConfig+0x784>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003866:	2b00      	cmp	r3, #0
 8003868:	d0f0      	beq.n	800384c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800386a:	e05e      	b.n	800392a <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800386c:	2301      	movs	r3, #1
 800386e:	e05d      	b.n	800392c <HAL_RCC_OscConfig+0x840>
 8003870:	40021000 	.word	0x40021000
 8003874:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003878:	4b2e      	ldr	r3, [pc, #184]	; (8003934 <HAL_RCC_OscConfig+0x848>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003880:	2b00      	cmp	r3, #0
 8003882:	d152      	bne.n	800392a <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003884:	4b2b      	ldr	r3, [pc, #172]	; (8003934 <HAL_RCC_OscConfig+0x848>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a2a      	ldr	r2, [pc, #168]	; (8003934 <HAL_RCC_OscConfig+0x848>)
 800388a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800388e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003890:	4b28      	ldr	r3, [pc, #160]	; (8003934 <HAL_RCC_OscConfig+0x848>)
 8003892:	68db      	ldr	r3, [r3, #12]
 8003894:	4a27      	ldr	r2, [pc, #156]	; (8003934 <HAL_RCC_OscConfig+0x848>)
 8003896:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800389a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800389c:	f7fd f9bc 	bl	8000c18 <HAL_GetTick>
 80038a0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038a2:	e008      	b.n	80038b6 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038a4:	f7fd f9b8 	bl	8000c18 <HAL_GetTick>
 80038a8:	4602      	mov	r2, r0
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	1ad3      	subs	r3, r2, r3
 80038ae:	2b02      	cmp	r3, #2
 80038b0:	d901      	bls.n	80038b6 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80038b2:	2303      	movs	r3, #3
 80038b4:	e03a      	b.n	800392c <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038b6:	4b1f      	ldr	r3, [pc, #124]	; (8003934 <HAL_RCC_OscConfig+0x848>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d0f0      	beq.n	80038a4 <HAL_RCC_OscConfig+0x7b8>
 80038c2:	e032      	b.n	800392a <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80038c4:	69bb      	ldr	r3, [r7, #24]
 80038c6:	2b0c      	cmp	r3, #12
 80038c8:	d02d      	beq.n	8003926 <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038ca:	4b1a      	ldr	r3, [pc, #104]	; (8003934 <HAL_RCC_OscConfig+0x848>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a19      	ldr	r2, [pc, #100]	; (8003934 <HAL_RCC_OscConfig+0x848>)
 80038d0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80038d4:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80038d6:	4b17      	ldr	r3, [pc, #92]	; (8003934 <HAL_RCC_OscConfig+0x848>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d105      	bne.n	80038ee <HAL_RCC_OscConfig+0x802>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80038e2:	4b14      	ldr	r3, [pc, #80]	; (8003934 <HAL_RCC_OscConfig+0x848>)
 80038e4:	68db      	ldr	r3, [r3, #12]
 80038e6:	4a13      	ldr	r2, [pc, #76]	; (8003934 <HAL_RCC_OscConfig+0x848>)
 80038e8:	f023 0303 	bic.w	r3, r3, #3
 80038ec:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80038ee:	4b11      	ldr	r3, [pc, #68]	; (8003934 <HAL_RCC_OscConfig+0x848>)
 80038f0:	68db      	ldr	r3, [r3, #12]
 80038f2:	4a10      	ldr	r2, [pc, #64]	; (8003934 <HAL_RCC_OscConfig+0x848>)
 80038f4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80038f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038fc:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038fe:	f7fd f98b 	bl	8000c18 <HAL_GetTick>
 8003902:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003904:	e008      	b.n	8003918 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003906:	f7fd f987 	bl	8000c18 <HAL_GetTick>
 800390a:	4602      	mov	r2, r0
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	1ad3      	subs	r3, r2, r3
 8003910:	2b02      	cmp	r3, #2
 8003912:	d901      	bls.n	8003918 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8003914:	2303      	movs	r3, #3
 8003916:	e009      	b.n	800392c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003918:	4b06      	ldr	r3, [pc, #24]	; (8003934 <HAL_RCC_OscConfig+0x848>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003920:	2b00      	cmp	r3, #0
 8003922:	d1f0      	bne.n	8003906 <HAL_RCC_OscConfig+0x81a>
 8003924:	e001      	b.n	800392a <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	e000      	b.n	800392c <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 800392a:	2300      	movs	r3, #0
}
 800392c:	4618      	mov	r0, r3
 800392e:	3720      	adds	r7, #32
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}
 8003934:	40021000 	.word	0x40021000

08003938 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b084      	sub	sp, #16
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
 8003940:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d101      	bne.n	800394c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003948:	2301      	movs	r3, #1
 800394a:	e0c8      	b.n	8003ade <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800394c:	4b66      	ldr	r3, [pc, #408]	; (8003ae8 <HAL_RCC_ClockConfig+0x1b0>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f003 0307 	and.w	r3, r3, #7
 8003954:	683a      	ldr	r2, [r7, #0]
 8003956:	429a      	cmp	r2, r3
 8003958:	d910      	bls.n	800397c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800395a:	4b63      	ldr	r3, [pc, #396]	; (8003ae8 <HAL_RCC_ClockConfig+0x1b0>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f023 0207 	bic.w	r2, r3, #7
 8003962:	4961      	ldr	r1, [pc, #388]	; (8003ae8 <HAL_RCC_ClockConfig+0x1b0>)
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	4313      	orrs	r3, r2
 8003968:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800396a:	4b5f      	ldr	r3, [pc, #380]	; (8003ae8 <HAL_RCC_ClockConfig+0x1b0>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f003 0307 	and.w	r3, r3, #7
 8003972:	683a      	ldr	r2, [r7, #0]
 8003974:	429a      	cmp	r2, r3
 8003976:	d001      	beq.n	800397c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003978:	2301      	movs	r3, #1
 800397a:	e0b0      	b.n	8003ade <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f003 0301 	and.w	r3, r3, #1
 8003984:	2b00      	cmp	r3, #0
 8003986:	d04c      	beq.n	8003a22 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	2b03      	cmp	r3, #3
 800398e:	d107      	bne.n	80039a0 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003990:	4b56      	ldr	r3, [pc, #344]	; (8003aec <HAL_RCC_ClockConfig+0x1b4>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003998:	2b00      	cmp	r3, #0
 800399a:	d121      	bne.n	80039e0 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800399c:	2301      	movs	r3, #1
 800399e:	e09e      	b.n	8003ade <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	2b02      	cmp	r3, #2
 80039a6:	d107      	bne.n	80039b8 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80039a8:	4b50      	ldr	r3, [pc, #320]	; (8003aec <HAL_RCC_ClockConfig+0x1b4>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d115      	bne.n	80039e0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80039b4:	2301      	movs	r3, #1
 80039b6:	e092      	b.n	8003ade <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d107      	bne.n	80039d0 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80039c0:	4b4a      	ldr	r3, [pc, #296]	; (8003aec <HAL_RCC_ClockConfig+0x1b4>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f003 0302 	and.w	r3, r3, #2
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d109      	bne.n	80039e0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80039cc:	2301      	movs	r3, #1
 80039ce:	e086      	b.n	8003ade <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80039d0:	4b46      	ldr	r3, [pc, #280]	; (8003aec <HAL_RCC_ClockConfig+0x1b4>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d101      	bne.n	80039e0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80039dc:	2301      	movs	r3, #1
 80039de:	e07e      	b.n	8003ade <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80039e0:	4b42      	ldr	r3, [pc, #264]	; (8003aec <HAL_RCC_ClockConfig+0x1b4>)
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	f023 0203 	bic.w	r2, r3, #3
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	493f      	ldr	r1, [pc, #252]	; (8003aec <HAL_RCC_ClockConfig+0x1b4>)
 80039ee:	4313      	orrs	r3, r2
 80039f0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039f2:	f7fd f911 	bl	8000c18 <HAL_GetTick>
 80039f6:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039f8:	e00a      	b.n	8003a10 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039fa:	f7fd f90d 	bl	8000c18 <HAL_GetTick>
 80039fe:	4602      	mov	r2, r0
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	1ad3      	subs	r3, r2, r3
 8003a04:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d901      	bls.n	8003a10 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003a0c:	2303      	movs	r3, #3
 8003a0e:	e066      	b.n	8003ade <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a10:	4b36      	ldr	r3, [pc, #216]	; (8003aec <HAL_RCC_ClockConfig+0x1b4>)
 8003a12:	689b      	ldr	r3, [r3, #8]
 8003a14:	f003 020c 	and.w	r2, r3, #12
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	009b      	lsls	r3, r3, #2
 8003a1e:	429a      	cmp	r2, r3
 8003a20:	d1eb      	bne.n	80039fa <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f003 0302 	and.w	r3, r3, #2
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d008      	beq.n	8003a40 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a2e:	4b2f      	ldr	r3, [pc, #188]	; (8003aec <HAL_RCC_ClockConfig+0x1b4>)
 8003a30:	689b      	ldr	r3, [r3, #8]
 8003a32:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	689b      	ldr	r3, [r3, #8]
 8003a3a:	492c      	ldr	r1, [pc, #176]	; (8003aec <HAL_RCC_ClockConfig+0x1b4>)
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a40:	4b29      	ldr	r3, [pc, #164]	; (8003ae8 <HAL_RCC_ClockConfig+0x1b0>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f003 0307 	and.w	r3, r3, #7
 8003a48:	683a      	ldr	r2, [r7, #0]
 8003a4a:	429a      	cmp	r2, r3
 8003a4c:	d210      	bcs.n	8003a70 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a4e:	4b26      	ldr	r3, [pc, #152]	; (8003ae8 <HAL_RCC_ClockConfig+0x1b0>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f023 0207 	bic.w	r2, r3, #7
 8003a56:	4924      	ldr	r1, [pc, #144]	; (8003ae8 <HAL_RCC_ClockConfig+0x1b0>)
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a5e:	4b22      	ldr	r3, [pc, #136]	; (8003ae8 <HAL_RCC_ClockConfig+0x1b0>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f003 0307 	and.w	r3, r3, #7
 8003a66:	683a      	ldr	r2, [r7, #0]
 8003a68:	429a      	cmp	r2, r3
 8003a6a:	d001      	beq.n	8003a70 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	e036      	b.n	8003ade <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f003 0304 	and.w	r3, r3, #4
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d008      	beq.n	8003a8e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a7c:	4b1b      	ldr	r3, [pc, #108]	; (8003aec <HAL_RCC_ClockConfig+0x1b4>)
 8003a7e:	689b      	ldr	r3, [r3, #8]
 8003a80:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	68db      	ldr	r3, [r3, #12]
 8003a88:	4918      	ldr	r1, [pc, #96]	; (8003aec <HAL_RCC_ClockConfig+0x1b4>)
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f003 0308 	and.w	r3, r3, #8
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d009      	beq.n	8003aae <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a9a:	4b14      	ldr	r3, [pc, #80]	; (8003aec <HAL_RCC_ClockConfig+0x1b4>)
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	691b      	ldr	r3, [r3, #16]
 8003aa6:	00db      	lsls	r3, r3, #3
 8003aa8:	4910      	ldr	r1, [pc, #64]	; (8003aec <HAL_RCC_ClockConfig+0x1b4>)
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003aae:	f000 f825 	bl	8003afc <HAL_RCC_GetSysClockFreq>
 8003ab2:	4602      	mov	r2, r0
 8003ab4:	4b0d      	ldr	r3, [pc, #52]	; (8003aec <HAL_RCC_ClockConfig+0x1b4>)
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	091b      	lsrs	r3, r3, #4
 8003aba:	f003 030f 	and.w	r3, r3, #15
 8003abe:	490c      	ldr	r1, [pc, #48]	; (8003af0 <HAL_RCC_ClockConfig+0x1b8>)
 8003ac0:	5ccb      	ldrb	r3, [r1, r3]
 8003ac2:	f003 031f 	and.w	r3, r3, #31
 8003ac6:	fa22 f303 	lsr.w	r3, r2, r3
 8003aca:	4a0a      	ldr	r2, [pc, #40]	; (8003af4 <HAL_RCC_ClockConfig+0x1bc>)
 8003acc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003ace:	4b0a      	ldr	r3, [pc, #40]	; (8003af8 <HAL_RCC_ClockConfig+0x1c0>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	f7fd f850 	bl	8000b78 <HAL_InitTick>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	72fb      	strb	r3, [r7, #11]

  return status;
 8003adc:	7afb      	ldrb	r3, [r7, #11]
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3710      	adds	r7, #16
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}
 8003ae6:	bf00      	nop
 8003ae8:	40022000 	.word	0x40022000
 8003aec:	40021000 	.word	0x40021000
 8003af0:	080058d8 	.word	0x080058d8
 8003af4:	20000000 	.word	0x20000000
 8003af8:	20000004 	.word	0x20000004

08003afc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003afc:	b480      	push	{r7}
 8003afe:	b089      	sub	sp, #36	; 0x24
 8003b00:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003b02:	2300      	movs	r3, #0
 8003b04:	61fb      	str	r3, [r7, #28]
 8003b06:	2300      	movs	r3, #0
 8003b08:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b0a:	4b3e      	ldr	r3, [pc, #248]	; (8003c04 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b0c:	689b      	ldr	r3, [r3, #8]
 8003b0e:	f003 030c 	and.w	r3, r3, #12
 8003b12:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003b14:	4b3b      	ldr	r3, [pc, #236]	; (8003c04 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b16:	68db      	ldr	r3, [r3, #12]
 8003b18:	f003 0303 	and.w	r3, r3, #3
 8003b1c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d005      	beq.n	8003b30 <HAL_RCC_GetSysClockFreq+0x34>
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	2b0c      	cmp	r3, #12
 8003b28:	d121      	bne.n	8003b6e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	2b01      	cmp	r3, #1
 8003b2e:	d11e      	bne.n	8003b6e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003b30:	4b34      	ldr	r3, [pc, #208]	; (8003c04 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f003 0308 	and.w	r3, r3, #8
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d107      	bne.n	8003b4c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003b3c:	4b31      	ldr	r3, [pc, #196]	; (8003c04 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b42:	0a1b      	lsrs	r3, r3, #8
 8003b44:	f003 030f 	and.w	r3, r3, #15
 8003b48:	61fb      	str	r3, [r7, #28]
 8003b4a:	e005      	b.n	8003b58 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003b4c:	4b2d      	ldr	r3, [pc, #180]	; (8003c04 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	091b      	lsrs	r3, r3, #4
 8003b52:	f003 030f 	and.w	r3, r3, #15
 8003b56:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003b58:	4a2b      	ldr	r2, [pc, #172]	; (8003c08 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003b5a:	69fb      	ldr	r3, [r7, #28]
 8003b5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b60:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d10d      	bne.n	8003b84 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003b68:	69fb      	ldr	r3, [r7, #28]
 8003b6a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003b6c:	e00a      	b.n	8003b84 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	2b04      	cmp	r3, #4
 8003b72:	d102      	bne.n	8003b7a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003b74:	4b25      	ldr	r3, [pc, #148]	; (8003c0c <HAL_RCC_GetSysClockFreq+0x110>)
 8003b76:	61bb      	str	r3, [r7, #24]
 8003b78:	e004      	b.n	8003b84 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	2b08      	cmp	r3, #8
 8003b7e:	d101      	bne.n	8003b84 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003b80:	4b23      	ldr	r3, [pc, #140]	; (8003c10 <HAL_RCC_GetSysClockFreq+0x114>)
 8003b82:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	2b0c      	cmp	r3, #12
 8003b88:	d134      	bne.n	8003bf4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003b8a:	4b1e      	ldr	r3, [pc, #120]	; (8003c04 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b8c:	68db      	ldr	r3, [r3, #12]
 8003b8e:	f003 0303 	and.w	r3, r3, #3
 8003b92:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	2b02      	cmp	r3, #2
 8003b98:	d003      	beq.n	8003ba2 <HAL_RCC_GetSysClockFreq+0xa6>
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	2b03      	cmp	r3, #3
 8003b9e:	d003      	beq.n	8003ba8 <HAL_RCC_GetSysClockFreq+0xac>
 8003ba0:	e005      	b.n	8003bae <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003ba2:	4b1a      	ldr	r3, [pc, #104]	; (8003c0c <HAL_RCC_GetSysClockFreq+0x110>)
 8003ba4:	617b      	str	r3, [r7, #20]
      break;
 8003ba6:	e005      	b.n	8003bb4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003ba8:	4b19      	ldr	r3, [pc, #100]	; (8003c10 <HAL_RCC_GetSysClockFreq+0x114>)
 8003baa:	617b      	str	r3, [r7, #20]
      break;
 8003bac:	e002      	b.n	8003bb4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003bae:	69fb      	ldr	r3, [r7, #28]
 8003bb0:	617b      	str	r3, [r7, #20]
      break;
 8003bb2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003bb4:	4b13      	ldr	r3, [pc, #76]	; (8003c04 <HAL_RCC_GetSysClockFreq+0x108>)
 8003bb6:	68db      	ldr	r3, [r3, #12]
 8003bb8:	091b      	lsrs	r3, r3, #4
 8003bba:	f003 0307 	and.w	r3, r3, #7
 8003bbe:	3301      	adds	r3, #1
 8003bc0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003bc2:	4b10      	ldr	r3, [pc, #64]	; (8003c04 <HAL_RCC_GetSysClockFreq+0x108>)
 8003bc4:	68db      	ldr	r3, [r3, #12]
 8003bc6:	0a1b      	lsrs	r3, r3, #8
 8003bc8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003bcc:	697a      	ldr	r2, [r7, #20]
 8003bce:	fb03 f202 	mul.w	r2, r3, r2
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bd8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003bda:	4b0a      	ldr	r3, [pc, #40]	; (8003c04 <HAL_RCC_GetSysClockFreq+0x108>)
 8003bdc:	68db      	ldr	r3, [r3, #12]
 8003bde:	0e5b      	lsrs	r3, r3, #25
 8003be0:	f003 0303 	and.w	r3, r3, #3
 8003be4:	3301      	adds	r3, #1
 8003be6:	005b      	lsls	r3, r3, #1
 8003be8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003bea:	697a      	ldr	r2, [r7, #20]
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bf2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003bf4:	69bb      	ldr	r3, [r7, #24]
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	3724      	adds	r7, #36	; 0x24
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c00:	4770      	bx	lr
 8003c02:	bf00      	nop
 8003c04:	40021000 	.word	0x40021000
 8003c08:	080058e8 	.word	0x080058e8
 8003c0c:	00f42400 	.word	0x00f42400
 8003c10:	007a1200 	.word	0x007a1200

08003c14 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b086      	sub	sp, #24
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003c20:	4b2a      	ldr	r3, [pc, #168]	; (8003ccc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d003      	beq.n	8003c34 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003c2c:	f7ff f9ea 	bl	8003004 <HAL_PWREx_GetVoltageRange>
 8003c30:	6178      	str	r0, [r7, #20]
 8003c32:	e014      	b.n	8003c5e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003c34:	4b25      	ldr	r3, [pc, #148]	; (8003ccc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c38:	4a24      	ldr	r2, [pc, #144]	; (8003ccc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c3e:	6593      	str	r3, [r2, #88]	; 0x58
 8003c40:	4b22      	ldr	r3, [pc, #136]	; (8003ccc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c48:	60fb      	str	r3, [r7, #12]
 8003c4a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003c4c:	f7ff f9da 	bl	8003004 <HAL_PWREx_GetVoltageRange>
 8003c50:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003c52:	4b1e      	ldr	r3, [pc, #120]	; (8003ccc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c56:	4a1d      	ldr	r2, [pc, #116]	; (8003ccc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c5c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c64:	d10b      	bne.n	8003c7e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2b80      	cmp	r3, #128	; 0x80
 8003c6a:	d919      	bls.n	8003ca0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2ba0      	cmp	r3, #160	; 0xa0
 8003c70:	d902      	bls.n	8003c78 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003c72:	2302      	movs	r3, #2
 8003c74:	613b      	str	r3, [r7, #16]
 8003c76:	e013      	b.n	8003ca0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003c78:	2301      	movs	r3, #1
 8003c7a:	613b      	str	r3, [r7, #16]
 8003c7c:	e010      	b.n	8003ca0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2b80      	cmp	r3, #128	; 0x80
 8003c82:	d902      	bls.n	8003c8a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003c84:	2303      	movs	r3, #3
 8003c86:	613b      	str	r3, [r7, #16]
 8003c88:	e00a      	b.n	8003ca0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2b80      	cmp	r3, #128	; 0x80
 8003c8e:	d102      	bne.n	8003c96 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003c90:	2302      	movs	r3, #2
 8003c92:	613b      	str	r3, [r7, #16]
 8003c94:	e004      	b.n	8003ca0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2b70      	cmp	r3, #112	; 0x70
 8003c9a:	d101      	bne.n	8003ca0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003ca0:	4b0b      	ldr	r3, [pc, #44]	; (8003cd0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f023 0207 	bic.w	r2, r3, #7
 8003ca8:	4909      	ldr	r1, [pc, #36]	; (8003cd0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	4313      	orrs	r3, r2
 8003cae:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003cb0:	4b07      	ldr	r3, [pc, #28]	; (8003cd0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f003 0307 	and.w	r3, r3, #7
 8003cb8:	693a      	ldr	r2, [r7, #16]
 8003cba:	429a      	cmp	r2, r3
 8003cbc:	d001      	beq.n	8003cc2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	e000      	b.n	8003cc4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003cc2:	2300      	movs	r3, #0
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	3718      	adds	r7, #24
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bd80      	pop	{r7, pc}
 8003ccc:	40021000 	.word	0x40021000
 8003cd0:	40022000 	.word	0x40022000

08003cd4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b086      	sub	sp, #24
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003cdc:	2300      	movs	r3, #0
 8003cde:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d041      	beq.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003cf4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003cf8:	d02a      	beq.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003cfa:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003cfe:	d824      	bhi.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003d00:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003d04:	d008      	beq.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003d06:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003d0a:	d81e      	bhi.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d00a      	beq.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003d10:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d14:	d010      	beq.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003d16:	e018      	b.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003d18:	4b86      	ldr	r3, [pc, #536]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d1a:	68db      	ldr	r3, [r3, #12]
 8003d1c:	4a85      	ldr	r2, [pc, #532]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d22:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003d24:	e015      	b.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	3304      	adds	r3, #4
 8003d2a:	2100      	movs	r1, #0
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	f000 facd 	bl	80042cc <RCCEx_PLLSAI1_Config>
 8003d32:	4603      	mov	r3, r0
 8003d34:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003d36:	e00c      	b.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	3320      	adds	r3, #32
 8003d3c:	2100      	movs	r1, #0
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f000 fbb6 	bl	80044b0 <RCCEx_PLLSAI2_Config>
 8003d44:	4603      	mov	r3, r0
 8003d46:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003d48:	e003      	b.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	74fb      	strb	r3, [r7, #19]
      break;
 8003d4e:	e000      	b.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003d50:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d52:	7cfb      	ldrb	r3, [r7, #19]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d10b      	bne.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003d58:	4b76      	ldr	r3, [pc, #472]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d5e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d66:	4973      	ldr	r1, [pc, #460]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003d6e:	e001      	b.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d70:	7cfb      	ldrb	r3, [r7, #19]
 8003d72:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d041      	beq.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d84:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003d88:	d02a      	beq.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003d8a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003d8e:	d824      	bhi.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003d90:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003d94:	d008      	beq.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003d96:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003d9a:	d81e      	bhi.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d00a      	beq.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003da0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003da4:	d010      	beq.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003da6:	e018      	b.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003da8:	4b62      	ldr	r3, [pc, #392]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003daa:	68db      	ldr	r3, [r3, #12]
 8003dac:	4a61      	ldr	r2, [pc, #388]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003db2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003db4:	e015      	b.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	3304      	adds	r3, #4
 8003dba:	2100      	movs	r1, #0
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	f000 fa85 	bl	80042cc <RCCEx_PLLSAI1_Config>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003dc6:	e00c      	b.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	3320      	adds	r3, #32
 8003dcc:	2100      	movs	r1, #0
 8003dce:	4618      	mov	r0, r3
 8003dd0:	f000 fb6e 	bl	80044b0 <RCCEx_PLLSAI2_Config>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003dd8:	e003      	b.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	74fb      	strb	r3, [r7, #19]
      break;
 8003dde:	e000      	b.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003de0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003de2:	7cfb      	ldrb	r3, [r7, #19]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d10b      	bne.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003de8:	4b52      	ldr	r3, [pc, #328]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dee:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003df6:	494f      	ldr	r1, [pc, #316]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003dfe:	e001      	b.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e00:	7cfb      	ldrb	r3, [r7, #19]
 8003e02:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	f000 80a0 	beq.w	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e12:	2300      	movs	r3, #0
 8003e14:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003e16:	4b47      	ldr	r3, [pc, #284]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d101      	bne.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003e22:	2301      	movs	r3, #1
 8003e24:	e000      	b.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003e26:	2300      	movs	r3, #0
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d00d      	beq.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e2c:	4b41      	ldr	r3, [pc, #260]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e30:	4a40      	ldr	r2, [pc, #256]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e36:	6593      	str	r3, [r2, #88]	; 0x58
 8003e38:	4b3e      	ldr	r3, [pc, #248]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e40:	60bb      	str	r3, [r7, #8]
 8003e42:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e44:	2301      	movs	r3, #1
 8003e46:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e48:	4b3b      	ldr	r3, [pc, #236]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a3a      	ldr	r2, [pc, #232]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003e4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e52:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003e54:	f7fc fee0 	bl	8000c18 <HAL_GetTick>
 8003e58:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003e5a:	e009      	b.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e5c:	f7fc fedc 	bl	8000c18 <HAL_GetTick>
 8003e60:	4602      	mov	r2, r0
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	1ad3      	subs	r3, r2, r3
 8003e66:	2b02      	cmp	r3, #2
 8003e68:	d902      	bls.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003e6a:	2303      	movs	r3, #3
 8003e6c:	74fb      	strb	r3, [r7, #19]
        break;
 8003e6e:	e005      	b.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003e70:	4b31      	ldr	r3, [pc, #196]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d0ef      	beq.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003e7c:	7cfb      	ldrb	r3, [r7, #19]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d15c      	bne.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003e82:	4b2c      	ldr	r3, [pc, #176]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e88:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e8c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003e8e:	697b      	ldr	r3, [r7, #20]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d01f      	beq.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e9a:	697a      	ldr	r2, [r7, #20]
 8003e9c:	429a      	cmp	r2, r3
 8003e9e:	d019      	beq.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003ea0:	4b24      	ldr	r3, [pc, #144]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ea2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ea6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003eaa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003eac:	4b21      	ldr	r3, [pc, #132]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003eae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eb2:	4a20      	ldr	r2, [pc, #128]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003eb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003eb8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003ebc:	4b1d      	ldr	r3, [pc, #116]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ebe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ec2:	4a1c      	ldr	r2, [pc, #112]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ec4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ec8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003ecc:	4a19      	ldr	r2, [pc, #100]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ece:	697b      	ldr	r3, [r7, #20]
 8003ed0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	f003 0301 	and.w	r3, r3, #1
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d016      	beq.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ede:	f7fc fe9b 	bl	8000c18 <HAL_GetTick>
 8003ee2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ee4:	e00b      	b.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ee6:	f7fc fe97 	bl	8000c18 <HAL_GetTick>
 8003eea:	4602      	mov	r2, r0
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	1ad3      	subs	r3, r2, r3
 8003ef0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d902      	bls.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003ef8:	2303      	movs	r3, #3
 8003efa:	74fb      	strb	r3, [r7, #19]
            break;
 8003efc:	e006      	b.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003efe:	4b0d      	ldr	r3, [pc, #52]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f04:	f003 0302 	and.w	r3, r3, #2
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d0ec      	beq.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003f0c:	7cfb      	ldrb	r3, [r7, #19]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d10c      	bne.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f12:	4b08      	ldr	r3, [pc, #32]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f18:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f22:	4904      	ldr	r1, [pc, #16]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f24:	4313      	orrs	r3, r2
 8003f26:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003f2a:	e009      	b.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003f2c:	7cfb      	ldrb	r3, [r7, #19]
 8003f2e:	74bb      	strb	r3, [r7, #18]
 8003f30:	e006      	b.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003f32:	bf00      	nop
 8003f34:	40021000 	.word	0x40021000
 8003f38:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f3c:	7cfb      	ldrb	r3, [r7, #19]
 8003f3e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f40:	7c7b      	ldrb	r3, [r7, #17]
 8003f42:	2b01      	cmp	r3, #1
 8003f44:	d105      	bne.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f46:	4ba6      	ldr	r3, [pc, #664]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003f48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f4a:	4aa5      	ldr	r2, [pc, #660]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003f4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f50:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f003 0301 	and.w	r3, r3, #1
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d00a      	beq.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003f5e:	4ba0      	ldr	r3, [pc, #640]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003f60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f64:	f023 0203 	bic.w	r2, r3, #3
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f6c:	499c      	ldr	r1, [pc, #624]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f003 0302 	and.w	r3, r3, #2
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d00a      	beq.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003f80:	4b97      	ldr	r3, [pc, #604]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003f82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f86:	f023 020c 	bic.w	r2, r3, #12
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f8e:	4994      	ldr	r1, [pc, #592]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003f90:	4313      	orrs	r3, r2
 8003f92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f003 0304 	and.w	r3, r3, #4
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d00a      	beq.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003fa2:	4b8f      	ldr	r3, [pc, #572]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003fa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fa8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb0:	498b      	ldr	r1, [pc, #556]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f003 0308 	and.w	r3, r3, #8
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d00a      	beq.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003fc4:	4b86      	ldr	r3, [pc, #536]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003fc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fca:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fd2:	4983      	ldr	r1, [pc, #524]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f003 0310 	and.w	r3, r3, #16
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d00a      	beq.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003fe6:	4b7e      	ldr	r3, [pc, #504]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003fe8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ff4:	497a      	ldr	r1, [pc, #488]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f003 0320 	and.w	r3, r3, #32
 8004004:	2b00      	cmp	r3, #0
 8004006:	d00a      	beq.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004008:	4b75      	ldr	r3, [pc, #468]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800400a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800400e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004016:	4972      	ldr	r1, [pc, #456]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004018:	4313      	orrs	r3, r2
 800401a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004026:	2b00      	cmp	r3, #0
 8004028:	d00a      	beq.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800402a:	4b6d      	ldr	r3, [pc, #436]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800402c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004030:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004038:	4969      	ldr	r1, [pc, #420]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800403a:	4313      	orrs	r3, r2
 800403c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004048:	2b00      	cmp	r3, #0
 800404a:	d00a      	beq.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800404c:	4b64      	ldr	r3, [pc, #400]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800404e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004052:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800405a:	4961      	ldr	r1, [pc, #388]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800405c:	4313      	orrs	r3, r2
 800405e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800406a:	2b00      	cmp	r3, #0
 800406c:	d00a      	beq.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800406e:	4b5c      	ldr	r3, [pc, #368]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004070:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004074:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800407c:	4958      	ldr	r1, [pc, #352]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800407e:	4313      	orrs	r3, r2
 8004080:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800408c:	2b00      	cmp	r3, #0
 800408e:	d00a      	beq.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004090:	4b53      	ldr	r3, [pc, #332]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004092:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004096:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800409e:	4950      	ldr	r1, [pc, #320]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80040a0:	4313      	orrs	r3, r2
 80040a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d00a      	beq.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80040b2:	4b4b      	ldr	r3, [pc, #300]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80040b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040b8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040c0:	4947      	ldr	r1, [pc, #284]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80040c2:	4313      	orrs	r3, r2
 80040c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d00a      	beq.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80040d4:	4b42      	ldr	r3, [pc, #264]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80040d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80040da:	f023 0203 	bic.w	r2, r3, #3
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040e2:	493f      	ldr	r1, [pc, #252]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80040e4:	4313      	orrs	r3, r2
 80040e6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d028      	beq.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80040f6:	4b3a      	ldr	r3, [pc, #232]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80040f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040fc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004104:	4936      	ldr	r1, [pc, #216]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004106:	4313      	orrs	r3, r2
 8004108:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004110:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004114:	d106      	bne.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004116:	4b32      	ldr	r3, [pc, #200]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004118:	68db      	ldr	r3, [r3, #12]
 800411a:	4a31      	ldr	r2, [pc, #196]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800411c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004120:	60d3      	str	r3, [r2, #12]
 8004122:	e011      	b.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004128:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800412c:	d10c      	bne.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	3304      	adds	r3, #4
 8004132:	2101      	movs	r1, #1
 8004134:	4618      	mov	r0, r3
 8004136:	f000 f8c9 	bl	80042cc <RCCEx_PLLSAI1_Config>
 800413a:	4603      	mov	r3, r0
 800413c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800413e:	7cfb      	ldrb	r3, [r7, #19]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d001      	beq.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 8004144:	7cfb      	ldrb	r3, [r7, #19]
 8004146:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004150:	2b00      	cmp	r3, #0
 8004152:	d028      	beq.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004154:	4b22      	ldr	r3, [pc, #136]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004156:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800415a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004162:	491f      	ldr	r1, [pc, #124]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004164:	4313      	orrs	r3, r2
 8004166:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800416e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004172:	d106      	bne.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004174:	4b1a      	ldr	r3, [pc, #104]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004176:	68db      	ldr	r3, [r3, #12]
 8004178:	4a19      	ldr	r2, [pc, #100]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800417a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800417e:	60d3      	str	r3, [r2, #12]
 8004180:	e011      	b.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004186:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800418a:	d10c      	bne.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	3304      	adds	r3, #4
 8004190:	2101      	movs	r1, #1
 8004192:	4618      	mov	r0, r3
 8004194:	f000 f89a 	bl	80042cc <RCCEx_PLLSAI1_Config>
 8004198:	4603      	mov	r3, r0
 800419a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800419c:	7cfb      	ldrb	r3, [r7, #19]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d001      	beq.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 80041a2:	7cfb      	ldrb	r3, [r7, #19]
 80041a4:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d02a      	beq.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80041b2:	4b0b      	ldr	r3, [pc, #44]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80041b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041b8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80041c0:	4907      	ldr	r1, [pc, #28]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80041c2:	4313      	orrs	r3, r2
 80041c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80041cc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80041d0:	d108      	bne.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80041d2:	4b03      	ldr	r3, [pc, #12]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80041d4:	68db      	ldr	r3, [r3, #12]
 80041d6:	4a02      	ldr	r2, [pc, #8]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80041d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80041dc:	60d3      	str	r3, [r2, #12]
 80041de:	e013      	b.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x534>
 80041e0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80041e8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80041ec:	d10c      	bne.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	3304      	adds	r3, #4
 80041f2:	2101      	movs	r1, #1
 80041f4:	4618      	mov	r0, r3
 80041f6:	f000 f869 	bl	80042cc <RCCEx_PLLSAI1_Config>
 80041fa:	4603      	mov	r3, r0
 80041fc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80041fe:	7cfb      	ldrb	r3, [r7, #19]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d001      	beq.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 8004204:	7cfb      	ldrb	r3, [r7, #19]
 8004206:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004210:	2b00      	cmp	r3, #0
 8004212:	d02f      	beq.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004214:	4b2c      	ldr	r3, [pc, #176]	; (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8004216:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800421a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004222:	4929      	ldr	r1, [pc, #164]	; (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8004224:	4313      	orrs	r3, r2
 8004226:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800422e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004232:	d10d      	bne.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	3304      	adds	r3, #4
 8004238:	2102      	movs	r1, #2
 800423a:	4618      	mov	r0, r3
 800423c:	f000 f846 	bl	80042cc <RCCEx_PLLSAI1_Config>
 8004240:	4603      	mov	r3, r0
 8004242:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004244:	7cfb      	ldrb	r3, [r7, #19]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d014      	beq.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 800424a:	7cfb      	ldrb	r3, [r7, #19]
 800424c:	74bb      	strb	r3, [r7, #18]
 800424e:	e011      	b.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004254:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004258:	d10c      	bne.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	3320      	adds	r3, #32
 800425e:	2102      	movs	r1, #2
 8004260:	4618      	mov	r0, r3
 8004262:	f000 f925 	bl	80044b0 <RCCEx_PLLSAI2_Config>
 8004266:	4603      	mov	r3, r0
 8004268:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800426a:	7cfb      	ldrb	r3, [r7, #19]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d001      	beq.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8004270:	7cfb      	ldrb	r3, [r7, #19]
 8004272:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800427c:	2b00      	cmp	r3, #0
 800427e:	d00b      	beq.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004280:	4b11      	ldr	r3, [pc, #68]	; (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8004282:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004286:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004290:	490d      	ldr	r1, [pc, #52]	; (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8004292:	4313      	orrs	r3, r2
 8004294:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d00b      	beq.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80042a4:	4b08      	ldr	r3, [pc, #32]	; (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80042a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042aa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042b4:	4904      	ldr	r1, [pc, #16]	; (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80042b6:	4313      	orrs	r3, r2
 80042b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80042bc:	7cbb      	ldrb	r3, [r7, #18]
}
 80042be:	4618      	mov	r0, r3
 80042c0:	3718      	adds	r7, #24
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bd80      	pop	{r7, pc}
 80042c6:	bf00      	nop
 80042c8:	40021000 	.word	0x40021000

080042cc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b084      	sub	sp, #16
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
 80042d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80042d6:	2300      	movs	r3, #0
 80042d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80042da:	4b74      	ldr	r3, [pc, #464]	; (80044ac <RCCEx_PLLSAI1_Config+0x1e0>)
 80042dc:	68db      	ldr	r3, [r3, #12]
 80042de:	f003 0303 	and.w	r3, r3, #3
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d018      	beq.n	8004318 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80042e6:	4b71      	ldr	r3, [pc, #452]	; (80044ac <RCCEx_PLLSAI1_Config+0x1e0>)
 80042e8:	68db      	ldr	r3, [r3, #12]
 80042ea:	f003 0203 	and.w	r2, r3, #3
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	429a      	cmp	r2, r3
 80042f4:	d10d      	bne.n	8004312 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
       ||
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d009      	beq.n	8004312 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80042fe:	4b6b      	ldr	r3, [pc, #428]	; (80044ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8004300:	68db      	ldr	r3, [r3, #12]
 8004302:	091b      	lsrs	r3, r3, #4
 8004304:	f003 0307 	and.w	r3, r3, #7
 8004308:	1c5a      	adds	r2, r3, #1
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	685b      	ldr	r3, [r3, #4]
       ||
 800430e:	429a      	cmp	r2, r3
 8004310:	d047      	beq.n	80043a2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004312:	2301      	movs	r3, #1
 8004314:	73fb      	strb	r3, [r7, #15]
 8004316:	e044      	b.n	80043a2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	2b03      	cmp	r3, #3
 800431e:	d018      	beq.n	8004352 <RCCEx_PLLSAI1_Config+0x86>
 8004320:	2b03      	cmp	r3, #3
 8004322:	d825      	bhi.n	8004370 <RCCEx_PLLSAI1_Config+0xa4>
 8004324:	2b01      	cmp	r3, #1
 8004326:	d002      	beq.n	800432e <RCCEx_PLLSAI1_Config+0x62>
 8004328:	2b02      	cmp	r3, #2
 800432a:	d009      	beq.n	8004340 <RCCEx_PLLSAI1_Config+0x74>
 800432c:	e020      	b.n	8004370 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800432e:	4b5f      	ldr	r3, [pc, #380]	; (80044ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f003 0302 	and.w	r3, r3, #2
 8004336:	2b00      	cmp	r3, #0
 8004338:	d11d      	bne.n	8004376 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800433a:	2301      	movs	r3, #1
 800433c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800433e:	e01a      	b.n	8004376 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004340:	4b5a      	ldr	r3, [pc, #360]	; (80044ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004348:	2b00      	cmp	r3, #0
 800434a:	d116      	bne.n	800437a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800434c:	2301      	movs	r3, #1
 800434e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004350:	e013      	b.n	800437a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004352:	4b56      	ldr	r3, [pc, #344]	; (80044ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800435a:	2b00      	cmp	r3, #0
 800435c:	d10f      	bne.n	800437e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800435e:	4b53      	ldr	r3, [pc, #332]	; (80044ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004366:	2b00      	cmp	r3, #0
 8004368:	d109      	bne.n	800437e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800436a:	2301      	movs	r3, #1
 800436c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800436e:	e006      	b.n	800437e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004370:	2301      	movs	r3, #1
 8004372:	73fb      	strb	r3, [r7, #15]
      break;
 8004374:	e004      	b.n	8004380 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004376:	bf00      	nop
 8004378:	e002      	b.n	8004380 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800437a:	bf00      	nop
 800437c:	e000      	b.n	8004380 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800437e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004380:	7bfb      	ldrb	r3, [r7, #15]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d10d      	bne.n	80043a2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004386:	4b49      	ldr	r3, [pc, #292]	; (80044ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8004388:	68db      	ldr	r3, [r3, #12]
 800438a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6819      	ldr	r1, [r3, #0]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	3b01      	subs	r3, #1
 8004398:	011b      	lsls	r3, r3, #4
 800439a:	430b      	orrs	r3, r1
 800439c:	4943      	ldr	r1, [pc, #268]	; (80044ac <RCCEx_PLLSAI1_Config+0x1e0>)
 800439e:	4313      	orrs	r3, r2
 80043a0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80043a2:	7bfb      	ldrb	r3, [r7, #15]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d17c      	bne.n	80044a2 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80043a8:	4b40      	ldr	r3, [pc, #256]	; (80044ac <RCCEx_PLLSAI1_Config+0x1e0>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a3f      	ldr	r2, [pc, #252]	; (80044ac <RCCEx_PLLSAI1_Config+0x1e0>)
 80043ae:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80043b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043b4:	f7fc fc30 	bl	8000c18 <HAL_GetTick>
 80043b8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80043ba:	e009      	b.n	80043d0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80043bc:	f7fc fc2c 	bl	8000c18 <HAL_GetTick>
 80043c0:	4602      	mov	r2, r0
 80043c2:	68bb      	ldr	r3, [r7, #8]
 80043c4:	1ad3      	subs	r3, r2, r3
 80043c6:	2b02      	cmp	r3, #2
 80043c8:	d902      	bls.n	80043d0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80043ca:	2303      	movs	r3, #3
 80043cc:	73fb      	strb	r3, [r7, #15]
        break;
 80043ce:	e005      	b.n	80043dc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80043d0:	4b36      	ldr	r3, [pc, #216]	; (80044ac <RCCEx_PLLSAI1_Config+0x1e0>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d1ef      	bne.n	80043bc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80043dc:	7bfb      	ldrb	r3, [r7, #15]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d15f      	bne.n	80044a2 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d110      	bne.n	800440a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80043e8:	4b30      	ldr	r3, [pc, #192]	; (80044ac <RCCEx_PLLSAI1_Config+0x1e0>)
 80043ea:	691b      	ldr	r3, [r3, #16]
 80043ec:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80043f0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80043f4:	687a      	ldr	r2, [r7, #4]
 80043f6:	6892      	ldr	r2, [r2, #8]
 80043f8:	0211      	lsls	r1, r2, #8
 80043fa:	687a      	ldr	r2, [r7, #4]
 80043fc:	68d2      	ldr	r2, [r2, #12]
 80043fe:	06d2      	lsls	r2, r2, #27
 8004400:	430a      	orrs	r2, r1
 8004402:	492a      	ldr	r1, [pc, #168]	; (80044ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8004404:	4313      	orrs	r3, r2
 8004406:	610b      	str	r3, [r1, #16]
 8004408:	e027      	b.n	800445a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	2b01      	cmp	r3, #1
 800440e:	d112      	bne.n	8004436 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004410:	4b26      	ldr	r3, [pc, #152]	; (80044ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8004412:	691b      	ldr	r3, [r3, #16]
 8004414:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004418:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800441c:	687a      	ldr	r2, [r7, #4]
 800441e:	6892      	ldr	r2, [r2, #8]
 8004420:	0211      	lsls	r1, r2, #8
 8004422:	687a      	ldr	r2, [r7, #4]
 8004424:	6912      	ldr	r2, [r2, #16]
 8004426:	0852      	lsrs	r2, r2, #1
 8004428:	3a01      	subs	r2, #1
 800442a:	0552      	lsls	r2, r2, #21
 800442c:	430a      	orrs	r2, r1
 800442e:	491f      	ldr	r1, [pc, #124]	; (80044ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8004430:	4313      	orrs	r3, r2
 8004432:	610b      	str	r3, [r1, #16]
 8004434:	e011      	b.n	800445a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004436:	4b1d      	ldr	r3, [pc, #116]	; (80044ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8004438:	691b      	ldr	r3, [r3, #16]
 800443a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800443e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004442:	687a      	ldr	r2, [r7, #4]
 8004444:	6892      	ldr	r2, [r2, #8]
 8004446:	0211      	lsls	r1, r2, #8
 8004448:	687a      	ldr	r2, [r7, #4]
 800444a:	6952      	ldr	r2, [r2, #20]
 800444c:	0852      	lsrs	r2, r2, #1
 800444e:	3a01      	subs	r2, #1
 8004450:	0652      	lsls	r2, r2, #25
 8004452:	430a      	orrs	r2, r1
 8004454:	4915      	ldr	r1, [pc, #84]	; (80044ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8004456:	4313      	orrs	r3, r2
 8004458:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800445a:	4b14      	ldr	r3, [pc, #80]	; (80044ac <RCCEx_PLLSAI1_Config+0x1e0>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a13      	ldr	r2, [pc, #76]	; (80044ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8004460:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004464:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004466:	f7fc fbd7 	bl	8000c18 <HAL_GetTick>
 800446a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800446c:	e009      	b.n	8004482 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800446e:	f7fc fbd3 	bl	8000c18 <HAL_GetTick>
 8004472:	4602      	mov	r2, r0
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	1ad3      	subs	r3, r2, r3
 8004478:	2b02      	cmp	r3, #2
 800447a:	d902      	bls.n	8004482 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800447c:	2303      	movs	r3, #3
 800447e:	73fb      	strb	r3, [r7, #15]
          break;
 8004480:	e005      	b.n	800448e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004482:	4b0a      	ldr	r3, [pc, #40]	; (80044ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800448a:	2b00      	cmp	r3, #0
 800448c:	d0ef      	beq.n	800446e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800448e:	7bfb      	ldrb	r3, [r7, #15]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d106      	bne.n	80044a2 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004494:	4b05      	ldr	r3, [pc, #20]	; (80044ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8004496:	691a      	ldr	r2, [r3, #16]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	699b      	ldr	r3, [r3, #24]
 800449c:	4903      	ldr	r1, [pc, #12]	; (80044ac <RCCEx_PLLSAI1_Config+0x1e0>)
 800449e:	4313      	orrs	r3, r2
 80044a0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80044a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80044a4:	4618      	mov	r0, r3
 80044a6:	3710      	adds	r7, #16
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bd80      	pop	{r7, pc}
 80044ac:	40021000 	.word	0x40021000

080044b0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b084      	sub	sp, #16
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
 80044b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80044ba:	2300      	movs	r3, #0
 80044bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80044be:	4b69      	ldr	r3, [pc, #420]	; (8004664 <RCCEx_PLLSAI2_Config+0x1b4>)
 80044c0:	68db      	ldr	r3, [r3, #12]
 80044c2:	f003 0303 	and.w	r3, r3, #3
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d018      	beq.n	80044fc <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80044ca:	4b66      	ldr	r3, [pc, #408]	; (8004664 <RCCEx_PLLSAI2_Config+0x1b4>)
 80044cc:	68db      	ldr	r3, [r3, #12]
 80044ce:	f003 0203 	and.w	r2, r3, #3
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	429a      	cmp	r2, r3
 80044d8:	d10d      	bne.n	80044f6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
       ||
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d009      	beq.n	80044f6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80044e2:	4b60      	ldr	r3, [pc, #384]	; (8004664 <RCCEx_PLLSAI2_Config+0x1b4>)
 80044e4:	68db      	ldr	r3, [r3, #12]
 80044e6:	091b      	lsrs	r3, r3, #4
 80044e8:	f003 0307 	and.w	r3, r3, #7
 80044ec:	1c5a      	adds	r2, r3, #1
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	685b      	ldr	r3, [r3, #4]
       ||
 80044f2:	429a      	cmp	r2, r3
 80044f4:	d047      	beq.n	8004586 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	73fb      	strb	r3, [r7, #15]
 80044fa:	e044      	b.n	8004586 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	2b03      	cmp	r3, #3
 8004502:	d018      	beq.n	8004536 <RCCEx_PLLSAI2_Config+0x86>
 8004504:	2b03      	cmp	r3, #3
 8004506:	d825      	bhi.n	8004554 <RCCEx_PLLSAI2_Config+0xa4>
 8004508:	2b01      	cmp	r3, #1
 800450a:	d002      	beq.n	8004512 <RCCEx_PLLSAI2_Config+0x62>
 800450c:	2b02      	cmp	r3, #2
 800450e:	d009      	beq.n	8004524 <RCCEx_PLLSAI2_Config+0x74>
 8004510:	e020      	b.n	8004554 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004512:	4b54      	ldr	r3, [pc, #336]	; (8004664 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f003 0302 	and.w	r3, r3, #2
 800451a:	2b00      	cmp	r3, #0
 800451c:	d11d      	bne.n	800455a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800451e:	2301      	movs	r3, #1
 8004520:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004522:	e01a      	b.n	800455a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004524:	4b4f      	ldr	r3, [pc, #316]	; (8004664 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800452c:	2b00      	cmp	r3, #0
 800452e:	d116      	bne.n	800455e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004530:	2301      	movs	r3, #1
 8004532:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004534:	e013      	b.n	800455e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004536:	4b4b      	ldr	r3, [pc, #300]	; (8004664 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800453e:	2b00      	cmp	r3, #0
 8004540:	d10f      	bne.n	8004562 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004542:	4b48      	ldr	r3, [pc, #288]	; (8004664 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800454a:	2b00      	cmp	r3, #0
 800454c:	d109      	bne.n	8004562 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800454e:	2301      	movs	r3, #1
 8004550:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004552:	e006      	b.n	8004562 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004554:	2301      	movs	r3, #1
 8004556:	73fb      	strb	r3, [r7, #15]
      break;
 8004558:	e004      	b.n	8004564 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800455a:	bf00      	nop
 800455c:	e002      	b.n	8004564 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800455e:	bf00      	nop
 8004560:	e000      	b.n	8004564 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004562:	bf00      	nop
    }

    if(status == HAL_OK)
 8004564:	7bfb      	ldrb	r3, [r7, #15]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d10d      	bne.n	8004586 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800456a:	4b3e      	ldr	r3, [pc, #248]	; (8004664 <RCCEx_PLLSAI2_Config+0x1b4>)
 800456c:	68db      	ldr	r3, [r3, #12]
 800456e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6819      	ldr	r1, [r3, #0]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	3b01      	subs	r3, #1
 800457c:	011b      	lsls	r3, r3, #4
 800457e:	430b      	orrs	r3, r1
 8004580:	4938      	ldr	r1, [pc, #224]	; (8004664 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004582:	4313      	orrs	r3, r2
 8004584:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004586:	7bfb      	ldrb	r3, [r7, #15]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d166      	bne.n	800465a <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800458c:	4b35      	ldr	r3, [pc, #212]	; (8004664 <RCCEx_PLLSAI2_Config+0x1b4>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a34      	ldr	r2, [pc, #208]	; (8004664 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004592:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004596:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004598:	f7fc fb3e 	bl	8000c18 <HAL_GetTick>
 800459c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800459e:	e009      	b.n	80045b4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80045a0:	f7fc fb3a 	bl	8000c18 <HAL_GetTick>
 80045a4:	4602      	mov	r2, r0
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	1ad3      	subs	r3, r2, r3
 80045aa:	2b02      	cmp	r3, #2
 80045ac:	d902      	bls.n	80045b4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80045ae:	2303      	movs	r3, #3
 80045b0:	73fb      	strb	r3, [r7, #15]
        break;
 80045b2:	e005      	b.n	80045c0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80045b4:	4b2b      	ldr	r3, [pc, #172]	; (8004664 <RCCEx_PLLSAI2_Config+0x1b4>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d1ef      	bne.n	80045a0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80045c0:	7bfb      	ldrb	r3, [r7, #15]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d149      	bne.n	800465a <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d110      	bne.n	80045ee <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80045cc:	4b25      	ldr	r3, [pc, #148]	; (8004664 <RCCEx_PLLSAI2_Config+0x1b4>)
 80045ce:	695b      	ldr	r3, [r3, #20]
 80045d0:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80045d4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80045d8:	687a      	ldr	r2, [r7, #4]
 80045da:	6892      	ldr	r2, [r2, #8]
 80045dc:	0211      	lsls	r1, r2, #8
 80045de:	687a      	ldr	r2, [r7, #4]
 80045e0:	68d2      	ldr	r2, [r2, #12]
 80045e2:	06d2      	lsls	r2, r2, #27
 80045e4:	430a      	orrs	r2, r1
 80045e6:	491f      	ldr	r1, [pc, #124]	; (8004664 <RCCEx_PLLSAI2_Config+0x1b4>)
 80045e8:	4313      	orrs	r3, r2
 80045ea:	614b      	str	r3, [r1, #20]
 80045ec:	e011      	b.n	8004612 <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80045ee:	4b1d      	ldr	r3, [pc, #116]	; (8004664 <RCCEx_PLLSAI2_Config+0x1b4>)
 80045f0:	695b      	ldr	r3, [r3, #20]
 80045f2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80045f6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80045fa:	687a      	ldr	r2, [r7, #4]
 80045fc:	6892      	ldr	r2, [r2, #8]
 80045fe:	0211      	lsls	r1, r2, #8
 8004600:	687a      	ldr	r2, [r7, #4]
 8004602:	6912      	ldr	r2, [r2, #16]
 8004604:	0852      	lsrs	r2, r2, #1
 8004606:	3a01      	subs	r2, #1
 8004608:	0652      	lsls	r2, r2, #25
 800460a:	430a      	orrs	r2, r1
 800460c:	4915      	ldr	r1, [pc, #84]	; (8004664 <RCCEx_PLLSAI2_Config+0x1b4>)
 800460e:	4313      	orrs	r3, r2
 8004610:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004612:	4b14      	ldr	r3, [pc, #80]	; (8004664 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4a13      	ldr	r2, [pc, #76]	; (8004664 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004618:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800461c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800461e:	f7fc fafb 	bl	8000c18 <HAL_GetTick>
 8004622:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004624:	e009      	b.n	800463a <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004626:	f7fc faf7 	bl	8000c18 <HAL_GetTick>
 800462a:	4602      	mov	r2, r0
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	1ad3      	subs	r3, r2, r3
 8004630:	2b02      	cmp	r3, #2
 8004632:	d902      	bls.n	800463a <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8004634:	2303      	movs	r3, #3
 8004636:	73fb      	strb	r3, [r7, #15]
          break;
 8004638:	e005      	b.n	8004646 <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800463a:	4b0a      	ldr	r3, [pc, #40]	; (8004664 <RCCEx_PLLSAI2_Config+0x1b4>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004642:	2b00      	cmp	r3, #0
 8004644:	d0ef      	beq.n	8004626 <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 8004646:	7bfb      	ldrb	r3, [r7, #15]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d106      	bne.n	800465a <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800464c:	4b05      	ldr	r3, [pc, #20]	; (8004664 <RCCEx_PLLSAI2_Config+0x1b4>)
 800464e:	695a      	ldr	r2, [r3, #20]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	695b      	ldr	r3, [r3, #20]
 8004654:	4903      	ldr	r1, [pc, #12]	; (8004664 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004656:	4313      	orrs	r3, r2
 8004658:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800465a:	7bfb      	ldrb	r3, [r7, #15]
}
 800465c:	4618      	mov	r0, r3
 800465e:	3710      	adds	r7, #16
 8004660:	46bd      	mov	sp, r7
 8004662:	bd80      	pop	{r7, pc}
 8004664:	40021000 	.word	0x40021000

08004668 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b082      	sub	sp, #8
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d101      	bne.n	800467a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004676:	2301      	movs	r3, #1
 8004678:	e049      	b.n	800470e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004680:	b2db      	uxtb	r3, r3
 8004682:	2b00      	cmp	r3, #0
 8004684:	d106      	bne.n	8004694 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2200      	movs	r2, #0
 800468a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	f7fc f998 	bl	80009c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2202      	movs	r2, #2
 8004698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681a      	ldr	r2, [r3, #0]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	3304      	adds	r3, #4
 80046a4:	4619      	mov	r1, r3
 80046a6:	4610      	mov	r0, r2
 80046a8:	f000 fc2e 	bl	8004f08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2201      	movs	r2, #1
 80046b0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2201      	movs	r2, #1
 80046b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2201      	movs	r2, #1
 80046c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2201      	movs	r2, #1
 80046c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2201      	movs	r2, #1
 80046d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2201      	movs	r2, #1
 80046d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2201      	movs	r2, #1
 80046e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2201      	movs	r2, #1
 80046e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2201      	movs	r2, #1
 80046f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2201      	movs	r2, #1
 80046f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2201      	movs	r2, #1
 8004700:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2201      	movs	r2, #1
 8004708:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800470c:	2300      	movs	r3, #0
}
 800470e:	4618      	mov	r0, r3
 8004710:	3708      	adds	r7, #8
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}
	...

08004718 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004718:	b480      	push	{r7}
 800471a:	b085      	sub	sp, #20
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004726:	b2db      	uxtb	r3, r3
 8004728:	2b01      	cmp	r3, #1
 800472a:	d001      	beq.n	8004730 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800472c:	2301      	movs	r3, #1
 800472e:	e047      	b.n	80047c0 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2202      	movs	r2, #2
 8004734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a23      	ldr	r2, [pc, #140]	; (80047cc <HAL_TIM_Base_Start+0xb4>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d01d      	beq.n	800477e <HAL_TIM_Base_Start+0x66>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800474a:	d018      	beq.n	800477e <HAL_TIM_Base_Start+0x66>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a1f      	ldr	r2, [pc, #124]	; (80047d0 <HAL_TIM_Base_Start+0xb8>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d013      	beq.n	800477e <HAL_TIM_Base_Start+0x66>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a1e      	ldr	r2, [pc, #120]	; (80047d4 <HAL_TIM_Base_Start+0xbc>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d00e      	beq.n	800477e <HAL_TIM_Base_Start+0x66>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a1c      	ldr	r2, [pc, #112]	; (80047d8 <HAL_TIM_Base_Start+0xc0>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d009      	beq.n	800477e <HAL_TIM_Base_Start+0x66>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a1b      	ldr	r2, [pc, #108]	; (80047dc <HAL_TIM_Base_Start+0xc4>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d004      	beq.n	800477e <HAL_TIM_Base_Start+0x66>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a19      	ldr	r2, [pc, #100]	; (80047e0 <HAL_TIM_Base_Start+0xc8>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d115      	bne.n	80047aa <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	689a      	ldr	r2, [r3, #8]
 8004784:	4b17      	ldr	r3, [pc, #92]	; (80047e4 <HAL_TIM_Base_Start+0xcc>)
 8004786:	4013      	ands	r3, r2
 8004788:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	2b06      	cmp	r3, #6
 800478e:	d015      	beq.n	80047bc <HAL_TIM_Base_Start+0xa4>
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004796:	d011      	beq.n	80047bc <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	681a      	ldr	r2, [r3, #0]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f042 0201 	orr.w	r2, r2, #1
 80047a6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047a8:	e008      	b.n	80047bc <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	681a      	ldr	r2, [r3, #0]
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f042 0201 	orr.w	r2, r2, #1
 80047b8:	601a      	str	r2, [r3, #0]
 80047ba:	e000      	b.n	80047be <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047bc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80047be:	2300      	movs	r3, #0
}
 80047c0:	4618      	mov	r0, r3
 80047c2:	3714      	adds	r7, #20
 80047c4:	46bd      	mov	sp, r7
 80047c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ca:	4770      	bx	lr
 80047cc:	40012c00 	.word	0x40012c00
 80047d0:	40000400 	.word	0x40000400
 80047d4:	40000800 	.word	0x40000800
 80047d8:	40000c00 	.word	0x40000c00
 80047dc:	40013400 	.word	0x40013400
 80047e0:	40014000 	.word	0x40014000
 80047e4:	00010007 	.word	0x00010007

080047e8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b082      	sub	sp, #8
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d101      	bne.n	80047fa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80047f6:	2301      	movs	r3, #1
 80047f8:	e049      	b.n	800488e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004800:	b2db      	uxtb	r3, r3
 8004802:	2b00      	cmp	r3, #0
 8004804:	d106      	bne.n	8004814 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2200      	movs	r2, #0
 800480a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800480e:	6878      	ldr	r0, [r7, #4]
 8004810:	f000 f841 	bl	8004896 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2202      	movs	r2, #2
 8004818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681a      	ldr	r2, [r3, #0]
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	3304      	adds	r3, #4
 8004824:	4619      	mov	r1, r3
 8004826:	4610      	mov	r0, r2
 8004828:	f000 fb6e 	bl	8004f08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2201      	movs	r2, #1
 8004830:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2201      	movs	r2, #1
 8004838:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2201      	movs	r2, #1
 8004840:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2201      	movs	r2, #1
 8004848:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2201      	movs	r2, #1
 8004850:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2201      	movs	r2, #1
 8004858:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2201      	movs	r2, #1
 8004860:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2201      	movs	r2, #1
 8004868:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2201      	movs	r2, #1
 8004870:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2201      	movs	r2, #1
 8004878:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2201      	movs	r2, #1
 8004880:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2201      	movs	r2, #1
 8004888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800488c:	2300      	movs	r3, #0
}
 800488e:	4618      	mov	r0, r3
 8004890:	3708      	adds	r7, #8
 8004892:	46bd      	mov	sp, r7
 8004894:	bd80      	pop	{r7, pc}

08004896 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004896:	b480      	push	{r7}
 8004898:	b083      	sub	sp, #12
 800489a:	af00      	add	r7, sp, #0
 800489c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800489e:	bf00      	nop
 80048a0:	370c      	adds	r7, #12
 80048a2:	46bd      	mov	sp, r7
 80048a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a8:	4770      	bx	lr

080048aa <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80048aa:	b580      	push	{r7, lr}
 80048ac:	b082      	sub	sp, #8
 80048ae:	af00      	add	r7, sp, #0
 80048b0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	691b      	ldr	r3, [r3, #16]
 80048b8:	f003 0302 	and.w	r3, r3, #2
 80048bc:	2b02      	cmp	r3, #2
 80048be:	d122      	bne.n	8004906 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	68db      	ldr	r3, [r3, #12]
 80048c6:	f003 0302 	and.w	r3, r3, #2
 80048ca:	2b02      	cmp	r3, #2
 80048cc:	d11b      	bne.n	8004906 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f06f 0202 	mvn.w	r2, #2
 80048d6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2201      	movs	r2, #1
 80048dc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	699b      	ldr	r3, [r3, #24]
 80048e4:	f003 0303 	and.w	r3, r3, #3
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d003      	beq.n	80048f4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80048ec:	6878      	ldr	r0, [r7, #4]
 80048ee:	f000 faec 	bl	8004eca <HAL_TIM_IC_CaptureCallback>
 80048f2:	e005      	b.n	8004900 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80048f4:	6878      	ldr	r0, [r7, #4]
 80048f6:	f000 fade 	bl	8004eb6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048fa:	6878      	ldr	r0, [r7, #4]
 80048fc:	f000 faef 	bl	8004ede <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2200      	movs	r2, #0
 8004904:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	691b      	ldr	r3, [r3, #16]
 800490c:	f003 0304 	and.w	r3, r3, #4
 8004910:	2b04      	cmp	r3, #4
 8004912:	d122      	bne.n	800495a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	68db      	ldr	r3, [r3, #12]
 800491a:	f003 0304 	and.w	r3, r3, #4
 800491e:	2b04      	cmp	r3, #4
 8004920:	d11b      	bne.n	800495a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f06f 0204 	mvn.w	r2, #4
 800492a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2202      	movs	r2, #2
 8004930:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	699b      	ldr	r3, [r3, #24]
 8004938:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800493c:	2b00      	cmp	r3, #0
 800493e:	d003      	beq.n	8004948 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004940:	6878      	ldr	r0, [r7, #4]
 8004942:	f000 fac2 	bl	8004eca <HAL_TIM_IC_CaptureCallback>
 8004946:	e005      	b.n	8004954 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004948:	6878      	ldr	r0, [r7, #4]
 800494a:	f000 fab4 	bl	8004eb6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800494e:	6878      	ldr	r0, [r7, #4]
 8004950:	f000 fac5 	bl	8004ede <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2200      	movs	r2, #0
 8004958:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	691b      	ldr	r3, [r3, #16]
 8004960:	f003 0308 	and.w	r3, r3, #8
 8004964:	2b08      	cmp	r3, #8
 8004966:	d122      	bne.n	80049ae <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	68db      	ldr	r3, [r3, #12]
 800496e:	f003 0308 	and.w	r3, r3, #8
 8004972:	2b08      	cmp	r3, #8
 8004974:	d11b      	bne.n	80049ae <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f06f 0208 	mvn.w	r2, #8
 800497e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2204      	movs	r2, #4
 8004984:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	69db      	ldr	r3, [r3, #28]
 800498c:	f003 0303 	and.w	r3, r3, #3
 8004990:	2b00      	cmp	r3, #0
 8004992:	d003      	beq.n	800499c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004994:	6878      	ldr	r0, [r7, #4]
 8004996:	f000 fa98 	bl	8004eca <HAL_TIM_IC_CaptureCallback>
 800499a:	e005      	b.n	80049a8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800499c:	6878      	ldr	r0, [r7, #4]
 800499e:	f000 fa8a 	bl	8004eb6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049a2:	6878      	ldr	r0, [r7, #4]
 80049a4:	f000 fa9b 	bl	8004ede <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2200      	movs	r2, #0
 80049ac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	691b      	ldr	r3, [r3, #16]
 80049b4:	f003 0310 	and.w	r3, r3, #16
 80049b8:	2b10      	cmp	r3, #16
 80049ba:	d122      	bne.n	8004a02 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	68db      	ldr	r3, [r3, #12]
 80049c2:	f003 0310 	and.w	r3, r3, #16
 80049c6:	2b10      	cmp	r3, #16
 80049c8:	d11b      	bne.n	8004a02 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f06f 0210 	mvn.w	r2, #16
 80049d2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2208      	movs	r2, #8
 80049d8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	69db      	ldr	r3, [r3, #28]
 80049e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d003      	beq.n	80049f0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049e8:	6878      	ldr	r0, [r7, #4]
 80049ea:	f000 fa6e 	bl	8004eca <HAL_TIM_IC_CaptureCallback>
 80049ee:	e005      	b.n	80049fc <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049f0:	6878      	ldr	r0, [r7, #4]
 80049f2:	f000 fa60 	bl	8004eb6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049f6:	6878      	ldr	r0, [r7, #4]
 80049f8:	f000 fa71 	bl	8004ede <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2200      	movs	r2, #0
 8004a00:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	691b      	ldr	r3, [r3, #16]
 8004a08:	f003 0301 	and.w	r3, r3, #1
 8004a0c:	2b01      	cmp	r3, #1
 8004a0e:	d10e      	bne.n	8004a2e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	68db      	ldr	r3, [r3, #12]
 8004a16:	f003 0301 	and.w	r3, r3, #1
 8004a1a:	2b01      	cmp	r3, #1
 8004a1c:	d107      	bne.n	8004a2e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f06f 0201 	mvn.w	r2, #1
 8004a26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004a28:	6878      	ldr	r0, [r7, #4]
 8004a2a:	f000 fa3a 	bl	8004ea2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	691b      	ldr	r3, [r3, #16]
 8004a34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a38:	2b80      	cmp	r3, #128	; 0x80
 8004a3a:	d10e      	bne.n	8004a5a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	68db      	ldr	r3, [r3, #12]
 8004a42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a46:	2b80      	cmp	r3, #128	; 0x80
 8004a48:	d107      	bne.n	8004a5a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004a52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004a54:	6878      	ldr	r0, [r7, #4]
 8004a56:	f000 fef3 	bl	8005840 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	691b      	ldr	r3, [r3, #16]
 8004a60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a68:	d10e      	bne.n	8004a88 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	68db      	ldr	r3, [r3, #12]
 8004a70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a74:	2b80      	cmp	r3, #128	; 0x80
 8004a76:	d107      	bne.n	8004a88 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004a80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004a82:	6878      	ldr	r0, [r7, #4]
 8004a84:	f000 fee6 	bl	8005854 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	691b      	ldr	r3, [r3, #16]
 8004a8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a92:	2b40      	cmp	r3, #64	; 0x40
 8004a94:	d10e      	bne.n	8004ab4 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	68db      	ldr	r3, [r3, #12]
 8004a9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aa0:	2b40      	cmp	r3, #64	; 0x40
 8004aa2:	d107      	bne.n	8004ab4 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004aac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004aae:	6878      	ldr	r0, [r7, #4]
 8004ab0:	f000 fa1f 	bl	8004ef2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	691b      	ldr	r3, [r3, #16]
 8004aba:	f003 0320 	and.w	r3, r3, #32
 8004abe:	2b20      	cmp	r3, #32
 8004ac0:	d10e      	bne.n	8004ae0 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	68db      	ldr	r3, [r3, #12]
 8004ac8:	f003 0320 	and.w	r3, r3, #32
 8004acc:	2b20      	cmp	r3, #32
 8004ace:	d107      	bne.n	8004ae0 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f06f 0220 	mvn.w	r2, #32
 8004ad8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004ada:	6878      	ldr	r0, [r7, #4]
 8004adc:	f000 fea6 	bl	800582c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004ae0:	bf00      	nop
 8004ae2:	3708      	adds	r7, #8
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	bd80      	pop	{r7, pc}

08004ae8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b086      	sub	sp, #24
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	60f8      	str	r0, [r7, #12]
 8004af0:	60b9      	str	r1, [r7, #8]
 8004af2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004af4:	2300      	movs	r3, #0
 8004af6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004afe:	2b01      	cmp	r3, #1
 8004b00:	d101      	bne.n	8004b06 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004b02:	2302      	movs	r3, #2
 8004b04:	e0ff      	b.n	8004d06 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	2201      	movs	r2, #1
 8004b0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2b14      	cmp	r3, #20
 8004b12:	f200 80f0 	bhi.w	8004cf6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004b16:	a201      	add	r2, pc, #4	; (adr r2, 8004b1c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004b18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b1c:	08004b71 	.word	0x08004b71
 8004b20:	08004cf7 	.word	0x08004cf7
 8004b24:	08004cf7 	.word	0x08004cf7
 8004b28:	08004cf7 	.word	0x08004cf7
 8004b2c:	08004bb1 	.word	0x08004bb1
 8004b30:	08004cf7 	.word	0x08004cf7
 8004b34:	08004cf7 	.word	0x08004cf7
 8004b38:	08004cf7 	.word	0x08004cf7
 8004b3c:	08004bf3 	.word	0x08004bf3
 8004b40:	08004cf7 	.word	0x08004cf7
 8004b44:	08004cf7 	.word	0x08004cf7
 8004b48:	08004cf7 	.word	0x08004cf7
 8004b4c:	08004c33 	.word	0x08004c33
 8004b50:	08004cf7 	.word	0x08004cf7
 8004b54:	08004cf7 	.word	0x08004cf7
 8004b58:	08004cf7 	.word	0x08004cf7
 8004b5c:	08004c75 	.word	0x08004c75
 8004b60:	08004cf7 	.word	0x08004cf7
 8004b64:	08004cf7 	.word	0x08004cf7
 8004b68:	08004cf7 	.word	0x08004cf7
 8004b6c:	08004cb5 	.word	0x08004cb5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	68b9      	ldr	r1, [r7, #8]
 8004b76:	4618      	mov	r0, r3
 8004b78:	f000 fa60 	bl	800503c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	699a      	ldr	r2, [r3, #24]
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f042 0208 	orr.w	r2, r2, #8
 8004b8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	699a      	ldr	r2, [r3, #24]
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f022 0204 	bic.w	r2, r2, #4
 8004b9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	6999      	ldr	r1, [r3, #24]
 8004ba2:	68bb      	ldr	r3, [r7, #8]
 8004ba4:	691a      	ldr	r2, [r3, #16]
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	430a      	orrs	r2, r1
 8004bac:	619a      	str	r2, [r3, #24]
      break;
 8004bae:	e0a5      	b.n	8004cfc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	68b9      	ldr	r1, [r7, #8]
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	f000 fad0 	bl	800515c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	699a      	ldr	r2, [r3, #24]
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004bca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	699a      	ldr	r2, [r3, #24]
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bda:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	6999      	ldr	r1, [r3, #24]
 8004be2:	68bb      	ldr	r3, [r7, #8]
 8004be4:	691b      	ldr	r3, [r3, #16]
 8004be6:	021a      	lsls	r2, r3, #8
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	430a      	orrs	r2, r1
 8004bee:	619a      	str	r2, [r3, #24]
      break;
 8004bf0:	e084      	b.n	8004cfc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	68b9      	ldr	r1, [r7, #8]
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	f000 fb39 	bl	8005270 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	69da      	ldr	r2, [r3, #28]
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f042 0208 	orr.w	r2, r2, #8
 8004c0c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	69da      	ldr	r2, [r3, #28]
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f022 0204 	bic.w	r2, r2, #4
 8004c1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	69d9      	ldr	r1, [r3, #28]
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	691a      	ldr	r2, [r3, #16]
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	430a      	orrs	r2, r1
 8004c2e:	61da      	str	r2, [r3, #28]
      break;
 8004c30:	e064      	b.n	8004cfc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	68b9      	ldr	r1, [r7, #8]
 8004c38:	4618      	mov	r0, r3
 8004c3a:	f000 fba1 	bl	8005380 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	69da      	ldr	r2, [r3, #28]
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c4c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	69da      	ldr	r2, [r3, #28]
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	69d9      	ldr	r1, [r3, #28]
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	691b      	ldr	r3, [r3, #16]
 8004c68:	021a      	lsls	r2, r3, #8
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	430a      	orrs	r2, r1
 8004c70:	61da      	str	r2, [r3, #28]
      break;
 8004c72:	e043      	b.n	8004cfc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	68b9      	ldr	r1, [r7, #8]
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	f000 fbea 	bl	8005454 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f042 0208 	orr.w	r2, r2, #8
 8004c8e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f022 0204 	bic.w	r2, r2, #4
 8004c9e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	691a      	ldr	r2, [r3, #16]
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	430a      	orrs	r2, r1
 8004cb0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004cb2:	e023      	b.n	8004cfc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	68b9      	ldr	r1, [r7, #8]
 8004cba:	4618      	mov	r0, r3
 8004cbc:	f000 fc2e 	bl	800551c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004cce:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cde:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	691b      	ldr	r3, [r3, #16]
 8004cea:	021a      	lsls	r2, r3, #8
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	430a      	orrs	r2, r1
 8004cf2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004cf4:	e002      	b.n	8004cfc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	75fb      	strb	r3, [r7, #23]
      break;
 8004cfa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	2200      	movs	r2, #0
 8004d00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004d04:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d06:	4618      	mov	r0, r3
 8004d08:	3718      	adds	r7, #24
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bd80      	pop	{r7, pc}
 8004d0e:	bf00      	nop

08004d10 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b084      	sub	sp, #16
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
 8004d18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d24:	2b01      	cmp	r3, #1
 8004d26:	d101      	bne.n	8004d2c <HAL_TIM_ConfigClockSource+0x1c>
 8004d28:	2302      	movs	r3, #2
 8004d2a:	e0b6      	b.n	8004e9a <HAL_TIM_ConfigClockSource+0x18a>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2201      	movs	r2, #1
 8004d30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2202      	movs	r2, #2
 8004d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	689b      	ldr	r3, [r3, #8]
 8004d42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d4a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004d4e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004d56:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	68ba      	ldr	r2, [r7, #8]
 8004d5e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d68:	d03e      	beq.n	8004de8 <HAL_TIM_ConfigClockSource+0xd8>
 8004d6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d6e:	f200 8087 	bhi.w	8004e80 <HAL_TIM_ConfigClockSource+0x170>
 8004d72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d76:	f000 8086 	beq.w	8004e86 <HAL_TIM_ConfigClockSource+0x176>
 8004d7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d7e:	d87f      	bhi.n	8004e80 <HAL_TIM_ConfigClockSource+0x170>
 8004d80:	2b70      	cmp	r3, #112	; 0x70
 8004d82:	d01a      	beq.n	8004dba <HAL_TIM_ConfigClockSource+0xaa>
 8004d84:	2b70      	cmp	r3, #112	; 0x70
 8004d86:	d87b      	bhi.n	8004e80 <HAL_TIM_ConfigClockSource+0x170>
 8004d88:	2b60      	cmp	r3, #96	; 0x60
 8004d8a:	d050      	beq.n	8004e2e <HAL_TIM_ConfigClockSource+0x11e>
 8004d8c:	2b60      	cmp	r3, #96	; 0x60
 8004d8e:	d877      	bhi.n	8004e80 <HAL_TIM_ConfigClockSource+0x170>
 8004d90:	2b50      	cmp	r3, #80	; 0x50
 8004d92:	d03c      	beq.n	8004e0e <HAL_TIM_ConfigClockSource+0xfe>
 8004d94:	2b50      	cmp	r3, #80	; 0x50
 8004d96:	d873      	bhi.n	8004e80 <HAL_TIM_ConfigClockSource+0x170>
 8004d98:	2b40      	cmp	r3, #64	; 0x40
 8004d9a:	d058      	beq.n	8004e4e <HAL_TIM_ConfigClockSource+0x13e>
 8004d9c:	2b40      	cmp	r3, #64	; 0x40
 8004d9e:	d86f      	bhi.n	8004e80 <HAL_TIM_ConfigClockSource+0x170>
 8004da0:	2b30      	cmp	r3, #48	; 0x30
 8004da2:	d064      	beq.n	8004e6e <HAL_TIM_ConfigClockSource+0x15e>
 8004da4:	2b30      	cmp	r3, #48	; 0x30
 8004da6:	d86b      	bhi.n	8004e80 <HAL_TIM_ConfigClockSource+0x170>
 8004da8:	2b20      	cmp	r3, #32
 8004daa:	d060      	beq.n	8004e6e <HAL_TIM_ConfigClockSource+0x15e>
 8004dac:	2b20      	cmp	r3, #32
 8004dae:	d867      	bhi.n	8004e80 <HAL_TIM_ConfigClockSource+0x170>
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d05c      	beq.n	8004e6e <HAL_TIM_ConfigClockSource+0x15e>
 8004db4:	2b10      	cmp	r3, #16
 8004db6:	d05a      	beq.n	8004e6e <HAL_TIM_ConfigClockSource+0x15e>
 8004db8:	e062      	b.n	8004e80 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6818      	ldr	r0, [r3, #0]
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	6899      	ldr	r1, [r3, #8]
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	685a      	ldr	r2, [r3, #4]
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	68db      	ldr	r3, [r3, #12]
 8004dca:	f000 fc87 	bl	80056dc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	689b      	ldr	r3, [r3, #8]
 8004dd4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004ddc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	68ba      	ldr	r2, [r7, #8]
 8004de4:	609a      	str	r2, [r3, #8]
      break;
 8004de6:	e04f      	b.n	8004e88 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6818      	ldr	r0, [r3, #0]
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	6899      	ldr	r1, [r3, #8]
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	685a      	ldr	r2, [r3, #4]
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	68db      	ldr	r3, [r3, #12]
 8004df8:	f000 fc70 	bl	80056dc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	689a      	ldr	r2, [r3, #8]
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004e0a:	609a      	str	r2, [r3, #8]
      break;
 8004e0c:	e03c      	b.n	8004e88 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6818      	ldr	r0, [r3, #0]
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	6859      	ldr	r1, [r3, #4]
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	68db      	ldr	r3, [r3, #12]
 8004e1a:	461a      	mov	r2, r3
 8004e1c:	f000 fbe4 	bl	80055e8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	2150      	movs	r1, #80	; 0x50
 8004e26:	4618      	mov	r0, r3
 8004e28:	f000 fc3d 	bl	80056a6 <TIM_ITRx_SetConfig>
      break;
 8004e2c:	e02c      	b.n	8004e88 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6818      	ldr	r0, [r3, #0]
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	6859      	ldr	r1, [r3, #4]
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	68db      	ldr	r3, [r3, #12]
 8004e3a:	461a      	mov	r2, r3
 8004e3c:	f000 fc03 	bl	8005646 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	2160      	movs	r1, #96	; 0x60
 8004e46:	4618      	mov	r0, r3
 8004e48:	f000 fc2d 	bl	80056a6 <TIM_ITRx_SetConfig>
      break;
 8004e4c:	e01c      	b.n	8004e88 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6818      	ldr	r0, [r3, #0]
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	6859      	ldr	r1, [r3, #4]
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	68db      	ldr	r3, [r3, #12]
 8004e5a:	461a      	mov	r2, r3
 8004e5c:	f000 fbc4 	bl	80055e8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	2140      	movs	r1, #64	; 0x40
 8004e66:	4618      	mov	r0, r3
 8004e68:	f000 fc1d 	bl	80056a6 <TIM_ITRx_SetConfig>
      break;
 8004e6c:	e00c      	b.n	8004e88 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681a      	ldr	r2, [r3, #0]
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4619      	mov	r1, r3
 8004e78:	4610      	mov	r0, r2
 8004e7a:	f000 fc14 	bl	80056a6 <TIM_ITRx_SetConfig>
      break;
 8004e7e:	e003      	b.n	8004e88 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004e80:	2301      	movs	r3, #1
 8004e82:	73fb      	strb	r3, [r7, #15]
      break;
 8004e84:	e000      	b.n	8004e88 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004e86:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2201      	movs	r2, #1
 8004e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2200      	movs	r2, #0
 8004e94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004e98:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	3710      	adds	r7, #16
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bd80      	pop	{r7, pc}

08004ea2 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004ea2:	b480      	push	{r7}
 8004ea4:	b083      	sub	sp, #12
 8004ea6:	af00      	add	r7, sp, #0
 8004ea8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004eaa:	bf00      	nop
 8004eac:	370c      	adds	r7, #12
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb4:	4770      	bx	lr

08004eb6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004eb6:	b480      	push	{r7}
 8004eb8:	b083      	sub	sp, #12
 8004eba:	af00      	add	r7, sp, #0
 8004ebc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004ebe:	bf00      	nop
 8004ec0:	370c      	adds	r7, #12
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec8:	4770      	bx	lr

08004eca <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004eca:	b480      	push	{r7}
 8004ecc:	b083      	sub	sp, #12
 8004ece:	af00      	add	r7, sp, #0
 8004ed0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004ed2:	bf00      	nop
 8004ed4:	370c      	adds	r7, #12
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004edc:	4770      	bx	lr

08004ede <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004ede:	b480      	push	{r7}
 8004ee0:	b083      	sub	sp, #12
 8004ee2:	af00      	add	r7, sp, #0
 8004ee4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004ee6:	bf00      	nop
 8004ee8:	370c      	adds	r7, #12
 8004eea:	46bd      	mov	sp, r7
 8004eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef0:	4770      	bx	lr

08004ef2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004ef2:	b480      	push	{r7}
 8004ef4:	b083      	sub	sp, #12
 8004ef6:	af00      	add	r7, sp, #0
 8004ef8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004efa:	bf00      	nop
 8004efc:	370c      	adds	r7, #12
 8004efe:	46bd      	mov	sp, r7
 8004f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f04:	4770      	bx	lr
	...

08004f08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004f08:	b480      	push	{r7}
 8004f0a:	b085      	sub	sp, #20
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
 8004f10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	4a40      	ldr	r2, [pc, #256]	; (800501c <TIM_Base_SetConfig+0x114>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d013      	beq.n	8004f48 <TIM_Base_SetConfig+0x40>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f26:	d00f      	beq.n	8004f48 <TIM_Base_SetConfig+0x40>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	4a3d      	ldr	r2, [pc, #244]	; (8005020 <TIM_Base_SetConfig+0x118>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d00b      	beq.n	8004f48 <TIM_Base_SetConfig+0x40>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	4a3c      	ldr	r2, [pc, #240]	; (8005024 <TIM_Base_SetConfig+0x11c>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d007      	beq.n	8004f48 <TIM_Base_SetConfig+0x40>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	4a3b      	ldr	r2, [pc, #236]	; (8005028 <TIM_Base_SetConfig+0x120>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d003      	beq.n	8004f48 <TIM_Base_SetConfig+0x40>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	4a3a      	ldr	r2, [pc, #232]	; (800502c <TIM_Base_SetConfig+0x124>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d108      	bne.n	8004f5a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	68fa      	ldr	r2, [r7, #12]
 8004f56:	4313      	orrs	r3, r2
 8004f58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	4a2f      	ldr	r2, [pc, #188]	; (800501c <TIM_Base_SetConfig+0x114>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d01f      	beq.n	8004fa2 <TIM_Base_SetConfig+0x9a>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f68:	d01b      	beq.n	8004fa2 <TIM_Base_SetConfig+0x9a>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	4a2c      	ldr	r2, [pc, #176]	; (8005020 <TIM_Base_SetConfig+0x118>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d017      	beq.n	8004fa2 <TIM_Base_SetConfig+0x9a>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	4a2b      	ldr	r2, [pc, #172]	; (8005024 <TIM_Base_SetConfig+0x11c>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d013      	beq.n	8004fa2 <TIM_Base_SetConfig+0x9a>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	4a2a      	ldr	r2, [pc, #168]	; (8005028 <TIM_Base_SetConfig+0x120>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d00f      	beq.n	8004fa2 <TIM_Base_SetConfig+0x9a>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	4a29      	ldr	r2, [pc, #164]	; (800502c <TIM_Base_SetConfig+0x124>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d00b      	beq.n	8004fa2 <TIM_Base_SetConfig+0x9a>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	4a28      	ldr	r2, [pc, #160]	; (8005030 <TIM_Base_SetConfig+0x128>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d007      	beq.n	8004fa2 <TIM_Base_SetConfig+0x9a>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	4a27      	ldr	r2, [pc, #156]	; (8005034 <TIM_Base_SetConfig+0x12c>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d003      	beq.n	8004fa2 <TIM_Base_SetConfig+0x9a>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	4a26      	ldr	r2, [pc, #152]	; (8005038 <TIM_Base_SetConfig+0x130>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d108      	bne.n	8004fb4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fa8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	68db      	ldr	r3, [r3, #12]
 8004fae:	68fa      	ldr	r2, [r7, #12]
 8004fb0:	4313      	orrs	r3, r2
 8004fb2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	695b      	ldr	r3, [r3, #20]
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	68fa      	ldr	r2, [r7, #12]
 8004fc6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	689a      	ldr	r2, [r3, #8]
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	681a      	ldr	r2, [r3, #0]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	4a10      	ldr	r2, [pc, #64]	; (800501c <TIM_Base_SetConfig+0x114>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d00f      	beq.n	8005000 <TIM_Base_SetConfig+0xf8>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	4a12      	ldr	r2, [pc, #72]	; (800502c <TIM_Base_SetConfig+0x124>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d00b      	beq.n	8005000 <TIM_Base_SetConfig+0xf8>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	4a11      	ldr	r2, [pc, #68]	; (8005030 <TIM_Base_SetConfig+0x128>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d007      	beq.n	8005000 <TIM_Base_SetConfig+0xf8>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	4a10      	ldr	r2, [pc, #64]	; (8005034 <TIM_Base_SetConfig+0x12c>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d003      	beq.n	8005000 <TIM_Base_SetConfig+0xf8>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	4a0f      	ldr	r2, [pc, #60]	; (8005038 <TIM_Base_SetConfig+0x130>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d103      	bne.n	8005008 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	691a      	ldr	r2, [r3, #16]
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2201      	movs	r2, #1
 800500c:	615a      	str	r2, [r3, #20]
}
 800500e:	bf00      	nop
 8005010:	3714      	adds	r7, #20
 8005012:	46bd      	mov	sp, r7
 8005014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005018:	4770      	bx	lr
 800501a:	bf00      	nop
 800501c:	40012c00 	.word	0x40012c00
 8005020:	40000400 	.word	0x40000400
 8005024:	40000800 	.word	0x40000800
 8005028:	40000c00 	.word	0x40000c00
 800502c:	40013400 	.word	0x40013400
 8005030:	40014000 	.word	0x40014000
 8005034:	40014400 	.word	0x40014400
 8005038:	40014800 	.word	0x40014800

0800503c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800503c:	b480      	push	{r7}
 800503e:	b087      	sub	sp, #28
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
 8005044:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6a1b      	ldr	r3, [r3, #32]
 800504a:	f023 0201 	bic.w	r2, r3, #1
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6a1b      	ldr	r3, [r3, #32]
 8005056:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	685b      	ldr	r3, [r3, #4]
 800505c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	699b      	ldr	r3, [r3, #24]
 8005062:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800506a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800506e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	f023 0303 	bic.w	r3, r3, #3
 8005076:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	68fa      	ldr	r2, [r7, #12]
 800507e:	4313      	orrs	r3, r2
 8005080:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005082:	697b      	ldr	r3, [r7, #20]
 8005084:	f023 0302 	bic.w	r3, r3, #2
 8005088:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	689b      	ldr	r3, [r3, #8]
 800508e:	697a      	ldr	r2, [r7, #20]
 8005090:	4313      	orrs	r3, r2
 8005092:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	4a2c      	ldr	r2, [pc, #176]	; (8005148 <TIM_OC1_SetConfig+0x10c>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d00f      	beq.n	80050bc <TIM_OC1_SetConfig+0x80>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	4a2b      	ldr	r2, [pc, #172]	; (800514c <TIM_OC1_SetConfig+0x110>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d00b      	beq.n	80050bc <TIM_OC1_SetConfig+0x80>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	4a2a      	ldr	r2, [pc, #168]	; (8005150 <TIM_OC1_SetConfig+0x114>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d007      	beq.n	80050bc <TIM_OC1_SetConfig+0x80>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	4a29      	ldr	r2, [pc, #164]	; (8005154 <TIM_OC1_SetConfig+0x118>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d003      	beq.n	80050bc <TIM_OC1_SetConfig+0x80>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	4a28      	ldr	r2, [pc, #160]	; (8005158 <TIM_OC1_SetConfig+0x11c>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d10c      	bne.n	80050d6 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80050bc:	697b      	ldr	r3, [r7, #20]
 80050be:	f023 0308 	bic.w	r3, r3, #8
 80050c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	68db      	ldr	r3, [r3, #12]
 80050c8:	697a      	ldr	r2, [r7, #20]
 80050ca:	4313      	orrs	r3, r2
 80050cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80050ce:	697b      	ldr	r3, [r7, #20]
 80050d0:	f023 0304 	bic.w	r3, r3, #4
 80050d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	4a1b      	ldr	r2, [pc, #108]	; (8005148 <TIM_OC1_SetConfig+0x10c>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d00f      	beq.n	80050fe <TIM_OC1_SetConfig+0xc2>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	4a1a      	ldr	r2, [pc, #104]	; (800514c <TIM_OC1_SetConfig+0x110>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d00b      	beq.n	80050fe <TIM_OC1_SetConfig+0xc2>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	4a19      	ldr	r2, [pc, #100]	; (8005150 <TIM_OC1_SetConfig+0x114>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d007      	beq.n	80050fe <TIM_OC1_SetConfig+0xc2>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	4a18      	ldr	r2, [pc, #96]	; (8005154 <TIM_OC1_SetConfig+0x118>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d003      	beq.n	80050fe <TIM_OC1_SetConfig+0xc2>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	4a17      	ldr	r2, [pc, #92]	; (8005158 <TIM_OC1_SetConfig+0x11c>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d111      	bne.n	8005122 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005104:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005106:	693b      	ldr	r3, [r7, #16]
 8005108:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800510c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	695b      	ldr	r3, [r3, #20]
 8005112:	693a      	ldr	r2, [r7, #16]
 8005114:	4313      	orrs	r3, r2
 8005116:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	699b      	ldr	r3, [r3, #24]
 800511c:	693a      	ldr	r2, [r7, #16]
 800511e:	4313      	orrs	r3, r2
 8005120:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	693a      	ldr	r2, [r7, #16]
 8005126:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	68fa      	ldr	r2, [r7, #12]
 800512c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	685a      	ldr	r2, [r3, #4]
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	697a      	ldr	r2, [r7, #20]
 800513a:	621a      	str	r2, [r3, #32]
}
 800513c:	bf00      	nop
 800513e:	371c      	adds	r7, #28
 8005140:	46bd      	mov	sp, r7
 8005142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005146:	4770      	bx	lr
 8005148:	40012c00 	.word	0x40012c00
 800514c:	40013400 	.word	0x40013400
 8005150:	40014000 	.word	0x40014000
 8005154:	40014400 	.word	0x40014400
 8005158:	40014800 	.word	0x40014800

0800515c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800515c:	b480      	push	{r7}
 800515e:	b087      	sub	sp, #28
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
 8005164:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6a1b      	ldr	r3, [r3, #32]
 800516a:	f023 0210 	bic.w	r2, r3, #16
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6a1b      	ldr	r3, [r3, #32]
 8005176:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	685b      	ldr	r3, [r3, #4]
 800517c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	699b      	ldr	r3, [r3, #24]
 8005182:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800518a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800518e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005196:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	021b      	lsls	r3, r3, #8
 800519e:	68fa      	ldr	r2, [r7, #12]
 80051a0:	4313      	orrs	r3, r2
 80051a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80051a4:	697b      	ldr	r3, [r7, #20]
 80051a6:	f023 0320 	bic.w	r3, r3, #32
 80051aa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	689b      	ldr	r3, [r3, #8]
 80051b0:	011b      	lsls	r3, r3, #4
 80051b2:	697a      	ldr	r2, [r7, #20]
 80051b4:	4313      	orrs	r3, r2
 80051b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	4a28      	ldr	r2, [pc, #160]	; (800525c <TIM_OC2_SetConfig+0x100>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d003      	beq.n	80051c8 <TIM_OC2_SetConfig+0x6c>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	4a27      	ldr	r2, [pc, #156]	; (8005260 <TIM_OC2_SetConfig+0x104>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d10d      	bne.n	80051e4 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80051c8:	697b      	ldr	r3, [r7, #20]
 80051ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80051ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	68db      	ldr	r3, [r3, #12]
 80051d4:	011b      	lsls	r3, r3, #4
 80051d6:	697a      	ldr	r2, [r7, #20]
 80051d8:	4313      	orrs	r3, r2
 80051da:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80051dc:	697b      	ldr	r3, [r7, #20]
 80051de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80051e2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	4a1d      	ldr	r2, [pc, #116]	; (800525c <TIM_OC2_SetConfig+0x100>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d00f      	beq.n	800520c <TIM_OC2_SetConfig+0xb0>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	4a1c      	ldr	r2, [pc, #112]	; (8005260 <TIM_OC2_SetConfig+0x104>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d00b      	beq.n	800520c <TIM_OC2_SetConfig+0xb0>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	4a1b      	ldr	r2, [pc, #108]	; (8005264 <TIM_OC2_SetConfig+0x108>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d007      	beq.n	800520c <TIM_OC2_SetConfig+0xb0>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	4a1a      	ldr	r2, [pc, #104]	; (8005268 <TIM_OC2_SetConfig+0x10c>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d003      	beq.n	800520c <TIM_OC2_SetConfig+0xb0>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	4a19      	ldr	r2, [pc, #100]	; (800526c <TIM_OC2_SetConfig+0x110>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d113      	bne.n	8005234 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800520c:	693b      	ldr	r3, [r7, #16]
 800520e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005212:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005214:	693b      	ldr	r3, [r7, #16]
 8005216:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800521a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	695b      	ldr	r3, [r3, #20]
 8005220:	009b      	lsls	r3, r3, #2
 8005222:	693a      	ldr	r2, [r7, #16]
 8005224:	4313      	orrs	r3, r2
 8005226:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	699b      	ldr	r3, [r3, #24]
 800522c:	009b      	lsls	r3, r3, #2
 800522e:	693a      	ldr	r2, [r7, #16]
 8005230:	4313      	orrs	r3, r2
 8005232:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	693a      	ldr	r2, [r7, #16]
 8005238:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	68fa      	ldr	r2, [r7, #12]
 800523e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	685a      	ldr	r2, [r3, #4]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	697a      	ldr	r2, [r7, #20]
 800524c:	621a      	str	r2, [r3, #32]
}
 800524e:	bf00      	nop
 8005250:	371c      	adds	r7, #28
 8005252:	46bd      	mov	sp, r7
 8005254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005258:	4770      	bx	lr
 800525a:	bf00      	nop
 800525c:	40012c00 	.word	0x40012c00
 8005260:	40013400 	.word	0x40013400
 8005264:	40014000 	.word	0x40014000
 8005268:	40014400 	.word	0x40014400
 800526c:	40014800 	.word	0x40014800

08005270 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005270:	b480      	push	{r7}
 8005272:	b087      	sub	sp, #28
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
 8005278:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6a1b      	ldr	r3, [r3, #32]
 800527e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6a1b      	ldr	r3, [r3, #32]
 800528a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	685b      	ldr	r3, [r3, #4]
 8005290:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	69db      	ldr	r3, [r3, #28]
 8005296:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800529e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	f023 0303 	bic.w	r3, r3, #3
 80052aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	68fa      	ldr	r2, [r7, #12]
 80052b2:	4313      	orrs	r3, r2
 80052b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80052b6:	697b      	ldr	r3, [r7, #20]
 80052b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80052bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	689b      	ldr	r3, [r3, #8]
 80052c2:	021b      	lsls	r3, r3, #8
 80052c4:	697a      	ldr	r2, [r7, #20]
 80052c6:	4313      	orrs	r3, r2
 80052c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	4a27      	ldr	r2, [pc, #156]	; (800536c <TIM_OC3_SetConfig+0xfc>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d003      	beq.n	80052da <TIM_OC3_SetConfig+0x6a>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	4a26      	ldr	r2, [pc, #152]	; (8005370 <TIM_OC3_SetConfig+0x100>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d10d      	bne.n	80052f6 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80052da:	697b      	ldr	r3, [r7, #20]
 80052dc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80052e0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	68db      	ldr	r3, [r3, #12]
 80052e6:	021b      	lsls	r3, r3, #8
 80052e8:	697a      	ldr	r2, [r7, #20]
 80052ea:	4313      	orrs	r3, r2
 80052ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80052ee:	697b      	ldr	r3, [r7, #20]
 80052f0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80052f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	4a1c      	ldr	r2, [pc, #112]	; (800536c <TIM_OC3_SetConfig+0xfc>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d00f      	beq.n	800531e <TIM_OC3_SetConfig+0xae>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	4a1b      	ldr	r2, [pc, #108]	; (8005370 <TIM_OC3_SetConfig+0x100>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d00b      	beq.n	800531e <TIM_OC3_SetConfig+0xae>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	4a1a      	ldr	r2, [pc, #104]	; (8005374 <TIM_OC3_SetConfig+0x104>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d007      	beq.n	800531e <TIM_OC3_SetConfig+0xae>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	4a19      	ldr	r2, [pc, #100]	; (8005378 <TIM_OC3_SetConfig+0x108>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d003      	beq.n	800531e <TIM_OC3_SetConfig+0xae>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	4a18      	ldr	r2, [pc, #96]	; (800537c <TIM_OC3_SetConfig+0x10c>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d113      	bne.n	8005346 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800531e:	693b      	ldr	r3, [r7, #16]
 8005320:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005324:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005326:	693b      	ldr	r3, [r7, #16]
 8005328:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800532c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	695b      	ldr	r3, [r3, #20]
 8005332:	011b      	lsls	r3, r3, #4
 8005334:	693a      	ldr	r2, [r7, #16]
 8005336:	4313      	orrs	r3, r2
 8005338:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	699b      	ldr	r3, [r3, #24]
 800533e:	011b      	lsls	r3, r3, #4
 8005340:	693a      	ldr	r2, [r7, #16]
 8005342:	4313      	orrs	r3, r2
 8005344:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	693a      	ldr	r2, [r7, #16]
 800534a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	68fa      	ldr	r2, [r7, #12]
 8005350:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	685a      	ldr	r2, [r3, #4]
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	697a      	ldr	r2, [r7, #20]
 800535e:	621a      	str	r2, [r3, #32]
}
 8005360:	bf00      	nop
 8005362:	371c      	adds	r7, #28
 8005364:	46bd      	mov	sp, r7
 8005366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536a:	4770      	bx	lr
 800536c:	40012c00 	.word	0x40012c00
 8005370:	40013400 	.word	0x40013400
 8005374:	40014000 	.word	0x40014000
 8005378:	40014400 	.word	0x40014400
 800537c:	40014800 	.word	0x40014800

08005380 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005380:	b480      	push	{r7}
 8005382:	b087      	sub	sp, #28
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
 8005388:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6a1b      	ldr	r3, [r3, #32]
 800538e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6a1b      	ldr	r3, [r3, #32]
 800539a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	685b      	ldr	r3, [r3, #4]
 80053a0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	69db      	ldr	r3, [r3, #28]
 80053a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80053ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	021b      	lsls	r3, r3, #8
 80053c2:	68fa      	ldr	r2, [r7, #12]
 80053c4:	4313      	orrs	r3, r2
 80053c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80053c8:	693b      	ldr	r3, [r7, #16]
 80053ca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80053ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	689b      	ldr	r3, [r3, #8]
 80053d4:	031b      	lsls	r3, r3, #12
 80053d6:	693a      	ldr	r2, [r7, #16]
 80053d8:	4313      	orrs	r3, r2
 80053da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	4a18      	ldr	r2, [pc, #96]	; (8005440 <TIM_OC4_SetConfig+0xc0>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d00f      	beq.n	8005404 <TIM_OC4_SetConfig+0x84>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	4a17      	ldr	r2, [pc, #92]	; (8005444 <TIM_OC4_SetConfig+0xc4>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d00b      	beq.n	8005404 <TIM_OC4_SetConfig+0x84>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	4a16      	ldr	r2, [pc, #88]	; (8005448 <TIM_OC4_SetConfig+0xc8>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d007      	beq.n	8005404 <TIM_OC4_SetConfig+0x84>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	4a15      	ldr	r2, [pc, #84]	; (800544c <TIM_OC4_SetConfig+0xcc>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d003      	beq.n	8005404 <TIM_OC4_SetConfig+0x84>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	4a14      	ldr	r2, [pc, #80]	; (8005450 <TIM_OC4_SetConfig+0xd0>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d109      	bne.n	8005418 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005404:	697b      	ldr	r3, [r7, #20]
 8005406:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800540a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	695b      	ldr	r3, [r3, #20]
 8005410:	019b      	lsls	r3, r3, #6
 8005412:	697a      	ldr	r2, [r7, #20]
 8005414:	4313      	orrs	r3, r2
 8005416:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	697a      	ldr	r2, [r7, #20]
 800541c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	68fa      	ldr	r2, [r7, #12]
 8005422:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	685a      	ldr	r2, [r3, #4]
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	693a      	ldr	r2, [r7, #16]
 8005430:	621a      	str	r2, [r3, #32]
}
 8005432:	bf00      	nop
 8005434:	371c      	adds	r7, #28
 8005436:	46bd      	mov	sp, r7
 8005438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543c:	4770      	bx	lr
 800543e:	bf00      	nop
 8005440:	40012c00 	.word	0x40012c00
 8005444:	40013400 	.word	0x40013400
 8005448:	40014000 	.word	0x40014000
 800544c:	40014400 	.word	0x40014400
 8005450:	40014800 	.word	0x40014800

08005454 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005454:	b480      	push	{r7}
 8005456:	b087      	sub	sp, #28
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
 800545c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6a1b      	ldr	r3, [r3, #32]
 8005462:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6a1b      	ldr	r3, [r3, #32]
 800546e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	685b      	ldr	r3, [r3, #4]
 8005474:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800547a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005482:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005486:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	68fa      	ldr	r2, [r7, #12]
 800548e:	4313      	orrs	r3, r2
 8005490:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005492:	693b      	ldr	r3, [r7, #16]
 8005494:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005498:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	689b      	ldr	r3, [r3, #8]
 800549e:	041b      	lsls	r3, r3, #16
 80054a0:	693a      	ldr	r2, [r7, #16]
 80054a2:	4313      	orrs	r3, r2
 80054a4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	4a17      	ldr	r2, [pc, #92]	; (8005508 <TIM_OC5_SetConfig+0xb4>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d00f      	beq.n	80054ce <TIM_OC5_SetConfig+0x7a>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	4a16      	ldr	r2, [pc, #88]	; (800550c <TIM_OC5_SetConfig+0xb8>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d00b      	beq.n	80054ce <TIM_OC5_SetConfig+0x7a>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	4a15      	ldr	r2, [pc, #84]	; (8005510 <TIM_OC5_SetConfig+0xbc>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d007      	beq.n	80054ce <TIM_OC5_SetConfig+0x7a>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	4a14      	ldr	r2, [pc, #80]	; (8005514 <TIM_OC5_SetConfig+0xc0>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d003      	beq.n	80054ce <TIM_OC5_SetConfig+0x7a>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	4a13      	ldr	r2, [pc, #76]	; (8005518 <TIM_OC5_SetConfig+0xc4>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d109      	bne.n	80054e2 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80054ce:	697b      	ldr	r3, [r7, #20]
 80054d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80054d4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	695b      	ldr	r3, [r3, #20]
 80054da:	021b      	lsls	r3, r3, #8
 80054dc:	697a      	ldr	r2, [r7, #20]
 80054de:	4313      	orrs	r3, r2
 80054e0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	697a      	ldr	r2, [r7, #20]
 80054e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	68fa      	ldr	r2, [r7, #12]
 80054ec:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	685a      	ldr	r2, [r3, #4]
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	693a      	ldr	r2, [r7, #16]
 80054fa:	621a      	str	r2, [r3, #32]
}
 80054fc:	bf00      	nop
 80054fe:	371c      	adds	r7, #28
 8005500:	46bd      	mov	sp, r7
 8005502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005506:	4770      	bx	lr
 8005508:	40012c00 	.word	0x40012c00
 800550c:	40013400 	.word	0x40013400
 8005510:	40014000 	.word	0x40014000
 8005514:	40014400 	.word	0x40014400
 8005518:	40014800 	.word	0x40014800

0800551c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800551c:	b480      	push	{r7}
 800551e:	b087      	sub	sp, #28
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
 8005524:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6a1b      	ldr	r3, [r3, #32]
 800552a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6a1b      	ldr	r3, [r3, #32]
 8005536:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	685b      	ldr	r3, [r3, #4]
 800553c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005542:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800554a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800554e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	021b      	lsls	r3, r3, #8
 8005556:	68fa      	ldr	r2, [r7, #12]
 8005558:	4313      	orrs	r3, r2
 800555a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800555c:	693b      	ldr	r3, [r7, #16]
 800555e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005562:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	689b      	ldr	r3, [r3, #8]
 8005568:	051b      	lsls	r3, r3, #20
 800556a:	693a      	ldr	r2, [r7, #16]
 800556c:	4313      	orrs	r3, r2
 800556e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	4a18      	ldr	r2, [pc, #96]	; (80055d4 <TIM_OC6_SetConfig+0xb8>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d00f      	beq.n	8005598 <TIM_OC6_SetConfig+0x7c>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	4a17      	ldr	r2, [pc, #92]	; (80055d8 <TIM_OC6_SetConfig+0xbc>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d00b      	beq.n	8005598 <TIM_OC6_SetConfig+0x7c>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	4a16      	ldr	r2, [pc, #88]	; (80055dc <TIM_OC6_SetConfig+0xc0>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d007      	beq.n	8005598 <TIM_OC6_SetConfig+0x7c>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	4a15      	ldr	r2, [pc, #84]	; (80055e0 <TIM_OC6_SetConfig+0xc4>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d003      	beq.n	8005598 <TIM_OC6_SetConfig+0x7c>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	4a14      	ldr	r2, [pc, #80]	; (80055e4 <TIM_OC6_SetConfig+0xc8>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d109      	bne.n	80055ac <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005598:	697b      	ldr	r3, [r7, #20]
 800559a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800559e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	695b      	ldr	r3, [r3, #20]
 80055a4:	029b      	lsls	r3, r3, #10
 80055a6:	697a      	ldr	r2, [r7, #20]
 80055a8:	4313      	orrs	r3, r2
 80055aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	697a      	ldr	r2, [r7, #20]
 80055b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	68fa      	ldr	r2, [r7, #12]
 80055b6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	685a      	ldr	r2, [r3, #4]
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	693a      	ldr	r2, [r7, #16]
 80055c4:	621a      	str	r2, [r3, #32]
}
 80055c6:	bf00      	nop
 80055c8:	371c      	adds	r7, #28
 80055ca:	46bd      	mov	sp, r7
 80055cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d0:	4770      	bx	lr
 80055d2:	bf00      	nop
 80055d4:	40012c00 	.word	0x40012c00
 80055d8:	40013400 	.word	0x40013400
 80055dc:	40014000 	.word	0x40014000
 80055e0:	40014400 	.word	0x40014400
 80055e4:	40014800 	.word	0x40014800

080055e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80055e8:	b480      	push	{r7}
 80055ea:	b087      	sub	sp, #28
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	60f8      	str	r0, [r7, #12]
 80055f0:	60b9      	str	r1, [r7, #8]
 80055f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	6a1b      	ldr	r3, [r3, #32]
 80055f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	6a1b      	ldr	r3, [r3, #32]
 80055fe:	f023 0201 	bic.w	r2, r3, #1
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	699b      	ldr	r3, [r3, #24]
 800560a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800560c:	693b      	ldr	r3, [r7, #16]
 800560e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005612:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	011b      	lsls	r3, r3, #4
 8005618:	693a      	ldr	r2, [r7, #16]
 800561a:	4313      	orrs	r3, r2
 800561c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800561e:	697b      	ldr	r3, [r7, #20]
 8005620:	f023 030a 	bic.w	r3, r3, #10
 8005624:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005626:	697a      	ldr	r2, [r7, #20]
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	4313      	orrs	r3, r2
 800562c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	693a      	ldr	r2, [r7, #16]
 8005632:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	697a      	ldr	r2, [r7, #20]
 8005638:	621a      	str	r2, [r3, #32]
}
 800563a:	bf00      	nop
 800563c:	371c      	adds	r7, #28
 800563e:	46bd      	mov	sp, r7
 8005640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005644:	4770      	bx	lr

08005646 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005646:	b480      	push	{r7}
 8005648:	b087      	sub	sp, #28
 800564a:	af00      	add	r7, sp, #0
 800564c:	60f8      	str	r0, [r7, #12]
 800564e:	60b9      	str	r1, [r7, #8]
 8005650:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	6a1b      	ldr	r3, [r3, #32]
 8005656:	f023 0210 	bic.w	r2, r3, #16
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	699b      	ldr	r3, [r3, #24]
 8005662:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	6a1b      	ldr	r3, [r3, #32]
 8005668:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005670:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	031b      	lsls	r3, r3, #12
 8005676:	697a      	ldr	r2, [r7, #20]
 8005678:	4313      	orrs	r3, r2
 800567a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800567c:	693b      	ldr	r3, [r7, #16]
 800567e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005682:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	011b      	lsls	r3, r3, #4
 8005688:	693a      	ldr	r2, [r7, #16]
 800568a:	4313      	orrs	r3, r2
 800568c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	697a      	ldr	r2, [r7, #20]
 8005692:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	693a      	ldr	r2, [r7, #16]
 8005698:	621a      	str	r2, [r3, #32]
}
 800569a:	bf00      	nop
 800569c:	371c      	adds	r7, #28
 800569e:	46bd      	mov	sp, r7
 80056a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a4:	4770      	bx	lr

080056a6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80056a6:	b480      	push	{r7}
 80056a8:	b085      	sub	sp, #20
 80056aa:	af00      	add	r7, sp, #0
 80056ac:	6078      	str	r0, [r7, #4]
 80056ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	689b      	ldr	r3, [r3, #8]
 80056b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80056be:	683a      	ldr	r2, [r7, #0]
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	4313      	orrs	r3, r2
 80056c4:	f043 0307 	orr.w	r3, r3, #7
 80056c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	68fa      	ldr	r2, [r7, #12]
 80056ce:	609a      	str	r2, [r3, #8]
}
 80056d0:	bf00      	nop
 80056d2:	3714      	adds	r7, #20
 80056d4:	46bd      	mov	sp, r7
 80056d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056da:	4770      	bx	lr

080056dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80056dc:	b480      	push	{r7}
 80056de:	b087      	sub	sp, #28
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	60f8      	str	r0, [r7, #12]
 80056e4:	60b9      	str	r1, [r7, #8]
 80056e6:	607a      	str	r2, [r7, #4]
 80056e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	689b      	ldr	r3, [r3, #8]
 80056ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80056f0:	697b      	ldr	r3, [r7, #20]
 80056f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80056f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	021a      	lsls	r2, r3, #8
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	431a      	orrs	r2, r3
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	4313      	orrs	r3, r2
 8005704:	697a      	ldr	r2, [r7, #20]
 8005706:	4313      	orrs	r3, r2
 8005708:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	697a      	ldr	r2, [r7, #20]
 800570e:	609a      	str	r2, [r3, #8]
}
 8005710:	bf00      	nop
 8005712:	371c      	adds	r7, #28
 8005714:	46bd      	mov	sp, r7
 8005716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571a:	4770      	bx	lr

0800571c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800571c:	b480      	push	{r7}
 800571e:	b085      	sub	sp, #20
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
 8005724:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800572c:	2b01      	cmp	r3, #1
 800572e:	d101      	bne.n	8005734 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005730:	2302      	movs	r3, #2
 8005732:	e068      	b.n	8005806 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2201      	movs	r2, #1
 8005738:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2202      	movs	r2, #2
 8005740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	685b      	ldr	r3, [r3, #4]
 800574a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	689b      	ldr	r3, [r3, #8]
 8005752:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4a2e      	ldr	r2, [pc, #184]	; (8005814 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d004      	beq.n	8005768 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	4a2d      	ldr	r2, [pc, #180]	; (8005818 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005764:	4293      	cmp	r3, r2
 8005766:	d108      	bne.n	800577a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800576e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	685b      	ldr	r3, [r3, #4]
 8005774:	68fa      	ldr	r2, [r7, #12]
 8005776:	4313      	orrs	r3, r2
 8005778:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005780:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	68fa      	ldr	r2, [r7, #12]
 8005788:	4313      	orrs	r3, r2
 800578a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	68fa      	ldr	r2, [r7, #12]
 8005792:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4a1e      	ldr	r2, [pc, #120]	; (8005814 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d01d      	beq.n	80057da <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057a6:	d018      	beq.n	80057da <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4a1b      	ldr	r2, [pc, #108]	; (800581c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d013      	beq.n	80057da <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4a1a      	ldr	r2, [pc, #104]	; (8005820 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d00e      	beq.n	80057da <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4a18      	ldr	r2, [pc, #96]	; (8005824 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d009      	beq.n	80057da <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4a13      	ldr	r2, [pc, #76]	; (8005818 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d004      	beq.n	80057da <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4a14      	ldr	r2, [pc, #80]	; (8005828 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d10c      	bne.n	80057f4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80057da:	68bb      	ldr	r3, [r7, #8]
 80057dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80057e0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	689b      	ldr	r3, [r3, #8]
 80057e6:	68ba      	ldr	r2, [r7, #8]
 80057e8:	4313      	orrs	r3, r2
 80057ea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	68ba      	ldr	r2, [r7, #8]
 80057f2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2201      	movs	r2, #1
 80057f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2200      	movs	r2, #0
 8005800:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005804:	2300      	movs	r3, #0
}
 8005806:	4618      	mov	r0, r3
 8005808:	3714      	adds	r7, #20
 800580a:	46bd      	mov	sp, r7
 800580c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005810:	4770      	bx	lr
 8005812:	bf00      	nop
 8005814:	40012c00 	.word	0x40012c00
 8005818:	40013400 	.word	0x40013400
 800581c:	40000400 	.word	0x40000400
 8005820:	40000800 	.word	0x40000800
 8005824:	40000c00 	.word	0x40000c00
 8005828:	40014000 	.word	0x40014000

0800582c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800582c:	b480      	push	{r7}
 800582e:	b083      	sub	sp, #12
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005834:	bf00      	nop
 8005836:	370c      	adds	r7, #12
 8005838:	46bd      	mov	sp, r7
 800583a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583e:	4770      	bx	lr

08005840 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005840:	b480      	push	{r7}
 8005842:	b083      	sub	sp, #12
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005848:	bf00      	nop
 800584a:	370c      	adds	r7, #12
 800584c:	46bd      	mov	sp, r7
 800584e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005852:	4770      	bx	lr

08005854 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005854:	b480      	push	{r7}
 8005856:	b083      	sub	sp, #12
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800585c:	bf00      	nop
 800585e:	370c      	adds	r7, #12
 8005860:	46bd      	mov	sp, r7
 8005862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005866:	4770      	bx	lr

08005868 <__libc_init_array>:
 8005868:	b570      	push	{r4, r5, r6, lr}
 800586a:	4d0d      	ldr	r5, [pc, #52]	; (80058a0 <__libc_init_array+0x38>)
 800586c:	4c0d      	ldr	r4, [pc, #52]	; (80058a4 <__libc_init_array+0x3c>)
 800586e:	1b64      	subs	r4, r4, r5
 8005870:	10a4      	asrs	r4, r4, #2
 8005872:	2600      	movs	r6, #0
 8005874:	42a6      	cmp	r6, r4
 8005876:	d109      	bne.n	800588c <__libc_init_array+0x24>
 8005878:	4d0b      	ldr	r5, [pc, #44]	; (80058a8 <__libc_init_array+0x40>)
 800587a:	4c0c      	ldr	r4, [pc, #48]	; (80058ac <__libc_init_array+0x44>)
 800587c:	f000 f820 	bl	80058c0 <_init>
 8005880:	1b64      	subs	r4, r4, r5
 8005882:	10a4      	asrs	r4, r4, #2
 8005884:	2600      	movs	r6, #0
 8005886:	42a6      	cmp	r6, r4
 8005888:	d105      	bne.n	8005896 <__libc_init_array+0x2e>
 800588a:	bd70      	pop	{r4, r5, r6, pc}
 800588c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005890:	4798      	blx	r3
 8005892:	3601      	adds	r6, #1
 8005894:	e7ee      	b.n	8005874 <__libc_init_array+0xc>
 8005896:	f855 3b04 	ldr.w	r3, [r5], #4
 800589a:	4798      	blx	r3
 800589c:	3601      	adds	r6, #1
 800589e:	e7f2      	b.n	8005886 <__libc_init_array+0x1e>
 80058a0:	08005918 	.word	0x08005918
 80058a4:	08005918 	.word	0x08005918
 80058a8:	08005918 	.word	0x08005918
 80058ac:	0800591c 	.word	0x0800591c

080058b0 <memset>:
 80058b0:	4402      	add	r2, r0
 80058b2:	4603      	mov	r3, r0
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d100      	bne.n	80058ba <memset+0xa>
 80058b8:	4770      	bx	lr
 80058ba:	f803 1b01 	strb.w	r1, [r3], #1
 80058be:	e7f9      	b.n	80058b4 <memset+0x4>

080058c0 <_init>:
 80058c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058c2:	bf00      	nop
 80058c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058c6:	bc08      	pop	{r3}
 80058c8:	469e      	mov	lr, r3
 80058ca:	4770      	bx	lr

080058cc <_fini>:
 80058cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058ce:	bf00      	nop
 80058d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058d2:	bc08      	pop	{r3}
 80058d4:	469e      	mov	lr, r3
 80058d6:	4770      	bx	lr
